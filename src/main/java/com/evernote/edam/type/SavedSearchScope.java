/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

import com.evernote.thrift.*;
import com.evernote.thrift.protocol.*;

/**
 * A structure defining the scope of a SavedSearch.
 * 
 * <dl>
 *   <dt>includeAccount</dt>
 *   <dd>The search should include notes from the account that contains the SavedSearch.</dd>
 * 
 *   <dt>includePersonalLinkedNotebooks</dt>
 *   <dd>The search should include notes within those shared notebooks
 *   that the user has joined that are NOT business notebooks.</dd>
 * 
 *   <dt>includeBusinessLinkedNotebooks</dt>
 *   <dd>The search should include notes within those shared notebooks
 *   that the user has joined that are business notebooks in the business that
 *   the user is currently a member of.</dd>
 * </dl>
 */
public class SavedSearchScope implements TBase<SavedSearchScope>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SavedSearchScope");

  private static final TField INCLUDE_ACCOUNT_FIELD_DESC = new TField("includeAccount", TType.BOOL, (short)1);
  private static final TField INCLUDE_PERSONAL_LINKED_NOTEBOOKS_FIELD_DESC = new TField("includePersonalLinkedNotebooks", TType.BOOL, (short)2);
  private static final TField INCLUDE_BUSINESS_LINKED_NOTEBOOKS_FIELD_DESC = new TField("includeBusinessLinkedNotebooks", TType.BOOL, (short)3);

  private boolean includeAccount;
  private boolean includePersonalLinkedNotebooks;
  private boolean includeBusinessLinkedNotebooks;


  // isset id assignments
  private static final int __INCLUDEACCOUNT_ISSET_ID = 0;
  private static final int __INCLUDEPERSONALLINKEDNOTEBOOKS_ISSET_ID = 1;
  private static final int __INCLUDEBUSINESSLINKEDNOTEBOOKS_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public SavedSearchScope() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SavedSearchScope(SavedSearchScope other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.includeAccount = other.includeAccount;
    this.includePersonalLinkedNotebooks = other.includePersonalLinkedNotebooks;
    this.includeBusinessLinkedNotebooks = other.includeBusinessLinkedNotebooks;
  }

  public SavedSearchScope deepCopy() {
    return new SavedSearchScope(this);
  }

  public void clear() {
    setIncludeAccountIsSet(false);
    this.includeAccount = false;
    setIncludePersonalLinkedNotebooksIsSet(false);
    this.includePersonalLinkedNotebooks = false;
    setIncludeBusinessLinkedNotebooksIsSet(false);
    this.includeBusinessLinkedNotebooks = false;
  }

  public boolean isIncludeAccount() {
    return this.includeAccount;
  }

  public void setIncludeAccount(boolean includeAccount) {
    this.includeAccount = includeAccount;
    setIncludeAccountIsSet(true);
  }

  public void unsetIncludeAccount() {
    __isset_vector[__INCLUDEACCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field includeAccount is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeAccount() {
    return __isset_vector[__INCLUDEACCOUNT_ISSET_ID];
  }

  public void setIncludeAccountIsSet(boolean value) {
    __isset_vector[__INCLUDEACCOUNT_ISSET_ID] = value;
  }

  public boolean isIncludePersonalLinkedNotebooks() {
    return this.includePersonalLinkedNotebooks;
  }

  public void setIncludePersonalLinkedNotebooks(boolean includePersonalLinkedNotebooks) {
    this.includePersonalLinkedNotebooks = includePersonalLinkedNotebooks;
    setIncludePersonalLinkedNotebooksIsSet(true);
  }

  public void unsetIncludePersonalLinkedNotebooks() {
    __isset_vector[__INCLUDEPERSONALLINKEDNOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field includePersonalLinkedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludePersonalLinkedNotebooks() {
    return __isset_vector[__INCLUDEPERSONALLINKEDNOTEBOOKS_ISSET_ID];
  }

  public void setIncludePersonalLinkedNotebooksIsSet(boolean value) {
    __isset_vector[__INCLUDEPERSONALLINKEDNOTEBOOKS_ISSET_ID] = value;
  }

  public boolean isIncludeBusinessLinkedNotebooks() {
    return this.includeBusinessLinkedNotebooks;
  }

  public void setIncludeBusinessLinkedNotebooks(boolean includeBusinessLinkedNotebooks) {
    this.includeBusinessLinkedNotebooks = includeBusinessLinkedNotebooks;
    setIncludeBusinessLinkedNotebooksIsSet(true);
  }

  public void unsetIncludeBusinessLinkedNotebooks() {
    __isset_vector[__INCLUDEBUSINESSLINKEDNOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field includeBusinessLinkedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetIncludeBusinessLinkedNotebooks() {
    return __isset_vector[__INCLUDEBUSINESSLINKEDNOTEBOOKS_ISSET_ID];
  }

  public void setIncludeBusinessLinkedNotebooksIsSet(boolean value) {
    __isset_vector[__INCLUDEBUSINESSLINKEDNOTEBOOKS_ISSET_ID] = value;
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SavedSearchScope)
      return this.equals((SavedSearchScope)that);
    return false;
  }

  public boolean equals(SavedSearchScope that) {
    if (that == null)
      return false;

    boolean this_present_includeAccount = true && this.isSetIncludeAccount();
    boolean that_present_includeAccount = true && that.isSetIncludeAccount();
    if (this_present_includeAccount || that_present_includeAccount) {
      if (!(this_present_includeAccount && that_present_includeAccount))
        return false;
      if (this.includeAccount != that.includeAccount)
        return false;
    }

    boolean this_present_includePersonalLinkedNotebooks = true && this.isSetIncludePersonalLinkedNotebooks();
    boolean that_present_includePersonalLinkedNotebooks = true && that.isSetIncludePersonalLinkedNotebooks();
    if (this_present_includePersonalLinkedNotebooks || that_present_includePersonalLinkedNotebooks) {
      if (!(this_present_includePersonalLinkedNotebooks && that_present_includePersonalLinkedNotebooks))
        return false;
      if (this.includePersonalLinkedNotebooks != that.includePersonalLinkedNotebooks)
        return false;
    }

    boolean this_present_includeBusinessLinkedNotebooks = true && this.isSetIncludeBusinessLinkedNotebooks();
    boolean that_present_includeBusinessLinkedNotebooks = true && that.isSetIncludeBusinessLinkedNotebooks();
    if (this_present_includeBusinessLinkedNotebooks || that_present_includeBusinessLinkedNotebooks) {
      if (!(this_present_includeBusinessLinkedNotebooks && that_present_includeBusinessLinkedNotebooks))
        return false;
      if (this.includeBusinessLinkedNotebooks != that.includeBusinessLinkedNotebooks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SavedSearchScope other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SavedSearchScope typedOther = (SavedSearchScope)other;

    lastComparison = Boolean.valueOf(isSetIncludeAccount()).compareTo(typedOther.isSetIncludeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeAccount()) {      lastComparison = TBaseHelper.compareTo(this.includeAccount, typedOther.includeAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePersonalLinkedNotebooks()).compareTo(typedOther.isSetIncludePersonalLinkedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePersonalLinkedNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.includePersonalLinkedNotebooks, typedOther.includePersonalLinkedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeBusinessLinkedNotebooks()).compareTo(typedOther.isSetIncludeBusinessLinkedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeBusinessLinkedNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.includeBusinessLinkedNotebooks, typedOther.includeBusinessLinkedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INCLUDE_ACCOUNT
          if (field.type == TType.BOOL) {
            this.includeAccount = iprot.readBool();
            setIncludeAccountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // INCLUDE_PERSONAL_LINKED_NOTEBOOKS
          if (field.type == TType.BOOL) {
            this.includePersonalLinkedNotebooks = iprot.readBool();
            setIncludePersonalLinkedNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INCLUDE_BUSINESS_LINKED_NOTEBOOKS
          if (field.type == TType.BOOL) {
            this.includeBusinessLinkedNotebooks = iprot.readBool();
            setIncludeBusinessLinkedNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetIncludeAccount()) {
      oprot.writeFieldBegin(INCLUDE_ACCOUNT_FIELD_DESC);
      oprot.writeBool(this.includeAccount);
      oprot.writeFieldEnd();
    }
    if (isSetIncludePersonalLinkedNotebooks()) {
      oprot.writeFieldBegin(INCLUDE_PERSONAL_LINKED_NOTEBOOKS_FIELD_DESC);
      oprot.writeBool(this.includePersonalLinkedNotebooks);
      oprot.writeFieldEnd();
    }
    if (isSetIncludeBusinessLinkedNotebooks()) {
      oprot.writeFieldBegin(INCLUDE_BUSINESS_LINKED_NOTEBOOKS_FIELD_DESC);
      oprot.writeBool(this.includeBusinessLinkedNotebooks);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SavedSearchScope(");
    boolean first = true;

    if (isSetIncludeAccount()) {
      sb.append("includeAccount:");
      sb.append(this.includeAccount);
      first = false;
    }
    if (isSetIncludePersonalLinkedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("includePersonalLinkedNotebooks:");
      sb.append(this.includePersonalLinkedNotebooks);
      first = false;
    }
    if (isSetIncludeBusinessLinkedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("includeBusinessLinkedNotebooks:");
      sb.append(this.includeBusinessLinkedNotebooks);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

