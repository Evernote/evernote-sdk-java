/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Parameters that will be given by a client to the service when it requests
 * a set of advertisements to display.  If any of these values are omitted,
 * the service will use default values.
 * 
 * <dl>
 *  <dt>clientLanguage</dt>
 *    <dd>
 *      The ISO 639-1 language code for the primary language for the client.
 *      If omitted, English will be assumed ('en').
 *    </dd>
 * 
 *  <dt>impressions</dt>
 *    <dd>
 *      A list of the impression counts and total display time for the ads
 *      that were displayed in the last day.
 *    </dd>
 * 
 *  <dt>supportHtml</dt>
 *    <dd>
 *      If true, the client requesting the ads supports ads specified via
 *      general HTML (with rich media, Javascript, etc.).
 *    </dd>
 * 
 *  <dt>clientProperties</dt>
 *    <dd>
 *      If provided, this may contain a set of key/value pairs that identify
 *      the characteristics of a particular client that may be used to help
 *      determine appropriate ads for that client.  These tuples may be used
 *      either to reduce or increase the likelihood that each ad will be
 *      returned.
 *    </dd>
 * </dl>
 */
public class AdParameters implements TBase<AdParameters, AdParameters._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AdParameters");

  private static final TField CLIENT_LANGUAGE_FIELD_DESC = new TField("clientLanguage", TType.STRING, (short)2);
  private static final TField IMPRESSIONS_FIELD_DESC = new TField("impressions", TType.LIST, (short)4);
  private static final TField SUPPORT_HTML_FIELD_DESC = new TField("supportHtml", TType.BOOL, (short)5);
  private static final TField CLIENT_PROPERTIES_FIELD_DESC = new TField("clientProperties", TType.MAP, (short)6);

  private String clientLanguage;
  private List<AdImpressions> impressions;
  private boolean supportHtml;
  private Map<String,String> clientProperties;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CLIENT_LANGUAGE((short)2, "clientLanguage"),
    IMPRESSIONS((short)4, "impressions"),
    SUPPORT_HTML((short)5, "supportHtml"),
    CLIENT_PROPERTIES((short)6, "clientProperties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // CLIENT_LANGUAGE
          return CLIENT_LANGUAGE;
        case 4: // IMPRESSIONS
          return IMPRESSIONS;
        case 5: // SUPPORT_HTML
          return SUPPORT_HTML;
        case 6: // CLIENT_PROPERTIES
          return CLIENT_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUPPORTHTML_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_LANGUAGE, new FieldMetaData("clientLanguage", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.IMPRESSIONS, new FieldMetaData("impressions", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, AdImpressions.class))));
    tmpMap.put(_Fields.SUPPORT_HTML, new FieldMetaData("supportHtml", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.CLIENT_PROPERTIES, new FieldMetaData("clientProperties", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AdParameters.class, metaDataMap);
  }

  public AdParameters() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdParameters(AdParameters other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetClientLanguage()) {
      this.clientLanguage = other.clientLanguage;
    }
    if (other.isSetImpressions()) {
      List<AdImpressions> __this__impressions = new ArrayList<AdImpressions>();
      for (AdImpressions other_element : other.impressions) {
        __this__impressions.add(new AdImpressions(other_element));
      }
      this.impressions = __this__impressions;
    }
    this.supportHtml = other.supportHtml;
    if (other.isSetClientProperties()) {
      Map<String,String> __this__clientProperties = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.clientProperties.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__clientProperties_copy_key = other_element_key;

        String __this__clientProperties_copy_value = other_element_value;

        __this__clientProperties.put(__this__clientProperties_copy_key, __this__clientProperties_copy_value);
      }
      this.clientProperties = __this__clientProperties;
    }
  }

  public AdParameters deepCopy() {
    return new AdParameters(this);
  }

  public void clear() {
    this.clientLanguage = null;
    this.impressions = null;
    setSupportHtmlIsSet(false);
    this.supportHtml = false;
    this.clientProperties = null;
  }

  public String getClientLanguage() {
    return this.clientLanguage;
  }

  public void setClientLanguage(String clientLanguage) {
    this.clientLanguage = clientLanguage;
  }

  public void unsetClientLanguage() {
    this.clientLanguage = null;
  }

  /** Returns true if field clientLanguage is set (has been asigned a value) and false otherwise */
  public boolean isSetClientLanguage() {
    return this.clientLanguage != null;
  }

  public void setClientLanguageIsSet(boolean value) {
    if (!value) {
      this.clientLanguage = null;
    }
  }

  public int getImpressionsSize() {
    return (this.impressions == null) ? 0 : this.impressions.size();
  }

  public java.util.Iterator<AdImpressions> getImpressionsIterator() {
    return (this.impressions == null) ? null : this.impressions.iterator();
  }

  public void addToImpressions(AdImpressions elem) {
    if (this.impressions == null) {
      this.impressions = new ArrayList<AdImpressions>();
    }
    this.impressions.add(elem);
  }

  public List<AdImpressions> getImpressions() {
    return this.impressions;
  }

  public void setImpressions(List<AdImpressions> impressions) {
    this.impressions = impressions;
  }

  public void unsetImpressions() {
    this.impressions = null;
  }

  /** Returns true if field impressions is set (has been asigned a value) and false otherwise */
  public boolean isSetImpressions() {
    return this.impressions != null;
  }

  public void setImpressionsIsSet(boolean value) {
    if (!value) {
      this.impressions = null;
    }
  }

  public boolean isSupportHtml() {
    return this.supportHtml;
  }

  public void setSupportHtml(boolean supportHtml) {
    this.supportHtml = supportHtml;
    setSupportHtmlIsSet(true);
  }

  public void unsetSupportHtml() {
    __isset_vector[__SUPPORTHTML_ISSET_ID] = false;
  }

  /** Returns true if field supportHtml is set (has been asigned a value) and false otherwise */
  public boolean isSetSupportHtml() {
    return __isset_vector[__SUPPORTHTML_ISSET_ID];
  }

  public void setSupportHtmlIsSet(boolean value) {
    __isset_vector[__SUPPORTHTML_ISSET_ID] = value;
  }

  public int getClientPropertiesSize() {
    return (this.clientProperties == null) ? 0 : this.clientProperties.size();
  }

  public void putToClientProperties(String key, String val) {
    if (this.clientProperties == null) {
      this.clientProperties = new HashMap<String,String>();
    }
    this.clientProperties.put(key, val);
  }

  public Map<String,String> getClientProperties() {
    return this.clientProperties;
  }

  public void setClientProperties(Map<String,String> clientProperties) {
    this.clientProperties = clientProperties;
  }

  public void unsetClientProperties() {
    this.clientProperties = null;
  }

  /** Returns true if field clientProperties is set (has been asigned a value) and false otherwise */
  public boolean isSetClientProperties() {
    return this.clientProperties != null;
  }

  public void setClientPropertiesIsSet(boolean value) {
    if (!value) {
      this.clientProperties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_LANGUAGE:
      if (value == null) {
        unsetClientLanguage();
      } else {
        setClientLanguage((String)value);
      }
      break;

    case IMPRESSIONS:
      if (value == null) {
        unsetImpressions();
      } else {
        setImpressions((List<AdImpressions>)value);
      }
      break;

    case SUPPORT_HTML:
      if (value == null) {
        unsetSupportHtml();
      } else {
        setSupportHtml((Boolean)value);
      }
      break;

    case CLIENT_PROPERTIES:
      if (value == null) {
        unsetClientProperties();
      } else {
        setClientProperties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_LANGUAGE:
      return getClientLanguage();

    case IMPRESSIONS:
      return getImpressions();

    case SUPPORT_HTML:
      return new Boolean(isSupportHtml());

    case CLIENT_PROPERTIES:
      return getClientProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_LANGUAGE:
      return isSetClientLanguage();
    case IMPRESSIONS:
      return isSetImpressions();
    case SUPPORT_HTML:
      return isSetSupportHtml();
    case CLIENT_PROPERTIES:
      return isSetClientProperties();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdParameters)
      return this.equals((AdParameters)that);
    return false;
  }

  public boolean equals(AdParameters that) {
    if (that == null)
      return false;

    boolean this_present_clientLanguage = true && this.isSetClientLanguage();
    boolean that_present_clientLanguage = true && that.isSetClientLanguage();
    if (this_present_clientLanguage || that_present_clientLanguage) {
      if (!(this_present_clientLanguage && that_present_clientLanguage))
        return false;
      if (!this.clientLanguage.equals(that.clientLanguage))
        return false;
    }

    boolean this_present_impressions = true && this.isSetImpressions();
    boolean that_present_impressions = true && that.isSetImpressions();
    if (this_present_impressions || that_present_impressions) {
      if (!(this_present_impressions && that_present_impressions))
        return false;
      if (!this.impressions.equals(that.impressions))
        return false;
    }

    boolean this_present_supportHtml = true && this.isSetSupportHtml();
    boolean that_present_supportHtml = true && that.isSetSupportHtml();
    if (this_present_supportHtml || that_present_supportHtml) {
      if (!(this_present_supportHtml && that_present_supportHtml))
        return false;
      if (this.supportHtml != that.supportHtml)
        return false;
    }

    boolean this_present_clientProperties = true && this.isSetClientProperties();
    boolean that_present_clientProperties = true && that.isSetClientProperties();
    if (this_present_clientProperties || that_present_clientProperties) {
      if (!(this_present_clientProperties && that_present_clientProperties))
        return false;
      if (!this.clientProperties.equals(that.clientProperties))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(AdParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AdParameters typedOther = (AdParameters)other;

    lastComparison = Boolean.valueOf(isSetClientLanguage()).compareTo(typedOther.isSetClientLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientLanguage()) {      lastComparison = TBaseHelper.compareTo(this.clientLanguage, typedOther.clientLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpressions()).compareTo(typedOther.isSetImpressions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpressions()) {      lastComparison = TBaseHelper.compareTo(this.impressions, typedOther.impressions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportHtml()).compareTo(typedOther.isSetSupportHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportHtml()) {      lastComparison = TBaseHelper.compareTo(this.supportHtml, typedOther.supportHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientProperties()).compareTo(typedOther.isSetClientProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientProperties()) {      lastComparison = TBaseHelper.compareTo(this.clientProperties, typedOther.clientProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // CLIENT_LANGUAGE
          if (field.type == TType.STRING) {
            this.clientLanguage = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // IMPRESSIONS
          if (field.type == TType.LIST) {
            {
              TList _list86 = iprot.readListBegin();
              this.impressions = new ArrayList<AdImpressions>(_list86.size);
              for (int _i87 = 0; _i87 < _list86.size; ++_i87)
              {
                AdImpressions _elem88;
                _elem88 = new AdImpressions();
                _elem88.read(iprot);
                this.impressions.add(_elem88);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUPPORT_HTML
          if (field.type == TType.BOOL) {
            this.supportHtml = iprot.readBool();
            setSupportHtmlIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CLIENT_PROPERTIES
          if (field.type == TType.MAP) {
            {
              TMap _map89 = iprot.readMapBegin();
              this.clientProperties = new HashMap<String,String>(2*_map89.size);
              for (int _i90 = 0; _i90 < _map89.size; ++_i90)
              {
                String _key91;
                String _val92;
                _key91 = iprot.readString();
                _val92 = iprot.readString();
                this.clientProperties.put(_key91, _val92);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.clientLanguage != null) {
      if (isSetClientLanguage()) {
        oprot.writeFieldBegin(CLIENT_LANGUAGE_FIELD_DESC);
        oprot.writeString(this.clientLanguage);
        oprot.writeFieldEnd();
      }
    }
    if (this.impressions != null) {
      if (isSetImpressions()) {
        oprot.writeFieldBegin(IMPRESSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.impressions.size()));
          for (AdImpressions _iter93 : this.impressions)
          {
            _iter93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetSupportHtml()) {
      oprot.writeFieldBegin(SUPPORT_HTML_FIELD_DESC);
      oprot.writeBool(this.supportHtml);
      oprot.writeFieldEnd();
    }
    if (this.clientProperties != null) {
      if (isSetClientProperties()) {
        oprot.writeFieldBegin(CLIENT_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.clientProperties.size()));
          for (Map.Entry<String, String> _iter94 : this.clientProperties.entrySet())
          {
            oprot.writeString(_iter94.getKey());
            oprot.writeString(_iter94.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("AdParameters(");
    boolean first = true;

    if (isSetClientLanguage()) {
      sb.append("clientLanguage:");
      if (this.clientLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.clientLanguage);
      }
      first = false;
    }
    if (isSetImpressions()) {
      if (!first) sb.append(", ");
      sb.append("impressions:");
      if (this.impressions == null) {
        sb.append("null");
      } else {
        sb.append(this.impressions);
      }
      first = false;
    }
    if (isSetSupportHtml()) {
      if (!first) sb.append(", ");
      sb.append("supportHtml:");
      sb.append(this.supportHtml);
      first = false;
    }
    if (isSetClientProperties()) {
      if (!first) sb.append(", ");
      sb.append("clientProperties:");
      if (this.clientProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.clientProperties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

