/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Identifying information about previous versions of a note that are backed up
 * within Evernote's servers.  Used in the return value of the listNoteVersions
 * call.
 * 
 * <dl>
 *  <dt>updateSequenceNum</dt>
 *  <dd>
 *    The update sequence number for the Note when it last had this content.
 *    This serves to uniquely identify each version of the note, since USN
 *    values are unique within an account for each update.
 *  </dd>
 *  <dt>updated</dt>
 *  <dd>
 *    The 'updated' time that was set on the Note when it had this version
 *    of the content.  This is the user-modifiable modification time on the
 *    note, so it's not reliable for guaranteeing the order of various
 *    versions.  (E.g. if someone modifies the note, then changes this time
 *    manually into the past and then updates the note again.)
 *  </dd>
 *  <dt>saved</dt>
 *  <dd>
 *    A timestamp that holds the date and time when this version of the note
 *    was backed up by Evernote's servers.  This
 *  </dd>
 *  <dt>title</dt>
 *  <dd>
 *    The title of the note when this particular version was saved.  (The
 *    current title of the note may differ from this value.)
 *  </dd>
 * </dl>
 */
public class NoteVersionId implements TBase<NoteVersionId, NoteVersionId._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("NoteVersionId");

  private static final TField UPDATE_SEQUENCE_NUM_FIELD_DESC = new TField("updateSequenceNum", TType.I32, (short)1);
  private static final TField UPDATED_FIELD_DESC = new TField("updated", TType.I64, (short)2);
  private static final TField SAVED_FIELD_DESC = new TField("saved", TType.I64, (short)3);
  private static final TField TITLE_FIELD_DESC = new TField("title", TType.STRING, (short)4);

  private int updateSequenceNum;
  private long updated;
  private long saved;
  private String title;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    UPDATE_SEQUENCE_NUM((short)1, "updateSequenceNum"),
    UPDATED((short)2, "updated"),
    SAVED((short)3, "saved"),
    TITLE((short)4, "title");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATE_SEQUENCE_NUM
          return UPDATE_SEQUENCE_NUM;
        case 2: // UPDATED
          return UPDATED;
        case 3: // SAVED
          return SAVED;
        case 4: // TITLE
          return TITLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATESEQUENCENUM_ISSET_ID = 0;
  private static final int __UPDATED_ISSET_ID = 1;
  private static final int __SAVED_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATE_SEQUENCE_NUM, new FieldMetaData("updateSequenceNum", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPDATED, new FieldMetaData("updated", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.SAVED, new FieldMetaData("saved", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.TITLE, new FieldMetaData("title", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(NoteVersionId.class, metaDataMap);
  }

  public NoteVersionId() {
  }

  public NoteVersionId(
    int updateSequenceNum,
    long updated,
    long saved,
    String title)
  {
    this();
    this.updateSequenceNum = updateSequenceNum;
    setUpdateSequenceNumIsSet(true);
    this.updated = updated;
    setUpdatedIsSet(true);
    this.saved = saved;
    setSavedIsSet(true);
    this.title = title;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NoteVersionId(NoteVersionId other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.updateSequenceNum = other.updateSequenceNum;
    this.updated = other.updated;
    this.saved = other.saved;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
  }

  public NoteVersionId deepCopy() {
    return new NoteVersionId(this);
  }

  public void clear() {
    setUpdateSequenceNumIsSet(false);
    this.updateSequenceNum = 0;
    setUpdatedIsSet(false);
    this.updated = 0;
    setSavedIsSet(false);
    this.saved = 0;
    this.title = null;
  }

  public int getUpdateSequenceNum() {
    return this.updateSequenceNum;
  }

  public void setUpdateSequenceNum(int updateSequenceNum) {
    this.updateSequenceNum = updateSequenceNum;
    setUpdateSequenceNumIsSet(true);
  }

  public void unsetUpdateSequenceNum() {
    __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = false;
  }

  /** Returns true if field updateSequenceNum is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateSequenceNum() {
    return __isset_vector[__UPDATESEQUENCENUM_ISSET_ID];
  }

  public void setUpdateSequenceNumIsSet(boolean value) {
    __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = value;
  }

  public long getUpdated() {
    return this.updated;
  }

  public void setUpdated(long updated) {
    this.updated = updated;
    setUpdatedIsSet(true);
  }

  public void unsetUpdated() {
    __isset_vector[__UPDATED_ISSET_ID] = false;
  }

  /** Returns true if field updated is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return __isset_vector[__UPDATED_ISSET_ID];
  }

  public void setUpdatedIsSet(boolean value) {
    __isset_vector[__UPDATED_ISSET_ID] = value;
  }

  public long getSaved() {
    return this.saved;
  }

  public void setSaved(long saved) {
    this.saved = saved;
    setSavedIsSet(true);
  }

  public void unsetSaved() {
    __isset_vector[__SAVED_ISSET_ID] = false;
  }

  /** Returns true if field saved is set (has been asigned a value) and false otherwise */
  public boolean isSetSaved() {
    return __isset_vector[__SAVED_ISSET_ID];
  }

  public void setSavedIsSet(boolean value) {
    __isset_vector[__SAVED_ISSET_ID] = value;
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been asigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPDATE_SEQUENCE_NUM:
      if (value == null) {
        unsetUpdateSequenceNum();
      } else {
        setUpdateSequenceNum((Integer)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((Long)value);
      }
      break;

    case SAVED:
      if (value == null) {
        unsetSaved();
      } else {
        setSaved((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATE_SEQUENCE_NUM:
      return new Integer(getUpdateSequenceNum());

    case UPDATED:
      return new Long(getUpdated());

    case SAVED:
      return new Long(getSaved());

    case TITLE:
      return getTitle();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPDATE_SEQUENCE_NUM:
      return isSetUpdateSequenceNum();
    case UPDATED:
      return isSetUpdated();
    case SAVED:
      return isSetSaved();
    case TITLE:
      return isSetTitle();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NoteVersionId)
      return this.equals((NoteVersionId)that);
    return false;
  }

  public boolean equals(NoteVersionId that) {
    if (that == null)
      return false;

    boolean this_present_updateSequenceNum = true;
    boolean that_present_updateSequenceNum = true;
    if (this_present_updateSequenceNum || that_present_updateSequenceNum) {
      if (!(this_present_updateSequenceNum && that_present_updateSequenceNum))
        return false;
      if (this.updateSequenceNum != that.updateSequenceNum)
        return false;
    }

    boolean this_present_updated = true;
    boolean that_present_updated = true;
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (this.updated != that.updated)
        return false;
    }

    boolean this_present_saved = true;
    boolean that_present_saved = true;
    if (this_present_saved || that_present_saved) {
      if (!(this_present_saved && that_present_saved))
        return false;
      if (this.saved != that.saved)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(NoteVersionId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NoteVersionId typedOther = (NoteVersionId)other;

    lastComparison = Boolean.valueOf(isSetUpdateSequenceNum()).compareTo(typedOther.isSetUpdateSequenceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateSequenceNum()) {      lastComparison = TBaseHelper.compareTo(this.updateSequenceNum, typedOther.updateSequenceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(typedOther.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {      lastComparison = TBaseHelper.compareTo(this.updated, typedOther.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaved()).compareTo(typedOther.isSetSaved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaved()) {      lastComparison = TBaseHelper.compareTo(this.saved, typedOther.saved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {      lastComparison = TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // UPDATE_SEQUENCE_NUM
          if (field.type == TType.I32) {
            this.updateSequenceNum = iprot.readI32();
            setUpdateSequenceNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // UPDATED
          if (field.type == TType.I64) {
            this.updated = iprot.readI64();
            setUpdatedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SAVED
          if (field.type == TType.I64) {
            this.saved = iprot.readI64();
            setSavedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TITLE
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
    oprot.writeI32(this.updateSequenceNum);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATED_FIELD_DESC);
    oprot.writeI64(this.updated);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SAVED_FIELD_DESC);
    oprot.writeI64(this.saved);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("NoteVersionId(");
    boolean first = true;

    sb.append("updateSequenceNum:");
    sb.append(this.updateSequenceNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updated:");
    sb.append(this.updated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saved:");
    sb.append(this.saved);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetUpdateSequenceNum()) {
      throw new TProtocolException("Required field 'updateSequenceNum' is unset! Struct:" + toString());
    }

    if (!isSetUpdated()) {
      throw new TProtocolException("Required field 'updated' is unset! Struct:" + toString());
    }

    if (!isSetSaved()) {
      throw new TProtocolException("Required field 'saved' is unset! Struct:" + toString());
    }

    if (!isSetTitle()) {
      throw new TProtocolException("Required field 'title' is unset! Struct:" + toString());
    }

  }

}

