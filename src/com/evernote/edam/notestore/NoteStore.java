/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class NoteStore {

  public interface Iface extends NoteStoreIface { }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public SyncState getSyncState(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSyncState(authenticationToken);
      return recv_getSyncState();
    }

    public void send_getSyncState(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSyncState", TMessageType.CALL, ++seqid_));
      getSyncState_args args = new getSyncState_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncState recv_getSyncState() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSyncState failed: out of sequence response");
      }
      getSyncState_result result = new getSyncState_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSyncState failed: unknown result");
    }

    public SyncChunk getSyncChunk(String authenticationToken, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly);
      return recv_getSyncChunk();
    }

    public void send_getSyncChunk(String authenticationToken, int afterUSN, int maxEntries, boolean fullSyncOnly) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.CALL, ++seqid_));
      getSyncChunk_args args = new getSyncChunk_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAfterUSN(afterUSN);
      args.setMaxEntries(maxEntries);
      args.setFullSyncOnly(fullSyncOnly);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncChunk recv_getSyncChunk() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSyncChunk failed: out of sequence response");
      }
      getSyncChunk_result result = new getSyncChunk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSyncChunk failed: unknown result");
    }

    public SyncChunk getFilteredSyncChunk(String authenticationToken, int afterUSN, int maxEntries, SyncChunkFilter filter) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter);
      return recv_getFilteredSyncChunk();
    }

    public void send_getFilteredSyncChunk(String authenticationToken, int afterUSN, int maxEntries, SyncChunkFilter filter) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFilteredSyncChunk", TMessageType.CALL, ++seqid_));
      getFilteredSyncChunk_args args = new getFilteredSyncChunk_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAfterUSN(afterUSN);
      args.setMaxEntries(maxEntries);
      args.setFilter(filter);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncChunk recv_getFilteredSyncChunk() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFilteredSyncChunk failed: out of sequence response");
      }
      getFilteredSyncChunk_result result = new getFilteredSyncChunk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFilteredSyncChunk failed: unknown result");
    }

    public SyncState getLinkedNotebookSyncState(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
      return recv_getLinkedNotebookSyncState();
    }

    public void send_getLinkedNotebookSyncState(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.CALL, ++seqid_));
      getLinkedNotebookSyncState_args args = new getLinkedNotebookSyncState_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncState recv_getLinkedNotebookSyncState() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLinkedNotebookSyncState failed: out of sequence response");
      }
      getLinkedNotebookSyncState_result result = new getLinkedNotebookSyncState_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLinkedNotebookSyncState failed: unknown result");
    }

    public SyncChunk getLinkedNotebookSyncChunk(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
      return recv_getLinkedNotebookSyncChunk();
    }

    public void send_getLinkedNotebookSyncChunk(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, boolean fullSyncOnly) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.CALL, ++seqid_));
      getLinkedNotebookSyncChunk_args args = new getLinkedNotebookSyncChunk_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.setAfterUSN(afterUSN);
      args.setMaxEntries(maxEntries);
      args.setFullSyncOnly(fullSyncOnly);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncChunk recv_getLinkedNotebookSyncChunk() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLinkedNotebookSyncChunk failed: out of sequence response");
      }
      getLinkedNotebookSyncChunk_result result = new getLinkedNotebookSyncChunk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLinkedNotebookSyncChunk failed: unknown result");
    }

    public List<com.evernote.edam.type.Notebook> listNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listNotebooks(authenticationToken);
      return recv_listNotebooks();
    }

    public void send_listNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listNotebooks", TMessageType.CALL, ++seqid_));
      listNotebooks_args args = new listNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.Notebook> recv_listNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listNotebooks failed: out of sequence response");
      }
      listNotebooks_result result = new listNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listNotebooks failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNotebook(authenticationToken, guid);
      return recv_getNotebook();
    }

    public void send_getNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNotebook", TMessageType.CALL, ++seqid_));
      getNotebook_args args = new getNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNotebook failed: out of sequence response");
      }
      getNotebook_result result = new getNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getDefaultNotebook(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getDefaultNotebook(authenticationToken);
      return recv_getDefaultNotebook();
    }

    public void send_getDefaultNotebook(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.CALL, ++seqid_));
      getDefaultNotebook_args args = new getDefaultNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getDefaultNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDefaultNotebook failed: out of sequence response");
      }
      getDefaultNotebook_result result = new getDefaultNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDefaultNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Notebook createNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createNotebook(authenticationToken, notebook);
      return recv_createNotebook();
    }

    public void send_createNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNotebook", TMessageType.CALL, ++seqid_));
      createNotebook_args args = new createNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebook(notebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_createNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNotebook failed: out of sequence response");
      }
      createNotebook_result result = new createNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNotebook failed: unknown result");
    }

    public int updateNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateNotebook(authenticationToken, notebook);
      return recv_updateNotebook();
    }

    public void send_updateNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNotebook", TMessageType.CALL, ++seqid_));
      updateNotebook_args args = new updateNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebook(notebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNotebook failed: out of sequence response");
      }
      updateNotebook_result result = new updateNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateNotebook failed: unknown result");
    }

    public int expungeNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNotebook(authenticationToken, guid);
      return recv_expungeNotebook();
    }

    public void send_expungeNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.CALL, ++seqid_));
      expungeNotebook_args args = new expungeNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNotebook failed: out of sequence response");
      }
      expungeNotebook_result result = new expungeNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNotebook failed: unknown result");
    }

    public List<com.evernote.edam.type.Tag> listTags(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listTags(authenticationToken);
      return recv_listTags();
    }

    public void send_listTags(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listTags", TMessageType.CALL, ++seqid_));
      listTags_args args = new listTags_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.Tag> recv_listTags() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listTags failed: out of sequence response");
      }
      listTags_result result = new listTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listTags failed: unknown result");
    }

    public List<com.evernote.edam.type.Tag> listTagsByNotebook(String authenticationToken, String notebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_listTagsByNotebook(authenticationToken, notebookGuid);
      return recv_listTagsByNotebook();
    }

    public void send_listTagsByNotebook(String authenticationToken, String notebookGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.CALL, ++seqid_));
      listTagsByNotebook_args args = new listTagsByNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebookGuid(notebookGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.Tag> recv_listTagsByNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listTagsByNotebook failed: out of sequence response");
      }
      listTagsByNotebook_result result = new listTagsByNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listTagsByNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Tag getTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getTag(authenticationToken, guid);
      return recv_getTag();
    }

    public void send_getTag(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTag", TMessageType.CALL, ++seqid_));
      getTag_args args = new getTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Tag recv_getTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTag failed: out of sequence response");
      }
      getTag_result result = new getTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTag failed: unknown result");
    }

    public com.evernote.edam.type.Tag createTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_createTag(authenticationToken, tag);
      return recv_createTag();
    }

    public void send_createTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createTag", TMessageType.CALL, ++seqid_));
      createTag_args args = new createTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Tag recv_createTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createTag failed: out of sequence response");
      }
      createTag_result result = new createTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createTag failed: unknown result");
    }

    public int updateTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateTag(authenticationToken, tag);
      return recv_updateTag();
    }

    public void send_updateTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateTag", TMessageType.CALL, ++seqid_));
      updateTag_args args = new updateTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateTag failed: out of sequence response");
      }
      updateTag_result result = new updateTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateTag failed: unknown result");
    }

    public void untagAll(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_untagAll(authenticationToken, guid);
      recv_untagAll();
    }

    public void send_untagAll(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("untagAll", TMessageType.CALL, ++seqid_));
      untagAll_args args = new untagAll_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_untagAll() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "untagAll failed: out of sequence response");
      }
      untagAll_result result = new untagAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      return;
    }

    public int expungeTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeTag(authenticationToken, guid);
      return recv_expungeTag();
    }

    public void send_expungeTag(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeTag", TMessageType.CALL, ++seqid_));
      expungeTag_args args = new expungeTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeTag failed: out of sequence response");
      }
      expungeTag_result result = new expungeTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeTag failed: unknown result");
    }

    public List<com.evernote.edam.type.SavedSearch> listSearches(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listSearches(authenticationToken);
      return recv_listSearches();
    }

    public void send_listSearches(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listSearches", TMessageType.CALL, ++seqid_));
      listSearches_args args = new listSearches_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.SavedSearch> recv_listSearches() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listSearches failed: out of sequence response");
      }
      listSearches_result result = new listSearches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listSearches failed: unknown result");
    }

    public com.evernote.edam.type.SavedSearch getSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getSearch(authenticationToken, guid);
      return recv_getSearch();
    }

    public void send_getSearch(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSearch", TMessageType.CALL, ++seqid_));
      getSearch_args args = new getSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SavedSearch recv_getSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSearch failed: out of sequence response");
      }
      getSearch_result result = new getSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSearch failed: unknown result");
    }

    public com.evernote.edam.type.SavedSearch createSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createSearch(authenticationToken, search);
      return recv_createSearch();
    }

    public void send_createSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createSearch", TMessageType.CALL, ++seqid_));
      createSearch_args args = new createSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSearch(search);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SavedSearch recv_createSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createSearch failed: out of sequence response");
      }
      createSearch_result result = new createSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createSearch failed: unknown result");
    }

    public int updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateSearch(authenticationToken, search);
      return recv_updateSearch();
    }

    public void send_updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSearch", TMessageType.CALL, ++seqid_));
      updateSearch_args args = new updateSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSearch(search);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSearch failed: out of sequence response");
      }
      updateSearch_result result = new updateSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateSearch failed: unknown result");
    }

    public int expungeSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeSearch(authenticationToken, guid);
      return recv_expungeSearch();
    }

    public void send_expungeSearch(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeSearch", TMessageType.CALL, ++seqid_));
      expungeSearch_args args = new expungeSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeSearch failed: out of sequence response");
      }
      expungeSearch_result result = new expungeSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeSearch failed: unknown result");
    }

    public NoteList findNotes(String authenticationToken, NoteFilter filter, int offset, int maxNotes) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNotes(authenticationToken, filter, offset, maxNotes);
      return recv_findNotes();
    }

    public void send_findNotes(String authenticationToken, NoteFilter filter, int offset, int maxNotes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNotes", TMessageType.CALL, ++seqid_));
      findNotes_args args = new findNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setOffset(offset);
      args.setMaxNotes(maxNotes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NoteList recv_findNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNotes failed: out of sequence response");
      }
      findNotes_result result = new findNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNotes failed: unknown result");
    }

    public int findNoteOffset(String authenticationToken, NoteFilter filter, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNoteOffset(authenticationToken, filter, guid);
      return recv_findNoteOffset();
    }

    public void send_findNoteOffset(String authenticationToken, NoteFilter filter, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.CALL, ++seqid_));
      findNoteOffset_args args = new findNoteOffset_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_findNoteOffset() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNoteOffset failed: out of sequence response");
      }
      findNoteOffset_result result = new findNoteOffset_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNoteOffset failed: unknown result");
    }

    public NotesMetadataList findNotesMetadata(String authenticationToken, NoteFilter filter, int offset, int maxNotes, NotesMetadataResultSpec resultSpec) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
      return recv_findNotesMetadata();
    }

    public void send_findNotesMetadata(String authenticationToken, NoteFilter filter, int offset, int maxNotes, NotesMetadataResultSpec resultSpec) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.CALL, ++seqid_));
      findNotesMetadata_args args = new findNotesMetadata_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setOffset(offset);
      args.setMaxNotes(maxNotes);
      args.setResultSpec(resultSpec);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NotesMetadataList recv_findNotesMetadata() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNotesMetadata failed: out of sequence response");
      }
      findNotesMetadata_result result = new findNotesMetadata_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNotesMetadata failed: unknown result");
    }

    public NoteCollectionCounts findNoteCounts(String authenticationToken, NoteFilter filter, boolean withTrash) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNoteCounts(authenticationToken, filter, withTrash);
      return recv_findNoteCounts();
    }

    public void send_findNoteCounts(String authenticationToken, NoteFilter filter, boolean withTrash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.CALL, ++seqid_));
      findNoteCounts_args args = new findNoteCounts_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setWithTrash(withTrash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NoteCollectionCounts recv_findNoteCounts() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNoteCounts failed: out of sequence response");
      }
      findNoteCounts_result result = new findNoteCounts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNoteCounts failed: unknown result");
    }

    public com.evernote.edam.type.Note getNote(String authenticationToken, String guid, boolean withContent, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
      return recv_getNote();
    }

    public void send_getNote(String authenticationToken, String guid, boolean withContent, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNote", TMessageType.CALL, ++seqid_));
      getNote_args args = new getNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setWithContent(withContent);
      args.setWithResourcesData(withResourcesData);
      args.setWithResourcesRecognition(withResourcesRecognition);
      args.setWithResourcesAlternateData(withResourcesAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_getNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNote failed: out of sequence response");
      }
      getNote_result result = new getNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNote failed: unknown result");
    }

    public com.evernote.edam.type.LazyMap getNoteApplicationData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteApplicationData(authenticationToken, guid);
      return recv_getNoteApplicationData();
    }

    public void send_getNoteApplicationData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteApplicationData", TMessageType.CALL, ++seqid_));
      getNoteApplicationData_args args = new getNoteApplicationData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.LazyMap recv_getNoteApplicationData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteApplicationData failed: out of sequence response");
      }
      getNoteApplicationData_result result = new getNoteApplicationData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteApplicationData failed: unknown result");
    }

    public String getNoteApplicationDataEntry(String authenticationToken, String guid, String key) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteApplicationDataEntry(authenticationToken, guid, key);
      return recv_getNoteApplicationDataEntry();
    }

    public void send_getNoteApplicationDataEntry(String authenticationToken, String guid, String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteApplicationDataEntry", TMessageType.CALL, ++seqid_));
      getNoteApplicationDataEntry_args args = new getNoteApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getNoteApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteApplicationDataEntry failed: out of sequence response");
      }
      getNoteApplicationDataEntry_result result = new getNoteApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteApplicationDataEntry failed: unknown result");
    }

    public int setNoteApplicationDataEntry(String authenticationToken, String guid, String key, String value) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_setNoteApplicationDataEntry(authenticationToken, guid, key, value);
      return recv_setNoteApplicationDataEntry();
    }

    public void send_setNoteApplicationDataEntry(String authenticationToken, String guid, String key, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setNoteApplicationDataEntry", TMessageType.CALL, ++seqid_));
      setNoteApplicationDataEntry_args args = new setNoteApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_setNoteApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setNoteApplicationDataEntry failed: out of sequence response");
      }
      setNoteApplicationDataEntry_result result = new setNoteApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setNoteApplicationDataEntry failed: unknown result");
    }

    public int unsetNoteApplicationDataEntry(String authenticationToken, String guid, String key) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_unsetNoteApplicationDataEntry(authenticationToken, guid, key);
      return recv_unsetNoteApplicationDataEntry();
    }

    public void send_unsetNoteApplicationDataEntry(String authenticationToken, String guid, String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unsetNoteApplicationDataEntry", TMessageType.CALL, ++seqid_));
      unsetNoteApplicationDataEntry_args args = new unsetNoteApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_unsetNoteApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unsetNoteApplicationDataEntry failed: out of sequence response");
      }
      unsetNoteApplicationDataEntry_result result = new unsetNoteApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "unsetNoteApplicationDataEntry failed: unknown result");
    }

    public String getNoteContent(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteContent(authenticationToken, guid);
      return recv_getNoteContent();
    }

    public void send_getNoteContent(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteContent", TMessageType.CALL, ++seqid_));
      getNoteContent_args args = new getNoteContent_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getNoteContent() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteContent failed: out of sequence response");
      }
      getNoteContent_result result = new getNoteContent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteContent failed: unknown result");
    }

    public String getNoteSearchText(String authenticationToken, String guid, boolean noteOnly, boolean tokenizeForIndexing) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
      return recv_getNoteSearchText();
    }

    public void send_getNoteSearchText(String authenticationToken, String guid, boolean noteOnly, boolean tokenizeForIndexing) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.CALL, ++seqid_));
      getNoteSearchText_args args = new getNoteSearchText_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setNoteOnly(noteOnly);
      args.setTokenizeForIndexing(tokenizeForIndexing);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getNoteSearchText() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteSearchText failed: out of sequence response");
      }
      getNoteSearchText_result result = new getNoteSearchText_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteSearchText failed: unknown result");
    }

    public String getResourceSearchText(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceSearchText(authenticationToken, guid);
      return recv_getResourceSearchText();
    }

    public void send_getResourceSearchText(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.CALL, ++seqid_));
      getResourceSearchText_args args = new getResourceSearchText_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getResourceSearchText() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceSearchText failed: out of sequence response");
      }
      getResourceSearchText_result result = new getResourceSearchText_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceSearchText failed: unknown result");
    }

    public List<String> getNoteTagNames(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteTagNames(authenticationToken, guid);
      return recv_getNoteTagNames();
    }

    public void send_getNoteTagNames(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.CALL, ++seqid_));
      getNoteTagNames_args args = new getNoteTagNames_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_getNoteTagNames() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteTagNames failed: out of sequence response");
      }
      getNoteTagNames_result result = new getNoteTagNames_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteTagNames failed: unknown result");
    }

    public com.evernote.edam.type.Note createNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_createNote(authenticationToken, note);
      return recv_createNote();
    }

    public void send_createNote(String authenticationToken, com.evernote.edam.type.Note note) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNote", TMessageType.CALL, ++seqid_));
      createNote_args args = new createNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNote(note);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_createNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNote failed: out of sequence response");
      }
      createNote_result result = new createNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNote failed: unknown result");
    }

    public com.evernote.edam.type.Note updateNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateNote(authenticationToken, note);
      return recv_updateNote();
    }

    public void send_updateNote(String authenticationToken, com.evernote.edam.type.Note note) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNote", TMessageType.CALL, ++seqid_));
      updateNote_args args = new updateNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNote(note);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_updateNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNote failed: out of sequence response");
      }
      updateNote_result result = new updateNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateNote failed: unknown result");
    }

    public int deleteNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_deleteNote(authenticationToken, guid);
      return recv_deleteNote();
    }

    public void send_deleteNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteNote", TMessageType.CALL, ++seqid_));
      deleteNote_args args = new deleteNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteNote failed: out of sequence response");
      }
      deleteNote_result result = new deleteNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "deleteNote failed: unknown result");
    }

    public int expungeNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNote(authenticationToken, guid);
      return recv_expungeNote();
    }

    public void send_expungeNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNote", TMessageType.CALL, ++seqid_));
      expungeNote_args args = new expungeNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNote failed: out of sequence response");
      }
      expungeNote_result result = new expungeNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNote failed: unknown result");
    }

    public int expungeNotes(String authenticationToken, List<String> noteGuids) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNotes(authenticationToken, noteGuids);
      return recv_expungeNotes();
    }

    public void send_expungeNotes(String authenticationToken, List<String> noteGuids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNotes", TMessageType.CALL, ++seqid_));
      expungeNotes_args args = new expungeNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuids(noteGuids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNotes failed: out of sequence response");
      }
      expungeNotes_result result = new expungeNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNotes failed: unknown result");
    }

    public int expungeInactiveNotes(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeInactiveNotes(authenticationToken);
      return recv_expungeInactiveNotes();
    }

    public void send_expungeInactiveNotes(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.CALL, ++seqid_));
      expungeInactiveNotes_args args = new expungeInactiveNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeInactiveNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeInactiveNotes failed: out of sequence response");
      }
      expungeInactiveNotes_result result = new expungeInactiveNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeInactiveNotes failed: unknown result");
    }

    public com.evernote.edam.type.Note copyNote(String authenticationToken, String noteGuid, String toNotebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
      return recv_copyNote();
    }

    public void send_copyNote(String authenticationToken, String noteGuid, String toNotebookGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("copyNote", TMessageType.CALL, ++seqid_));
      copyNote_args args = new copyNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setToNotebookGuid(toNotebookGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_copyNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "copyNote failed: out of sequence response");
      }
      copyNote_result result = new copyNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "copyNote failed: unknown result");
    }

    public List<NoteVersionId> listNoteVersions(String authenticationToken, String noteGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_listNoteVersions(authenticationToken, noteGuid);
      return recv_listNoteVersions();
    }

    public void send_listNoteVersions(String authenticationToken, String noteGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.CALL, ++seqid_));
      listNoteVersions_args args = new listNoteVersions_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<NoteVersionId> recv_listNoteVersions() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listNoteVersions failed: out of sequence response");
      }
      listNoteVersions_result result = new listNoteVersions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listNoteVersions failed: unknown result");
    }

    public com.evernote.edam.type.Note getNoteVersion(String authenticationToken, String noteGuid, int updateSequenceNum, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
      return recv_getNoteVersion();
    }

    public void send_getNoteVersion(String authenticationToken, String noteGuid, int updateSequenceNum, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.CALL, ++seqid_));
      getNoteVersion_args args = new getNoteVersion_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setUpdateSequenceNum(updateSequenceNum);
      args.setWithResourcesData(withResourcesData);
      args.setWithResourcesRecognition(withResourcesRecognition);
      args.setWithResourcesAlternateData(withResourcesAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_getNoteVersion() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteVersion failed: out of sequence response");
      }
      getNoteVersion_result result = new getNoteVersion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteVersion failed: unknown result");
    }

    public com.evernote.edam.type.Resource getResource(String authenticationToken, String guid, boolean withData, boolean withRecognition, boolean withAttributes, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
      return recv_getResource();
    }

    public void send_getResource(String authenticationToken, String guid, boolean withData, boolean withRecognition, boolean withAttributes, boolean withAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResource", TMessageType.CALL, ++seqid_));
      getResource_args args = new getResource_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setWithData(withData);
      args.setWithRecognition(withRecognition);
      args.setWithAttributes(withAttributes);
      args.setWithAlternateData(withAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Resource recv_getResource() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResource failed: out of sequence response");
      }
      getResource_result result = new getResource_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResource failed: unknown result");
    }

    public com.evernote.edam.type.LazyMap getResourceApplicationData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceApplicationData(authenticationToken, guid);
      return recv_getResourceApplicationData();
    }

    public void send_getResourceApplicationData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceApplicationData", TMessageType.CALL, ++seqid_));
      getResourceApplicationData_args args = new getResourceApplicationData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.LazyMap recv_getResourceApplicationData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceApplicationData failed: out of sequence response");
      }
      getResourceApplicationData_result result = new getResourceApplicationData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceApplicationData failed: unknown result");
    }

    public String getResourceApplicationDataEntry(String authenticationToken, String guid, String key) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceApplicationDataEntry(authenticationToken, guid, key);
      return recv_getResourceApplicationDataEntry();
    }

    public void send_getResourceApplicationDataEntry(String authenticationToken, String guid, String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceApplicationDataEntry", TMessageType.CALL, ++seqid_));
      getResourceApplicationDataEntry_args args = new getResourceApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getResourceApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceApplicationDataEntry failed: out of sequence response");
      }
      getResourceApplicationDataEntry_result result = new getResourceApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceApplicationDataEntry failed: unknown result");
    }

    public int setResourceApplicationDataEntry(String authenticationToken, String guid, String key, String value) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_setResourceApplicationDataEntry(authenticationToken, guid, key, value);
      return recv_setResourceApplicationDataEntry();
    }

    public void send_setResourceApplicationDataEntry(String authenticationToken, String guid, String key, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setResourceApplicationDataEntry", TMessageType.CALL, ++seqid_));
      setResourceApplicationDataEntry_args args = new setResourceApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_setResourceApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setResourceApplicationDataEntry failed: out of sequence response");
      }
      setResourceApplicationDataEntry_result result = new setResourceApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setResourceApplicationDataEntry failed: unknown result");
    }

    public int unsetResourceApplicationDataEntry(String authenticationToken, String guid, String key) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_unsetResourceApplicationDataEntry(authenticationToken, guid, key);
      return recv_unsetResourceApplicationDataEntry();
    }

    public void send_unsetResourceApplicationDataEntry(String authenticationToken, String guid, String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unsetResourceApplicationDataEntry", TMessageType.CALL, ++seqid_));
      unsetResourceApplicationDataEntry_args args = new unsetResourceApplicationDataEntry_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setKey(key);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_unsetResourceApplicationDataEntry() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unsetResourceApplicationDataEntry failed: out of sequence response");
      }
      unsetResourceApplicationDataEntry_result result = new unsetResourceApplicationDataEntry_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "unsetResourceApplicationDataEntry failed: unknown result");
    }

    public int updateResource(String authenticationToken, com.evernote.edam.type.Resource resource) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateResource(authenticationToken, resource);
      return recv_updateResource();
    }

    public void send_updateResource(String authenticationToken, com.evernote.edam.type.Resource resource) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateResource", TMessageType.CALL, ++seqid_));
      updateResource_args args = new updateResource_args();
      args.setAuthenticationToken(authenticationToken);
      args.setResource(resource);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateResource() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateResource failed: out of sequence response");
      }
      updateResource_result result = new updateResource_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateResource failed: unknown result");
    }

    public byte[] getResourceData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceData(authenticationToken, guid);
      return recv_getResourceData();
    }

    public void send_getResourceData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceData", TMessageType.CALL, ++seqid_));
      getResourceData_args args = new getResourceData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceData failed: out of sequence response");
      }
      getResourceData_result result = new getResourceData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceData failed: unknown result");
    }

    public com.evernote.edam.type.Resource getResourceByHash(String authenticationToken, String noteGuid, byte[] contentHash, boolean withData, boolean withRecognition, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
      return recv_getResourceByHash();
    }

    public void send_getResourceByHash(String authenticationToken, String noteGuid, byte[] contentHash, boolean withData, boolean withRecognition, boolean withAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.CALL, ++seqid_));
      getResourceByHash_args args = new getResourceByHash_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setContentHash(contentHash);
      args.setWithData(withData);
      args.setWithRecognition(withRecognition);
      args.setWithAlternateData(withAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Resource recv_getResourceByHash() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceByHash failed: out of sequence response");
      }
      getResourceByHash_result result = new getResourceByHash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceByHash failed: unknown result");
    }

    public byte[] getResourceRecognition(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceRecognition(authenticationToken, guid);
      return recv_getResourceRecognition();
    }

    public void send_getResourceRecognition(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.CALL, ++seqid_));
      getResourceRecognition_args args = new getResourceRecognition_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceRecognition() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceRecognition failed: out of sequence response");
      }
      getResourceRecognition_result result = new getResourceRecognition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceRecognition failed: unknown result");
    }

    public byte[] getResourceAlternateData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceAlternateData(authenticationToken, guid);
      return recv_getResourceAlternateData();
    }

    public void send_getResourceAlternateData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.CALL, ++seqid_));
      getResourceAlternateData_args args = new getResourceAlternateData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceAlternateData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceAlternateData failed: out of sequence response");
      }
      getResourceAlternateData_result result = new getResourceAlternateData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceAlternateData failed: unknown result");
    }

    public com.evernote.edam.type.ResourceAttributes getResourceAttributes(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceAttributes(authenticationToken, guid);
      return recv_getResourceAttributes();
    }

    public void send_getResourceAttributes(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.CALL, ++seqid_));
      getResourceAttributes_args args = new getResourceAttributes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.ResourceAttributes recv_getResourceAttributes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceAttributes failed: out of sequence response");
      }
      getResourceAttributes_result result = new getResourceAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceAttributes failed: unknown result");
    }

    public long getAccountSize(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getAccountSize(authenticationToken);
      return recv_getAccountSize();
    }

    public void send_getAccountSize(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAccountSize", TMessageType.CALL, ++seqid_));
      getAccountSize_args args = new getAccountSize_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getAccountSize() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAccountSize failed: out of sequence response");
      }
      getAccountSize_result result = new getAccountSize_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAccountSize failed: unknown result");
    }

    public List<com.evernote.edam.type.Ad> getAds(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getAds(authenticationToken, adParameters);
      return recv_getAds();
    }

    public void send_getAds(String authenticationToken, AdParameters adParameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAds", TMessageType.CALL, ++seqid_));
      getAds_args args = new getAds_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAdParameters(adParameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.Ad> recv_getAds() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAds failed: out of sequence response");
      }
      getAds_result result = new getAds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAds failed: unknown result");
    }

    public com.evernote.edam.type.Ad getRandomAd(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getRandomAd(authenticationToken, adParameters);
      return recv_getRandomAd();
    }

    public void send_getRandomAd(String authenticationToken, AdParameters adParameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRandomAd", TMessageType.CALL, ++seqid_));
      getRandomAd_args args = new getRandomAd_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAdParameters(adParameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Ad recv_getRandomAd() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRandomAd failed: out of sequence response");
      }
      getRandomAd_result result = new getRandomAd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRandomAd failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getPublicNotebook(int userId, String publicUri) throws com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getPublicNotebook(userId, publicUri);
      return recv_getPublicNotebook();
    }

    public void send_getPublicNotebook(int userId, String publicUri) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.CALL, ++seqid_));
      getPublicNotebook_args args = new getPublicNotebook_args();
      args.setUserId(userId);
      args.setPublicUri(publicUri);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getPublicNotebook() throws com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPublicNotebook failed: out of sequence response");
      }
      getPublicNotebook_result result = new getPublicNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPublicNotebook failed: unknown result");
    }

    public com.evernote.edam.type.SharedNotebook createSharedNotebook(String authenticationToken, com.evernote.edam.type.SharedNotebook sharedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createSharedNotebook(authenticationToken, sharedNotebook);
      return recv_createSharedNotebook();
    }

    public void send_createSharedNotebook(String authenticationToken, com.evernote.edam.type.SharedNotebook sharedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.CALL, ++seqid_));
      createSharedNotebook_args args = new createSharedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSharedNotebook(sharedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SharedNotebook recv_createSharedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createSharedNotebook failed: out of sequence response");
      }
      createSharedNotebook_result result = new createSharedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createSharedNotebook failed: unknown result");
    }

    public int sendMessageToSharedNotebookMembers(String authenticationToken, String notebookGuid, String messageText, List<String> recipients) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_sendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients);
      return recv_sendMessageToSharedNotebookMembers();
    }

    public void send_sendMessageToSharedNotebookMembers(String authenticationToken, String notebookGuid, String messageText, List<String> recipients) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageToSharedNotebookMembers", TMessageType.CALL, ++seqid_));
      sendMessageToSharedNotebookMembers_args args = new sendMessageToSharedNotebookMembers_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebookGuid(notebookGuid);
      args.setMessageText(messageText);
      args.setRecipients(recipients);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_sendMessageToSharedNotebookMembers() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageToSharedNotebookMembers failed: out of sequence response");
      }
      sendMessageToSharedNotebookMembers_result result = new sendMessageToSharedNotebookMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageToSharedNotebookMembers failed: unknown result");
    }

    public List<com.evernote.edam.type.SharedNotebook> listSharedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listSharedNotebooks(authenticationToken);
      return recv_listSharedNotebooks();
    }

    public void send_listSharedNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.CALL, ++seqid_));
      listSharedNotebooks_args args = new listSharedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.SharedNotebook> recv_listSharedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listSharedNotebooks failed: out of sequence response");
      }
      listSharedNotebooks_result result = new listSharedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listSharedNotebooks failed: unknown result");
    }

    public int expungeSharedNotebooks(String authenticationToken, List<Long> sharedNotebookIds) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds);
      return recv_expungeSharedNotebooks();
    }

    public void send_expungeSharedNotebooks(String authenticationToken, List<Long> sharedNotebookIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.CALL, ++seqid_));
      expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSharedNotebookIds(sharedNotebookIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeSharedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeSharedNotebooks failed: out of sequence response");
      }
      expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeSharedNotebooks failed: unknown result");
    }

    public com.evernote.edam.type.LinkedNotebook createLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createLinkedNotebook(authenticationToken, linkedNotebook);
      return recv_createLinkedNotebook();
    }

    public void send_createLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.CALL, ++seqid_));
      createLinkedNotebook_args args = new createLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.LinkedNotebook recv_createLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createLinkedNotebook failed: out of sequence response");
      }
      createLinkedNotebook_result result = new createLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createLinkedNotebook failed: unknown result");
    }

    public int updateLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_updateLinkedNotebook(authenticationToken, linkedNotebook);
      return recv_updateLinkedNotebook();
    }

    public void send_updateLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.CALL, ++seqid_));
      updateLinkedNotebook_args args = new updateLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateLinkedNotebook failed: out of sequence response");
      }
      updateLinkedNotebook_result result = new updateLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateLinkedNotebook failed: unknown result");
    }

    public List<com.evernote.edam.type.LinkedNotebook> listLinkedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listLinkedNotebooks(authenticationToken);
      return recv_listLinkedNotebooks();
    }

    public void send_listLinkedNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.CALL, ++seqid_));
      listLinkedNotebooks_args args = new listLinkedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<com.evernote.edam.type.LinkedNotebook> recv_listLinkedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listLinkedNotebooks failed: out of sequence response");
      }
      listLinkedNotebooks_result result = new listLinkedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listLinkedNotebooks failed: unknown result");
    }

    public int expungeLinkedNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeLinkedNotebook(authenticationToken, guid);
      return recv_expungeLinkedNotebook();
    }

    public void send_expungeLinkedNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.CALL, ++seqid_));
      expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeLinkedNotebook failed: out of sequence response");
      }
      expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeLinkedNotebook failed: unknown result");
    }

    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNotebook(String shareKey, String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_authenticateToSharedNotebook(shareKey, authenticationToken);
      return recv_authenticateToSharedNotebook();
    }

    public void send_authenticateToSharedNotebook(String shareKey, String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.CALL, ++seqid_));
      authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
      args.setShareKey(shareKey);
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.userstore.AuthenticationResult recv_authenticateToSharedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticateToSharedNotebook failed: out of sequence response");
      }
      authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateToSharedNotebook failed: unknown result");
    }

    public com.evernote.edam.type.SharedNotebook getSharedNotebookByAuth(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSharedNotebookByAuth(authenticationToken);
      return recv_getSharedNotebookByAuth();
    }

    public void send_getSharedNotebookByAuth(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.CALL, ++seqid_));
      getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SharedNotebook recv_getSharedNotebookByAuth() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSharedNotebookByAuth failed: out of sequence response");
      }
      getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSharedNotebookByAuth failed: unknown result");
    }

    public void emailNote(String authenticationToken, NoteEmailParameters parameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_emailNote(authenticationToken, parameters);
      recv_emailNote();
    }

    public void send_emailNote(String authenticationToken, NoteEmailParameters parameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("emailNote", TMessageType.CALL, ++seqid_));
      emailNote_args args = new emailNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setParameters(parameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_emailNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "emailNote failed: out of sequence response");
      }
      emailNote_result result = new emailNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public String shareNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_shareNote(authenticationToken, guid);
      return recv_shareNote();
    }

    public void send_shareNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("shareNote", TMessageType.CALL, ++seqid_));
      shareNote_args args = new shareNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_shareNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "shareNote failed: out of sequence response");
      }
      shareNote_result result = new shareNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "shareNote failed: unknown result");
    }

    public void stopSharingNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_stopSharingNote(authenticationToken, guid);
      recv_stopSharingNote();
    }

    public void send_stopSharingNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.CALL, ++seqid_));
      stopSharingNote_args args = new stopSharingNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_stopSharingNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "stopSharingNote failed: out of sequence response");
      }
      stopSharingNote_result result = new stopSharingNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNote(String guid, String noteKey) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_authenticateToSharedNote(guid, noteKey);
      return recv_authenticateToSharedNote();
    }

    public void send_authenticateToSharedNote(String guid, String noteKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.CALL, ++seqid_));
      authenticateToSharedNote_args args = new authenticateToSharedNote_args();
      args.setGuid(guid);
      args.setNoteKey(noteKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.userstore.AuthenticationResult recv_authenticateToSharedNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticateToSharedNote failed: out of sequence response");
      }
      authenticateToSharedNote_result result = new authenticateToSharedNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateToSharedNote failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getSyncState", new getSyncState());
      processMap_.put("getSyncChunk", new getSyncChunk());
      processMap_.put("getFilteredSyncChunk", new getFilteredSyncChunk());
      processMap_.put("getLinkedNotebookSyncState", new getLinkedNotebookSyncState());
      processMap_.put("getLinkedNotebookSyncChunk", new getLinkedNotebookSyncChunk());
      processMap_.put("listNotebooks", new listNotebooks());
      processMap_.put("getNotebook", new getNotebook());
      processMap_.put("getDefaultNotebook", new getDefaultNotebook());
      processMap_.put("createNotebook", new createNotebook());
      processMap_.put("updateNotebook", new updateNotebook());
      processMap_.put("expungeNotebook", new expungeNotebook());
      processMap_.put("listTags", new listTags());
      processMap_.put("listTagsByNotebook", new listTagsByNotebook());
      processMap_.put("getTag", new getTag());
      processMap_.put("createTag", new createTag());
      processMap_.put("updateTag", new updateTag());
      processMap_.put("untagAll", new untagAll());
      processMap_.put("expungeTag", new expungeTag());
      processMap_.put("listSearches", new listSearches());
      processMap_.put("getSearch", new getSearch());
      processMap_.put("createSearch", new createSearch());
      processMap_.put("updateSearch", new updateSearch());
      processMap_.put("expungeSearch", new expungeSearch());
      processMap_.put("findNotes", new findNotes());
      processMap_.put("findNoteOffset", new findNoteOffset());
      processMap_.put("findNotesMetadata", new findNotesMetadata());
      processMap_.put("findNoteCounts", new findNoteCounts());
      processMap_.put("getNote", new getNote());
      processMap_.put("getNoteApplicationData", new getNoteApplicationData());
      processMap_.put("getNoteApplicationDataEntry", new getNoteApplicationDataEntry());
      processMap_.put("setNoteApplicationDataEntry", new setNoteApplicationDataEntry());
      processMap_.put("unsetNoteApplicationDataEntry", new unsetNoteApplicationDataEntry());
      processMap_.put("getNoteContent", new getNoteContent());
      processMap_.put("getNoteSearchText", new getNoteSearchText());
      processMap_.put("getResourceSearchText", new getResourceSearchText());
      processMap_.put("getNoteTagNames", new getNoteTagNames());
      processMap_.put("createNote", new createNote());
      processMap_.put("updateNote", new updateNote());
      processMap_.put("deleteNote", new deleteNote());
      processMap_.put("expungeNote", new expungeNote());
      processMap_.put("expungeNotes", new expungeNotes());
      processMap_.put("expungeInactiveNotes", new expungeInactiveNotes());
      processMap_.put("copyNote", new copyNote());
      processMap_.put("listNoteVersions", new listNoteVersions());
      processMap_.put("getNoteVersion", new getNoteVersion());
      processMap_.put("getResource", new getResource());
      processMap_.put("getResourceApplicationData", new getResourceApplicationData());
      processMap_.put("getResourceApplicationDataEntry", new getResourceApplicationDataEntry());
      processMap_.put("setResourceApplicationDataEntry", new setResourceApplicationDataEntry());
      processMap_.put("unsetResourceApplicationDataEntry", new unsetResourceApplicationDataEntry());
      processMap_.put("updateResource", new updateResource());
      processMap_.put("getResourceData", new getResourceData());
      processMap_.put("getResourceByHash", new getResourceByHash());
      processMap_.put("getResourceRecognition", new getResourceRecognition());
      processMap_.put("getResourceAlternateData", new getResourceAlternateData());
      processMap_.put("getResourceAttributes", new getResourceAttributes());
      processMap_.put("getAccountSize", new getAccountSize());
      processMap_.put("getAds", new getAds());
      processMap_.put("getRandomAd", new getRandomAd());
      processMap_.put("getPublicNotebook", new getPublicNotebook());
      processMap_.put("createSharedNotebook", new createSharedNotebook());
      processMap_.put("sendMessageToSharedNotebookMembers", new sendMessageToSharedNotebookMembers());
      processMap_.put("listSharedNotebooks", new listSharedNotebooks());
      processMap_.put("expungeSharedNotebooks", new expungeSharedNotebooks());
      processMap_.put("createLinkedNotebook", new createLinkedNotebook());
      processMap_.put("updateLinkedNotebook", new updateLinkedNotebook());
      processMap_.put("listLinkedNotebooks", new listLinkedNotebooks());
      processMap_.put("expungeLinkedNotebook", new expungeLinkedNotebook());
      processMap_.put("authenticateToSharedNotebook", new authenticateToSharedNotebook());
      processMap_.put("getSharedNotebookByAuth", new getSharedNotebookByAuth());
      processMap_.put("emailNote", new emailNote());
      processMap_.put("shareNote", new shareNote());
      processMap_.put("stopSharingNote", new stopSharingNote());
      processMap_.put("authenticateToSharedNote", new authenticateToSharedNote());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getSyncState implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSyncState_args args = new getSyncState_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSyncState_result result = new getSyncState_result();
        try {
          result.success = iface_.getSyncState(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSyncState");
          oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSyncChunk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSyncChunk_args args = new getSyncChunk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSyncChunk_result result = new getSyncChunk_result();
        try {
          result.success = iface_.getSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.fullSyncOnly);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSyncChunk");
          oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFilteredSyncChunk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFilteredSyncChunk_args args = new getFilteredSyncChunk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFilteredSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFilteredSyncChunk_result result = new getFilteredSyncChunk_result();
        try {
          result.success = iface_.getFilteredSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.filter);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFilteredSyncChunk");
          oprot.writeMessageBegin(new TMessage("getFilteredSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFilteredSyncChunk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLinkedNotebookSyncState implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLinkedNotebookSyncState_args args = new getLinkedNotebookSyncState_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLinkedNotebookSyncState_result result = new getLinkedNotebookSyncState_result();
        try {
          result.success = iface_.getLinkedNotebookSyncState(args.authenticationToken, args.linkedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncState");
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLinkedNotebookSyncChunk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLinkedNotebookSyncChunk_args args = new getLinkedNotebookSyncChunk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLinkedNotebookSyncChunk_result result = new getLinkedNotebookSyncChunk_result();
        try {
          result.success = iface_.getLinkedNotebookSyncChunk(args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncChunk");
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listNotebooks_args args = new listNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listNotebooks_result result = new listNotebooks_result();
        try {
          result.success = iface_.listNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listNotebooks");
          oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNotebook_args args = new getNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNotebook_result result = new getNotebook_result();
        try {
          result.success = iface_.getNotebook(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNotebook");
          oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDefaultNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDefaultNotebook_args args = new getDefaultNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDefaultNotebook_result result = new getDefaultNotebook_result();
        try {
          result.success = iface_.getDefaultNotebook(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDefaultNotebook");
          oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNotebook_args args = new createNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNotebook_result result = new createNotebook_result();
        try {
          result.success = iface_.createNotebook(args.authenticationToken, args.notebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createNotebook");
          oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNotebook_args args = new updateNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNotebook_result result = new updateNotebook_result();
        try {
          result.success = iface_.updateNotebook(args.authenticationToken, args.notebook);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotebook");
          oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNotebook_args args = new expungeNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNotebook_result result = new expungeNotebook_result();
        try {
          result.success = iface_.expungeNotebook(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNotebook");
          oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listTags implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listTags_args args = new listTags_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listTags", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listTags_result result = new listTags_result();
        try {
          result.success = iface_.listTags(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listTags");
          oprot.writeMessageBegin(new TMessage("listTags", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listTags", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listTagsByNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listTagsByNotebook_args args = new listTagsByNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listTagsByNotebook_result result = new listTagsByNotebook_result();
        try {
          result.success = iface_.listTagsByNotebook(args.authenticationToken, args.notebookGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listTagsByNotebook");
          oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTag_args args = new getTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTag_result result = new getTag_result();
        try {
          result.success = iface_.getTag(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getTag");
          oprot.writeMessageBegin(new TMessage("getTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createTag_args args = new createTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createTag_result result = new createTag_result();
        try {
          result.success = iface_.createTag(args.authenticationToken, args.tag);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createTag");
          oprot.writeMessageBegin(new TMessage("createTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateTag_args args = new updateTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateTag_result result = new updateTag_result();
        try {
          result.success = iface_.updateTag(args.authenticationToken, args.tag);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateTag");
          oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class untagAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        untagAll_args args = new untagAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        untagAll_result result = new untagAll_result();
        try {
          iface_.untagAll(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing untagAll");
          oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeTag_args args = new expungeTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeTag_result result = new expungeTag_result();
        try {
          result.success = iface_.expungeTag(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeTag");
          oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listSearches implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listSearches_args args = new listSearches_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listSearches_result result = new listSearches_result();
        try {
          result.success = iface_.listSearches(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listSearches");
          oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSearch_args args = new getSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSearch_result result = new getSearch_result();
        try {
          result.success = iface_.getSearch(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSearch");
          oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createSearch_args args = new createSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createSearch_result result = new createSearch_result();
        try {
          result.success = iface_.createSearch(args.authenticationToken, args.search);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSearch");
          oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSearch_args args = new updateSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSearch_result result = new updateSearch_result();
        try {
          result.success = iface_.updateSearch(args.authenticationToken, args.search);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSearch");
          oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeSearch_args args = new expungeSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeSearch_result result = new expungeSearch_result();
        try {
          result.success = iface_.expungeSearch(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeSearch");
          oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNotes_args args = new findNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNotes_result result = new findNotes_result();
        try {
          result.success = iface_.findNotes(args.authenticationToken, args.filter, args.offset, args.maxNotes);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNotes");
          oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNoteOffset implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNoteOffset_args args = new findNoteOffset_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNoteOffset_result result = new findNoteOffset_result();
        try {
          result.success = iface_.findNoteOffset(args.authenticationToken, args.filter, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNoteOffset");
          oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNotesMetadata implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNotesMetadata_args args = new findNotesMetadata_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNotesMetadata_result result = new findNotesMetadata_result();
        try {
          result.success = iface_.findNotesMetadata(args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNotesMetadata");
          oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNoteCounts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNoteCounts_args args = new findNoteCounts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNoteCounts_result result = new findNoteCounts_result();
        try {
          result.success = iface_.findNoteCounts(args.authenticationToken, args.filter, args.withTrash);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNoteCounts");
          oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNote_args args = new getNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNote_result result = new getNote_result();
        try {
          result.success = iface_.getNote(args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNote");
          oprot.writeMessageBegin(new TMessage("getNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteApplicationData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteApplicationData_args args = new getNoteApplicationData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteApplicationData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteApplicationData_result result = new getNoteApplicationData_result();
        try {
          result.success = iface_.getNoteApplicationData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteApplicationData");
          oprot.writeMessageBegin(new TMessage("getNoteApplicationData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteApplicationData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteApplicationDataEntry_args args = new getNoteApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteApplicationDataEntry_result result = new getNoteApplicationDataEntry_result();
        try {
          result.success = iface_.getNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("getNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setNoteApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setNoteApplicationDataEntry_args args = new setNoteApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setNoteApplicationDataEntry_result result = new setNoteApplicationDataEntry_result();
        try {
          result.success = iface_.setNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key, args.value);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setNoteApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("setNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setNoteApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unsetNoteApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unsetNoteApplicationDataEntry_args args = new unsetNoteApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unsetNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unsetNoteApplicationDataEntry_result result = new unsetNoteApplicationDataEntry_result();
        try {
          result.success = iface_.unsetNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unsetNoteApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("unsetNoteApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unsetNoteApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteContent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteContent_args args = new getNoteContent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteContent_result result = new getNoteContent_result();
        try {
          result.success = iface_.getNoteContent(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteContent");
          oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteSearchText implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteSearchText_args args = new getNoteSearchText_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteSearchText_result result = new getNoteSearchText_result();
        try {
          result.success = iface_.getNoteSearchText(args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteSearchText");
          oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceSearchText implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceSearchText_args args = new getResourceSearchText_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceSearchText_result result = new getResourceSearchText_result();
        try {
          result.success = iface_.getResourceSearchText(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceSearchText");
          oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteTagNames implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteTagNames_args args = new getNoteTagNames_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteTagNames_result result = new getNoteTagNames_result();
        try {
          result.success = iface_.getNoteTagNames(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteTagNames");
          oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNote_args args = new createNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNote_result result = new createNote_result();
        try {
          result.success = iface_.createNote(args.authenticationToken, args.note);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createNote");
          oprot.writeMessageBegin(new TMessage("createNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNote_args args = new updateNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNote_result result = new updateNote_result();
        try {
          result.success = iface_.updateNote(args.authenticationToken, args.note);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNote");
          oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteNote_args args = new deleteNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteNote_result result = new deleteNote_result();
        try {
          result.success = iface_.deleteNote(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing deleteNote");
          oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNote_args args = new expungeNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNote_result result = new expungeNote_result();
        try {
          result.success = iface_.expungeNote(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNote");
          oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNotes_args args = new expungeNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNotes_result result = new expungeNotes_result();
        try {
          result.success = iface_.expungeNotes(args.authenticationToken, args.noteGuids);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNotes");
          oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeInactiveNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeInactiveNotes_args args = new expungeInactiveNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeInactiveNotes_result result = new expungeInactiveNotes_result();
        try {
          result.success = iface_.expungeInactiveNotes(args.authenticationToken);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeInactiveNotes");
          oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class copyNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        copyNote_args args = new copyNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        copyNote_result result = new copyNote_result();
        try {
          result.success = iface_.copyNote(args.authenticationToken, args.noteGuid, args.toNotebookGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing copyNote");
          oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listNoteVersions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listNoteVersions_args args = new listNoteVersions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listNoteVersions_result result = new listNoteVersions_result();
        try {
          result.success = iface_.listNoteVersions(args.authenticationToken, args.noteGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listNoteVersions");
          oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteVersion implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteVersion_args args = new getNoteVersion_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteVersion_result result = new getNoteVersion_result();
        try {
          result.success = iface_.getNoteVersion(args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteVersion");
          oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResource implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResource_args args = new getResource_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResource_result result = new getResource_result();
        try {
          result.success = iface_.getResource(args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResource");
          oprot.writeMessageBegin(new TMessage("getResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResource", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceApplicationData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceApplicationData_args args = new getResourceApplicationData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceApplicationData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceApplicationData_result result = new getResourceApplicationData_result();
        try {
          result.success = iface_.getResourceApplicationData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceApplicationData");
          oprot.writeMessageBegin(new TMessage("getResourceApplicationData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceApplicationData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceApplicationDataEntry_args args = new getResourceApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceApplicationDataEntry_result result = new getResourceApplicationDataEntry_result();
        try {
          result.success = iface_.getResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("getResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setResourceApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setResourceApplicationDataEntry_args args = new setResourceApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setResourceApplicationDataEntry_result result = new setResourceApplicationDataEntry_result();
        try {
          result.success = iface_.setResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key, args.value);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setResourceApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("setResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setResourceApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unsetResourceApplicationDataEntry implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unsetResourceApplicationDataEntry_args args = new unsetResourceApplicationDataEntry_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unsetResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unsetResourceApplicationDataEntry_result result = new unsetResourceApplicationDataEntry_result();
        try {
          result.success = iface_.unsetResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unsetResourceApplicationDataEntry");
          oprot.writeMessageBegin(new TMessage("unsetResourceApplicationDataEntry", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unsetResourceApplicationDataEntry", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateResource implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateResource_args args = new updateResource_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateResource_result result = new updateResource_result();
        try {
          result.success = iface_.updateResource(args.authenticationToken, args.resource);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateResource");
          oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceData_args args = new getResourceData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceData_result result = new getResourceData_result();
        try {
          result.success = iface_.getResourceData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceData");
          oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceByHash implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceByHash_args args = new getResourceByHash_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceByHash_result result = new getResourceByHash_result();
        try {
          result.success = iface_.getResourceByHash(args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceByHash");
          oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceRecognition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceRecognition_args args = new getResourceRecognition_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceRecognition_result result = new getResourceRecognition_result();
        try {
          result.success = iface_.getResourceRecognition(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceRecognition");
          oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceAlternateData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceAlternateData_args args = new getResourceAlternateData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceAlternateData_result result = new getResourceAlternateData_result();
        try {
          result.success = iface_.getResourceAlternateData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceAlternateData");
          oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceAttributes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceAttributes_args args = new getResourceAttributes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceAttributes_result result = new getResourceAttributes_result();
        try {
          result.success = iface_.getResourceAttributes(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceAttributes");
          oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAccountSize implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAccountSize_args args = new getAccountSize_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccountSize_result result = new getAccountSize_result();
        try {
          result.success = iface_.getAccountSize(args.authenticationToken);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAccountSize");
          oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAds_args args = new getAds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAds_result result = new getAds_result();
        try {
          result.success = iface_.getAds(args.authenticationToken, args.adParameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAds");
          oprot.writeMessageBegin(new TMessage("getAds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRandomAd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRandomAd_args args = new getRandomAd_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRandomAd_result result = new getRandomAd_result();
        try {
          result.success = iface_.getRandomAd(args.authenticationToken, args.adParameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRandomAd");
          oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPublicNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPublicNotebook_args args = new getPublicNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPublicNotebook_result result = new getPublicNotebook_result();
        try {
          result.success = iface_.getPublicNotebook(args.userId, args.publicUri);
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPublicNotebook");
          oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createSharedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createSharedNotebook_args args = new createSharedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createSharedNotebook_result result = new createSharedNotebook_result();
        try {
          result.success = iface_.createSharedNotebook(args.authenticationToken, args.sharedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSharedNotebook");
          oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageToSharedNotebookMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageToSharedNotebookMembers_args args = new sendMessageToSharedNotebookMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageToSharedNotebookMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageToSharedNotebookMembers_result result = new sendMessageToSharedNotebookMembers_result();
        try {
          result.success = iface_.sendMessageToSharedNotebookMembers(args.authenticationToken, args.notebookGuid, args.messageText, args.recipients);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageToSharedNotebookMembers");
          oprot.writeMessageBegin(new TMessage("sendMessageToSharedNotebookMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageToSharedNotebookMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listSharedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listSharedNotebooks_args args = new listSharedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listSharedNotebooks_result result = new listSharedNotebooks_result();
        try {
          result.success = iface_.listSharedNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listSharedNotebooks");
          oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeSharedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
        try {
          result.success = iface_.expungeSharedNotebooks(args.authenticationToken, args.sharedNotebookIds);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeSharedNotebooks");
          oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createLinkedNotebook_args args = new createLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createLinkedNotebook_result result = new createLinkedNotebook_result();
        try {
          result.success = iface_.createLinkedNotebook(args.authenticationToken, args.linkedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateLinkedNotebook_args args = new updateLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateLinkedNotebook_result result = new updateLinkedNotebook_result();
        try {
          result.success = iface_.updateLinkedNotebook(args.authenticationToken, args.linkedNotebook);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listLinkedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listLinkedNotebooks_args args = new listLinkedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listLinkedNotebooks_result result = new listLinkedNotebooks_result();
        try {
          result.success = iface_.listLinkedNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listLinkedNotebooks");
          oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
        try {
          result.success = iface_.expungeLinkedNotebook(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class authenticateToSharedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
        try {
          result.success = iface_.authenticateToSharedNotebook(args.shareKey, args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticateToSharedNotebook");
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSharedNotebookByAuth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
        try {
          result.success = iface_.getSharedNotebookByAuth(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSharedNotebookByAuth");
          oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class emailNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        emailNote_args args = new emailNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        emailNote_result result = new emailNote_result();
        try {
          iface_.emailNote(args.authenticationToken, args.parameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing emailNote");
          oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class shareNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        shareNote_args args = new shareNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        shareNote_result result = new shareNote_result();
        try {
          result.success = iface_.shareNote(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing shareNote");
          oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class stopSharingNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        stopSharingNote_args args = new stopSharingNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        stopSharingNote_result result = new stopSharingNote_result();
        try {
          iface_.stopSharingNote(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing stopSharingNote");
          oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class authenticateToSharedNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        authenticateToSharedNote_args args = new authenticateToSharedNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticateToSharedNote_result result = new authenticateToSharedNote_result();
        try {
          result.success = iface_.authenticateToSharedNote(args.guid, args.noteKey);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticateToSharedNote");
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getSyncState_args implements TBase<getSyncState_args, getSyncState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncState_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSyncState_args.class, metaDataMap);
    }

    public getSyncState_args() {
    }

    public getSyncState_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncState_args(getSyncState_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getSyncState_args deepCopy() {
      return new getSyncState_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncState_args)
        return this.equals((getSyncState_args)that);
      return false;
    }

    public boolean equals(getSyncState_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyncState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyncState_args typedOther = (getSyncState_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncState_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncState_result implements TBase<getSyncState_result, getSyncState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncState_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private SyncState success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncState.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSyncState_result.class, metaDataMap);
    }

    public getSyncState_result() {
    }

    public getSyncState_result(
      SyncState success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncState_result(getSyncState_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncState(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSyncState_result deepCopy() {
      return new getSyncState_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public SyncState getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncState success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SyncState)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncState_result)
        return this.equals((getSyncState_result)that);
      return false;
    }

    public boolean equals(getSyncState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyncState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyncState_result typedOther = (getSyncState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncState();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncChunk_args implements TBase<getSyncChunk_args, getSyncChunk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncChunk_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AFTER_USN_FIELD_DESC = new TField("afterUSN", TType.I32, (short)2);
    private static final TField MAX_ENTRIES_FIELD_DESC = new TField("maxEntries", TType.I32, (short)3);
    private static final TField FULL_SYNC_ONLY_FIELD_DESC = new TField("fullSyncOnly", TType.BOOL, (short)4);

    private String authenticationToken;
    private int afterUSN;
    private int maxEntries;
    private boolean fullSyncOnly;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      AFTER_USN((short)2, "afterUSN"),
      MAX_ENTRIES((short)3, "maxEntries"),
      FULL_SYNC_ONLY((short)4, "fullSyncOnly");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // AFTER_USN
            return AFTER_USN;
          case 3: // MAX_ENTRIES
            return MAX_ENTRIES;
          case 4: // FULL_SYNC_ONLY
            return FULL_SYNC_ONLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AFTERUSN_ISSET_ID = 0;
    private static final int __MAXENTRIES_ISSET_ID = 1;
    private static final int __FULLSYNCONLY_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AFTER_USN, new FieldMetaData("afterUSN", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.MAX_ENTRIES, new FieldMetaData("maxEntries", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.FULL_SYNC_ONLY, new FieldMetaData("fullSyncOnly", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSyncChunk_args.class, metaDataMap);
    }

    public getSyncChunk_args() {
    }

    public getSyncChunk_args(
      String authenticationToken,
      int afterUSN,
      int maxEntries,
      boolean fullSyncOnly)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncChunk_args(getSyncChunk_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      this.afterUSN = other.afterUSN;
      this.maxEntries = other.maxEntries;
      this.fullSyncOnly = other.fullSyncOnly;
    }

    public getSyncChunk_args deepCopy() {
      return new getSyncChunk_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      setAfterUSNIsSet(false);
      this.afterUSN = 0;
      setMaxEntriesIsSet(false);
      this.maxEntries = 0;
      setFullSyncOnlyIsSet(false);
      this.fullSyncOnly = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getAfterUSN() {
      return this.afterUSN;
    }

    public void setAfterUSN(int afterUSN) {
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
    }

    public void unsetAfterUSN() {
      __isset_vector[__AFTERUSN_ISSET_ID] = false;
    }

    /** Returns true if field afterUSN is set (has been asigned a value) and false otherwise */
    public boolean isSetAfterUSN() {
      return __isset_vector[__AFTERUSN_ISSET_ID];
    }

    public void setAfterUSNIsSet(boolean value) {
      __isset_vector[__AFTERUSN_ISSET_ID] = value;
    }

    public int getMaxEntries() {
      return this.maxEntries;
    }

    public void setMaxEntries(int maxEntries) {
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
    }

    public void unsetMaxEntries() {
      __isset_vector[__MAXENTRIES_ISSET_ID] = false;
    }

    /** Returns true if field maxEntries is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxEntries() {
      return __isset_vector[__MAXENTRIES_ISSET_ID];
    }

    public void setMaxEntriesIsSet(boolean value) {
      __isset_vector[__MAXENTRIES_ISSET_ID] = value;
    }

    public boolean isFullSyncOnly() {
      return this.fullSyncOnly;
    }

    public void setFullSyncOnly(boolean fullSyncOnly) {
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    public void unsetFullSyncOnly() {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = false;
    }

    /** Returns true if field fullSyncOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetFullSyncOnly() {
      return __isset_vector[__FULLSYNCONLY_ISSET_ID];
    }

    public void setFullSyncOnlyIsSet(boolean value) {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case AFTER_USN:
        if (value == null) {
          unsetAfterUSN();
        } else {
          setAfterUSN((Integer)value);
        }
        break;

      case MAX_ENTRIES:
        if (value == null) {
          unsetMaxEntries();
        } else {
          setMaxEntries((Integer)value);
        }
        break;

      case FULL_SYNC_ONLY:
        if (value == null) {
          unsetFullSyncOnly();
        } else {
          setFullSyncOnly((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case AFTER_USN:
        return new Integer(getAfterUSN());

      case MAX_ENTRIES:
        return new Integer(getMaxEntries());

      case FULL_SYNC_ONLY:
        return new Boolean(isFullSyncOnly());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case AFTER_USN:
        return isSetAfterUSN();
      case MAX_ENTRIES:
        return isSetMaxEntries();
      case FULL_SYNC_ONLY:
        return isSetFullSyncOnly();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncChunk_args)
        return this.equals((getSyncChunk_args)that);
      return false;
    }

    public boolean equals(getSyncChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_afterUSN = true;
      boolean that_present_afterUSN = true;
      if (this_present_afterUSN || that_present_afterUSN) {
        if (!(this_present_afterUSN && that_present_afterUSN))
          return false;
        if (this.afterUSN != that.afterUSN)
          return false;
      }

      boolean this_present_maxEntries = true;
      boolean that_present_maxEntries = true;
      if (this_present_maxEntries || that_present_maxEntries) {
        if (!(this_present_maxEntries && that_present_maxEntries))
          return false;
        if (this.maxEntries != that.maxEntries)
          return false;
      }

      boolean this_present_fullSyncOnly = true;
      boolean that_present_fullSyncOnly = true;
      if (this_present_fullSyncOnly || that_present_fullSyncOnly) {
        if (!(this_present_fullSyncOnly && that_present_fullSyncOnly))
          return false;
        if (this.fullSyncOnly != that.fullSyncOnly)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyncChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyncChunk_args typedOther = (getSyncChunk_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAfterUSN()).compareTo(typedOther.isSetAfterUSN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterUSN()) {        lastComparison = TBaseHelper.compareTo(this.afterUSN, typedOther.afterUSN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxEntries()).compareTo(typedOther.isSetMaxEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxEntries()) {        lastComparison = TBaseHelper.compareTo(this.maxEntries, typedOther.maxEntries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFullSyncOnly()).compareTo(typedOther.isSetFullSyncOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullSyncOnly()) {        lastComparison = TBaseHelper.compareTo(this.fullSyncOnly, typedOther.fullSyncOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AFTER_USN
            if (field.type == TType.I32) {
              this.afterUSN = iprot.readI32();
              setAfterUSNIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MAX_ENTRIES
            if (field.type == TType.I32) {
              this.maxEntries = iprot.readI32();
              setMaxEntriesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FULL_SYNC_ONLY
            if (field.type == TType.BOOL) {
              this.fullSyncOnly = iprot.readBool();
              setFullSyncOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_USN_FIELD_DESC);
      oprot.writeI32(this.afterUSN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ENTRIES_FIELD_DESC);
      oprot.writeI32(this.maxEntries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FULL_SYNC_ONLY_FIELD_DESC);
      oprot.writeBool(this.fullSyncOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncChunk_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterUSN:");
      sb.append(this.afterUSN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxEntries:");
      sb.append(this.maxEntries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fullSyncOnly:");
      sb.append(this.fullSyncOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncChunk_result implements TBase<getSyncChunk_result, getSyncChunk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncChunk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private SyncChunk success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncChunk.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSyncChunk_result.class, metaDataMap);
    }

    public getSyncChunk_result() {
    }

    public getSyncChunk_result(
      SyncChunk success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncChunk_result(getSyncChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncChunk(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSyncChunk_result deepCopy() {
      return new getSyncChunk_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public SyncChunk getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncChunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SyncChunk)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncChunk_result)
        return this.equals((getSyncChunk_result)that);
      return false;
    }

    public boolean equals(getSyncChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSyncChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSyncChunk_result typedOther = (getSyncChunk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncChunk();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFilteredSyncChunk_args implements TBase<getFilteredSyncChunk_args, getFilteredSyncChunk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getFilteredSyncChunk_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AFTER_USN_FIELD_DESC = new TField("afterUSN", TType.I32, (short)2);
    private static final TField MAX_ENTRIES_FIELD_DESC = new TField("maxEntries", TType.I32, (short)3);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)4);

    private String authenticationToken;
    private int afterUSN;
    private int maxEntries;
    private SyncChunkFilter filter;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      AFTER_USN((short)2, "afterUSN"),
      MAX_ENTRIES((short)3, "maxEntries"),
      FILTER((short)4, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // AFTER_USN
            return AFTER_USN;
          case 3: // MAX_ENTRIES
            return MAX_ENTRIES;
          case 4: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AFTERUSN_ISSET_ID = 0;
    private static final int __MAXENTRIES_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AFTER_USN, new FieldMetaData("afterUSN", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.MAX_ENTRIES, new FieldMetaData("maxEntries", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncChunkFilter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getFilteredSyncChunk_args.class, metaDataMap);
    }

    public getFilteredSyncChunk_args() {
    }

    public getFilteredSyncChunk_args(
      String authenticationToken,
      int afterUSN,
      int maxEntries,
      SyncChunkFilter filter)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredSyncChunk_args(getFilteredSyncChunk_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      this.afterUSN = other.afterUSN;
      this.maxEntries = other.maxEntries;
      if (other.isSetFilter()) {
        this.filter = new SyncChunkFilter(other.filter);
      }
    }

    public getFilteredSyncChunk_args deepCopy() {
      return new getFilteredSyncChunk_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      setAfterUSNIsSet(false);
      this.afterUSN = 0;
      setMaxEntriesIsSet(false);
      this.maxEntries = 0;
      this.filter = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getAfterUSN() {
      return this.afterUSN;
    }

    public void setAfterUSN(int afterUSN) {
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
    }

    public void unsetAfterUSN() {
      __isset_vector[__AFTERUSN_ISSET_ID] = false;
    }

    /** Returns true if field afterUSN is set (has been asigned a value) and false otherwise */
    public boolean isSetAfterUSN() {
      return __isset_vector[__AFTERUSN_ISSET_ID];
    }

    public void setAfterUSNIsSet(boolean value) {
      __isset_vector[__AFTERUSN_ISSET_ID] = value;
    }

    public int getMaxEntries() {
      return this.maxEntries;
    }

    public void setMaxEntries(int maxEntries) {
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
    }

    public void unsetMaxEntries() {
      __isset_vector[__MAXENTRIES_ISSET_ID] = false;
    }

    /** Returns true if field maxEntries is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxEntries() {
      return __isset_vector[__MAXENTRIES_ISSET_ID];
    }

    public void setMaxEntriesIsSet(boolean value) {
      __isset_vector[__MAXENTRIES_ISSET_ID] = value;
    }

    public SyncChunkFilter getFilter() {
      return this.filter;
    }

    public void setFilter(SyncChunkFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case AFTER_USN:
        if (value == null) {
          unsetAfterUSN();
        } else {
          setAfterUSN((Integer)value);
        }
        break;

      case MAX_ENTRIES:
        if (value == null) {
          unsetMaxEntries();
        } else {
          setMaxEntries((Integer)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((SyncChunkFilter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case AFTER_USN:
        return new Integer(getAfterUSN());

      case MAX_ENTRIES:
        return new Integer(getMaxEntries());

      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case AFTER_USN:
        return isSetAfterUSN();
      case MAX_ENTRIES:
        return isSetMaxEntries();
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredSyncChunk_args)
        return this.equals((getFilteredSyncChunk_args)that);
      return false;
    }

    public boolean equals(getFilteredSyncChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_afterUSN = true;
      boolean that_present_afterUSN = true;
      if (this_present_afterUSN || that_present_afterUSN) {
        if (!(this_present_afterUSN && that_present_afterUSN))
          return false;
        if (this.afterUSN != that.afterUSN)
          return false;
      }

      boolean this_present_maxEntries = true;
      boolean that_present_maxEntries = true;
      if (this_present_maxEntries || that_present_maxEntries) {
        if (!(this_present_maxEntries && that_present_maxEntries))
          return false;
        if (this.maxEntries != that.maxEntries)
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredSyncChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredSyncChunk_args typedOther = (getFilteredSyncChunk_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAfterUSN()).compareTo(typedOther.isSetAfterUSN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterUSN()) {        lastComparison = TBaseHelper.compareTo(this.afterUSN, typedOther.afterUSN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxEntries()).compareTo(typedOther.isSetMaxEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxEntries()) {        lastComparison = TBaseHelper.compareTo(this.maxEntries, typedOther.maxEntries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {        lastComparison = TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AFTER_USN
            if (field.type == TType.I32) {
              this.afterUSN = iprot.readI32();
              setAfterUSNIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MAX_ENTRIES
            if (field.type == TType.I32) {
              this.maxEntries = iprot.readI32();
              setMaxEntriesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new SyncChunkFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_USN_FIELD_DESC);
      oprot.writeI32(this.afterUSN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ENTRIES_FIELD_DESC);
      oprot.writeI32(this.maxEntries);
      oprot.writeFieldEnd();
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredSyncChunk_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterUSN:");
      sb.append(this.afterUSN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxEntries:");
      sb.append(this.maxEntries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFilteredSyncChunk_result implements TBase<getFilteredSyncChunk_result, getFilteredSyncChunk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getFilteredSyncChunk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private SyncChunk success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncChunk.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getFilteredSyncChunk_result.class, metaDataMap);
    }

    public getFilteredSyncChunk_result() {
    }

    public getFilteredSyncChunk_result(
      SyncChunk success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredSyncChunk_result(getFilteredSyncChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncChunk(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getFilteredSyncChunk_result deepCopy() {
      return new getFilteredSyncChunk_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public SyncChunk getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncChunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SyncChunk)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredSyncChunk_result)
        return this.equals((getFilteredSyncChunk_result)that);
      return false;
    }

    public boolean equals(getFilteredSyncChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getFilteredSyncChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFilteredSyncChunk_result typedOther = (getFilteredSyncChunk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncChunk();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredSyncChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncState_args implements TBase<getLinkedNotebookSyncState_args, getLinkedNotebookSyncState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncState_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      LINKED_NOTEBOOK((short)2, "linkedNotebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // LINKED_NOTEBOOK
            return LINKED_NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLinkedNotebookSyncState_args.class, metaDataMap);
    }

    public getLinkedNotebookSyncState_args() {
    }

    public getLinkedNotebookSyncState_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncState_args(getLinkedNotebookSyncState_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public getLinkedNotebookSyncState_args deepCopy() {
      return new getLinkedNotebookSyncState_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case LINKED_NOTEBOOK:
        if (value == null) {
          unsetLinkedNotebook();
        } else {
          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case LINKED_NOTEBOOK:
        return getLinkedNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case LINKED_NOTEBOOK:
        return isSetLinkedNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncState_args)
        return this.equals((getLinkedNotebookSyncState_args)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncState_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkedNotebookSyncState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkedNotebookSyncState_args typedOther = (getLinkedNotebookSyncState_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedNotebookSyncState_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncState_result implements TBase<getLinkedNotebookSyncState_result, getLinkedNotebookSyncState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncState_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private SyncState success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncState.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLinkedNotebookSyncState_result.class, metaDataMap);
    }

    public getLinkedNotebookSyncState_result() {
    }

    public getLinkedNotebookSyncState_result(
      SyncState success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncState_result(getLinkedNotebookSyncState_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncState(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getLinkedNotebookSyncState_result deepCopy() {
      return new getLinkedNotebookSyncState_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public SyncState getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncState success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SyncState)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncState_result)
        return this.equals((getLinkedNotebookSyncState_result)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkedNotebookSyncState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkedNotebookSyncState_result typedOther = (getLinkedNotebookSyncState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncState();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedNotebookSyncState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncChunk_args implements TBase<getLinkedNotebookSyncChunk_args, getLinkedNotebookSyncChunk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncChunk_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);
    private static final TField AFTER_USN_FIELD_DESC = new TField("afterUSN", TType.I32, (short)3);
    private static final TField MAX_ENTRIES_FIELD_DESC = new TField("maxEntries", TType.I32, (short)4);
    private static final TField FULL_SYNC_ONLY_FIELD_DESC = new TField("fullSyncOnly", TType.BOOL, (short)5);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;
    private int afterUSN;
    private int maxEntries;
    private boolean fullSyncOnly;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      LINKED_NOTEBOOK((short)2, "linkedNotebook"),
      AFTER_USN((short)3, "afterUSN"),
      MAX_ENTRIES((short)4, "maxEntries"),
      FULL_SYNC_ONLY((short)5, "fullSyncOnly");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // LINKED_NOTEBOOK
            return LINKED_NOTEBOOK;
          case 3: // AFTER_USN
            return AFTER_USN;
          case 4: // MAX_ENTRIES
            return MAX_ENTRIES;
          case 5: // FULL_SYNC_ONLY
            return FULL_SYNC_ONLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AFTERUSN_ISSET_ID = 0;
    private static final int __MAXENTRIES_ISSET_ID = 1;
    private static final int __FULLSYNCONLY_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
      tmpMap.put(_Fields.AFTER_USN, new FieldMetaData("afterUSN", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.MAX_ENTRIES, new FieldMetaData("maxEntries", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.FULL_SYNC_ONLY, new FieldMetaData("fullSyncOnly", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLinkedNotebookSyncChunk_args.class, metaDataMap);
    }

    public getLinkedNotebookSyncChunk_args() {
    }

    public getLinkedNotebookSyncChunk_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook,
      int afterUSN,
      int maxEntries,
      boolean fullSyncOnly)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncChunk_args(getLinkedNotebookSyncChunk_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
      this.afterUSN = other.afterUSN;
      this.maxEntries = other.maxEntries;
      this.fullSyncOnly = other.fullSyncOnly;
    }

    public getLinkedNotebookSyncChunk_args deepCopy() {
      return new getLinkedNotebookSyncChunk_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
      setAfterUSNIsSet(false);
      this.afterUSN = 0;
      setMaxEntriesIsSet(false);
      this.maxEntries = 0;
      setFullSyncOnlyIsSet(false);
      this.fullSyncOnly = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public int getAfterUSN() {
      return this.afterUSN;
    }

    public void setAfterUSN(int afterUSN) {
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
    }

    public void unsetAfterUSN() {
      __isset_vector[__AFTERUSN_ISSET_ID] = false;
    }

    /** Returns true if field afterUSN is set (has been asigned a value) and false otherwise */
    public boolean isSetAfterUSN() {
      return __isset_vector[__AFTERUSN_ISSET_ID];
    }

    public void setAfterUSNIsSet(boolean value) {
      __isset_vector[__AFTERUSN_ISSET_ID] = value;
    }

    public int getMaxEntries() {
      return this.maxEntries;
    }

    public void setMaxEntries(int maxEntries) {
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
    }

    public void unsetMaxEntries() {
      __isset_vector[__MAXENTRIES_ISSET_ID] = false;
    }

    /** Returns true if field maxEntries is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxEntries() {
      return __isset_vector[__MAXENTRIES_ISSET_ID];
    }

    public void setMaxEntriesIsSet(boolean value) {
      __isset_vector[__MAXENTRIES_ISSET_ID] = value;
    }

    public boolean isFullSyncOnly() {
      return this.fullSyncOnly;
    }

    public void setFullSyncOnly(boolean fullSyncOnly) {
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    public void unsetFullSyncOnly() {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = false;
    }

    /** Returns true if field fullSyncOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetFullSyncOnly() {
      return __isset_vector[__FULLSYNCONLY_ISSET_ID];
    }

    public void setFullSyncOnlyIsSet(boolean value) {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case LINKED_NOTEBOOK:
        if (value == null) {
          unsetLinkedNotebook();
        } else {
          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
        }
        break;

      case AFTER_USN:
        if (value == null) {
          unsetAfterUSN();
        } else {
          setAfterUSN((Integer)value);
        }
        break;

      case MAX_ENTRIES:
        if (value == null) {
          unsetMaxEntries();
        } else {
          setMaxEntries((Integer)value);
        }
        break;

      case FULL_SYNC_ONLY:
        if (value == null) {
          unsetFullSyncOnly();
        } else {
          setFullSyncOnly((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case LINKED_NOTEBOOK:
        return getLinkedNotebook();

      case AFTER_USN:
        return new Integer(getAfterUSN());

      case MAX_ENTRIES:
        return new Integer(getMaxEntries());

      case FULL_SYNC_ONLY:
        return new Boolean(isFullSyncOnly());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case LINKED_NOTEBOOK:
        return isSetLinkedNotebook();
      case AFTER_USN:
        return isSetAfterUSN();
      case MAX_ENTRIES:
        return isSetMaxEntries();
      case FULL_SYNC_ONLY:
        return isSetFullSyncOnly();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncChunk_args)
        return this.equals((getLinkedNotebookSyncChunk_args)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      boolean this_present_afterUSN = true;
      boolean that_present_afterUSN = true;
      if (this_present_afterUSN || that_present_afterUSN) {
        if (!(this_present_afterUSN && that_present_afterUSN))
          return false;
        if (this.afterUSN != that.afterUSN)
          return false;
      }

      boolean this_present_maxEntries = true;
      boolean that_present_maxEntries = true;
      if (this_present_maxEntries || that_present_maxEntries) {
        if (!(this_present_maxEntries && that_present_maxEntries))
          return false;
        if (this.maxEntries != that.maxEntries)
          return false;
      }

      boolean this_present_fullSyncOnly = true;
      boolean that_present_fullSyncOnly = true;
      if (this_present_fullSyncOnly || that_present_fullSyncOnly) {
        if (!(this_present_fullSyncOnly && that_present_fullSyncOnly))
          return false;
        if (this.fullSyncOnly != that.fullSyncOnly)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkedNotebookSyncChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkedNotebookSyncChunk_args typedOther = (getLinkedNotebookSyncChunk_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAfterUSN()).compareTo(typedOther.isSetAfterUSN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterUSN()) {        lastComparison = TBaseHelper.compareTo(this.afterUSN, typedOther.afterUSN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxEntries()).compareTo(typedOther.isSetMaxEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxEntries()) {        lastComparison = TBaseHelper.compareTo(this.maxEntries, typedOther.maxEntries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFullSyncOnly()).compareTo(typedOther.isSetFullSyncOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullSyncOnly()) {        lastComparison = TBaseHelper.compareTo(this.fullSyncOnly, typedOther.fullSyncOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // AFTER_USN
            if (field.type == TType.I32) {
              this.afterUSN = iprot.readI32();
              setAfterUSNIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_ENTRIES
            if (field.type == TType.I32) {
              this.maxEntries = iprot.readI32();
              setMaxEntriesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // FULL_SYNC_ONLY
            if (field.type == TType.BOOL) {
              this.fullSyncOnly = iprot.readBool();
              setFullSyncOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_USN_FIELD_DESC);
      oprot.writeI32(this.afterUSN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ENTRIES_FIELD_DESC);
      oprot.writeI32(this.maxEntries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FULL_SYNC_ONLY_FIELD_DESC);
      oprot.writeBool(this.fullSyncOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedNotebookSyncChunk_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterUSN:");
      sb.append(this.afterUSN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxEntries:");
      sb.append(this.maxEntries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fullSyncOnly:");
      sb.append(this.fullSyncOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncChunk_result implements TBase<getLinkedNotebookSyncChunk_result, getLinkedNotebookSyncChunk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncChunk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private SyncChunk success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SyncChunk.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getLinkedNotebookSyncChunk_result.class, metaDataMap);
    }

    public getLinkedNotebookSyncChunk_result() {
    }

    public getLinkedNotebookSyncChunk_result(
      SyncChunk success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncChunk_result(getLinkedNotebookSyncChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncChunk(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getLinkedNotebookSyncChunk_result deepCopy() {
      return new getLinkedNotebookSyncChunk_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public SyncChunk getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncChunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SyncChunk)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncChunk_result)
        return this.equals((getLinkedNotebookSyncChunk_result)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getLinkedNotebookSyncChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLinkedNotebookSyncChunk_result typedOther = (getLinkedNotebookSyncChunk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncChunk();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getLinkedNotebookSyncChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNotebooks_args implements TBase<listNotebooks_args, listNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listNotebooks_args.class, metaDataMap);
    }

    public listNotebooks_args() {
    }

    public listNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNotebooks_args(listNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listNotebooks_args deepCopy() {
      return new listNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNotebooks_args)
        return this.equals((listNotebooks_args)that);
      return false;
    }

    public boolean equals(listNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listNotebooks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listNotebooks_args typedOther = (listNotebooks_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNotebooks_result implements TBase<listNotebooks_result, listNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private List<com.evernote.edam.type.Notebook> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listNotebooks_result.class, metaDataMap);
    }

    public listNotebooks_result() {
    }

    public listNotebooks_result(
      List<com.evernote.edam.type.Notebook> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNotebooks_result(listNotebooks_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.Notebook> __this__success = new ArrayList<com.evernote.edam.type.Notebook>();
        for (com.evernote.edam.type.Notebook other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.Notebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listNotebooks_result deepCopy() {
      return new listNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.Notebook> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.Notebook elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.Notebook>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.Notebook> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.Notebook> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.Notebook>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNotebooks_result)
        return this.equals((listNotebooks_result)that);
      return false;
    }

    public boolean equals(listNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listNotebooks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listNotebooks_result typedOther = (listNotebooks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list103 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.Notebook>(_list103.size);
                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
                {
                  com.evernote.edam.type.Notebook _elem105;
                  _elem105 = new com.evernote.edam.type.Notebook();
                  _elem105.read(iprot);
                  this.success.add(_elem105);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.Notebook _iter106 : this.success)
          {
            _iter106.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotebook_args implements TBase<getNotebook_args, getNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNotebook_args.class, metaDataMap);
    }

    public getNotebook_args() {
    }

    public getNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotebook_args(getNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNotebook_args deepCopy() {
      return new getNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotebook_args)
        return this.equals((getNotebook_args)that);
      return false;
    }

    public boolean equals(getNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNotebook_args typedOther = (getNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotebook_result implements TBase<getNotebook_result, getNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNotebook_result.class, metaDataMap);
    }

    public getNotebook_result() {
    }

    public getNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotebook_result(getNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNotebook_result deepCopy() {
      return new getNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Notebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotebook_result)
        return this.equals((getNotebook_result)that);
      return false;
    }

    public boolean equals(getNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNotebook_result typedOther = (getNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDefaultNotebook_args implements TBase<getDefaultNotebook_args, getDefaultNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDefaultNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDefaultNotebook_args.class, metaDataMap);
    }

    public getDefaultNotebook_args() {
    }

    public getDefaultNotebook_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDefaultNotebook_args(getDefaultNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getDefaultNotebook_args deepCopy() {
      return new getDefaultNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDefaultNotebook_args)
        return this.equals((getDefaultNotebook_args)that);
      return false;
    }

    public boolean equals(getDefaultNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getDefaultNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDefaultNotebook_args typedOther = (getDefaultNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getDefaultNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDefaultNotebook_result implements TBase<getDefaultNotebook_result, getDefaultNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getDefaultNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getDefaultNotebook_result.class, metaDataMap);
    }

    public getDefaultNotebook_result() {
    }

    public getDefaultNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDefaultNotebook_result(getDefaultNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getDefaultNotebook_result deepCopy() {
      return new getDefaultNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Notebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDefaultNotebook_result)
        return this.equals((getDefaultNotebook_result)that);
      return false;
    }

    public boolean equals(getDefaultNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getDefaultNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDefaultNotebook_result typedOther = (getDefaultNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getDefaultNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNotebook_args implements TBase<createNotebook_args, createNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_FIELD_DESC = new TField("notebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Notebook notebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTEBOOK((short)2, "notebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTEBOOK
            return NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTEBOOK, new FieldMetaData("notebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createNotebook_args.class, metaDataMap);
    }

    public createNotebook_args() {
    }

    public createNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.Notebook notebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebook = notebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNotebook_args(createNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebook()) {
        this.notebook = new com.evernote.edam.type.Notebook(other.notebook);
      }
    }

    public createNotebook_args deepCopy() {
      return new createNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Notebook getNotebook() {
      return this.notebook;
    }

    public void setNotebook(com.evernote.edam.type.Notebook notebook) {
      this.notebook = notebook;
    }

    public void unsetNotebook() {
      this.notebook = null;
    }

    /** Returns true if field notebook is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebook() {
      return this.notebook != null;
    }

    public void setNotebookIsSet(boolean value) {
      if (!value) {
        this.notebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTEBOOK:
        if (value == null) {
          unsetNotebook();
        } else {
          setNotebook((com.evernote.edam.type.Notebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTEBOOK:
        return getNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTEBOOK:
        return isSetNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNotebook_args)
        return this.equals((createNotebook_args)that);
      return false;
    }

    public boolean equals(createNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebook = true && this.isSetNotebook();
      boolean that_present_notebook = true && that.isSetNotebook();
      if (this_present_notebook || that_present_notebook) {
        if (!(this_present_notebook && that_present_notebook))
          return false;
        if (!this.notebook.equals(that.notebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNotebook_args typedOther = (createNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotebook()).compareTo(typedOther.isSetNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebook()) {        lastComparison = TBaseHelper.compareTo(this.notebook, typedOther.notebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.notebook = new com.evernote.edam.type.Notebook();
              this.notebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebook != null) {
        oprot.writeFieldBegin(NOTEBOOK_FIELD_DESC);
        this.notebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebook:");
      if (this.notebook == null) {
        sb.append("null");
      } else {
        sb.append(this.notebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNotebook_result implements TBase<createNotebook_result, createNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createNotebook_result.class, metaDataMap);
    }

    public createNotebook_result() {
    }

    public createNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNotebook_result(createNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createNotebook_result deepCopy() {
      return new createNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Notebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNotebook_result)
        return this.equals((createNotebook_result)that);
      return false;
    }

    public boolean equals(createNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNotebook_result typedOther = (createNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotebook_args implements TBase<updateNotebook_args, updateNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_FIELD_DESC = new TField("notebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Notebook notebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTEBOOK((short)2, "notebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTEBOOK
            return NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTEBOOK, new FieldMetaData("notebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateNotebook_args.class, metaDataMap);
    }

    public updateNotebook_args() {
    }

    public updateNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.Notebook notebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebook = notebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotebook_args(updateNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebook()) {
        this.notebook = new com.evernote.edam.type.Notebook(other.notebook);
      }
    }

    public updateNotebook_args deepCopy() {
      return new updateNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Notebook getNotebook() {
      return this.notebook;
    }

    public void setNotebook(com.evernote.edam.type.Notebook notebook) {
      this.notebook = notebook;
    }

    public void unsetNotebook() {
      this.notebook = null;
    }

    /** Returns true if field notebook is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebook() {
      return this.notebook != null;
    }

    public void setNotebookIsSet(boolean value) {
      if (!value) {
        this.notebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTEBOOK:
        if (value == null) {
          unsetNotebook();
        } else {
          setNotebook((com.evernote.edam.type.Notebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTEBOOK:
        return getNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTEBOOK:
        return isSetNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotebook_args)
        return this.equals((updateNotebook_args)that);
      return false;
    }

    public boolean equals(updateNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebook = true && this.isSetNotebook();
      boolean that_present_notebook = true && that.isSetNotebook();
      if (this_present_notebook || that_present_notebook) {
        if (!(this_present_notebook && that_present_notebook))
          return false;
        if (!this.notebook.equals(that.notebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNotebook_args typedOther = (updateNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotebook()).compareTo(typedOther.isSetNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebook()) {        lastComparison = TBaseHelper.compareTo(this.notebook, typedOther.notebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.notebook = new com.evernote.edam.type.Notebook();
              this.notebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebook != null) {
        oprot.writeFieldBegin(NOTEBOOK_FIELD_DESC);
        this.notebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebook:");
      if (this.notebook == null) {
        sb.append("null");
      } else {
        sb.append(this.notebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotebook_result implements TBase<updateNotebook_result, updateNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateNotebook_result.class, metaDataMap);
    }

    public updateNotebook_result() {
    }

    public updateNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotebook_result(updateNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateNotebook_result deepCopy() {
      return new updateNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotebook_result)
        return this.equals((updateNotebook_result)that);
      return false;
    }

    public boolean equals(updateNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNotebook_result typedOther = (updateNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotebook_args implements TBase<expungeNotebook_args, expungeNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNotebook_args.class, metaDataMap);
    }

    public expungeNotebook_args() {
    }

    public expungeNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotebook_args(expungeNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeNotebook_args deepCopy() {
      return new expungeNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotebook_args)
        return this.equals((expungeNotebook_args)that);
      return false;
    }

    public boolean equals(expungeNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNotebook_args typedOther = (expungeNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotebook_result implements TBase<expungeNotebook_result, expungeNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNotebook_result.class, metaDataMap);
    }

    public expungeNotebook_result() {
    }

    public expungeNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotebook_result(expungeNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNotebook_result deepCopy() {
      return new expungeNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotebook_result)
        return this.equals((expungeNotebook_result)that);
      return false;
    }

    public boolean equals(expungeNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNotebook_result typedOther = (expungeNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTags_args implements TBase<listTags_args, listTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listTags_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listTags_args.class, metaDataMap);
    }

    public listTags_args() {
    }

    public listTags_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTags_args(listTags_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listTags_args deepCopy() {
      return new listTags_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTags_args)
        return this.equals((listTags_args)that);
      return false;
    }

    public boolean equals(listTags_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listTags_args typedOther = (listTags_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listTags_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTags_result implements TBase<listTags_result, listTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listTags_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private List<com.evernote.edam.type.Tag> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listTags_result.class, metaDataMap);
    }

    public listTags_result() {
    }

    public listTags_result(
      List<com.evernote.edam.type.Tag> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTags_result(listTags_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.Tag> __this__success = new ArrayList<com.evernote.edam.type.Tag>();
        for (com.evernote.edam.type.Tag other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listTags_result deepCopy() {
      return new listTags_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.Tag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.Tag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.Tag>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.Tag> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.Tag> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.Tag>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTags_result)
        return this.equals((listTags_result)that);
      return false;
    }

    public boolean equals(listTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listTags_result typedOther = (listTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list107 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  com.evernote.edam.type.Tag _elem109;
                  _elem109 = new com.evernote.edam.type.Tag();
                  _elem109.read(iprot);
                  this.success.add(_elem109);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.Tag _iter110 : this.success)
          {
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTagsByNotebook_args implements TBase<listTagsByNotebook_args, listTagsByNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listTagsByNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_GUID_FIELD_DESC = new TField("notebookGuid", TType.STRING, (short)2);

    private String authenticationToken;
    private String notebookGuid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTEBOOK_GUID((short)2, "notebookGuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTEBOOK_GUID
            return NOTEBOOK_GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTEBOOK_GUID, new FieldMetaData("notebookGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listTagsByNotebook_args.class, metaDataMap);
    }

    public listTagsByNotebook_args() {
    }

    public listTagsByNotebook_args(
      String authenticationToken,
      String notebookGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebookGuid = notebookGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTagsByNotebook_args(listTagsByNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebookGuid()) {
        this.notebookGuid = other.notebookGuid;
      }
    }

    public listTagsByNotebook_args deepCopy() {
      return new listTagsByNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebookGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNotebookGuid() {
      return this.notebookGuid;
    }

    public void setNotebookGuid(String notebookGuid) {
      this.notebookGuid = notebookGuid;
    }

    public void unsetNotebookGuid() {
      this.notebookGuid = null;
    }

    /** Returns true if field notebookGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebookGuid() {
      return this.notebookGuid != null;
    }

    public void setNotebookGuidIsSet(boolean value) {
      if (!value) {
        this.notebookGuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTEBOOK_GUID:
        if (value == null) {
          unsetNotebookGuid();
        } else {
          setNotebookGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTEBOOK_GUID:
        return getNotebookGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTEBOOK_GUID:
        return isSetNotebookGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTagsByNotebook_args)
        return this.equals((listTagsByNotebook_args)that);
      return false;
    }

    public boolean equals(listTagsByNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebookGuid = true && this.isSetNotebookGuid();
      boolean that_present_notebookGuid = true && that.isSetNotebookGuid();
      if (this_present_notebookGuid || that_present_notebookGuid) {
        if (!(this_present_notebookGuid && that_present_notebookGuid))
          return false;
        if (!this.notebookGuid.equals(that.notebookGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listTagsByNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listTagsByNotebook_args typedOther = (listTagsByNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotebookGuid()).compareTo(typedOther.isSetNotebookGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebookGuid()) {        lastComparison = TBaseHelper.compareTo(this.notebookGuid, typedOther.notebookGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK_GUID
            if (field.type == TType.STRING) {
              this.notebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebookGuid != null) {
        oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
        oprot.writeString(this.notebookGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listTagsByNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebookGuid:");
      if (this.notebookGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.notebookGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTagsByNotebook_result implements TBase<listTagsByNotebook_result, listTagsByNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listTagsByNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private List<com.evernote.edam.type.Tag> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listTagsByNotebook_result.class, metaDataMap);
    }

    public listTagsByNotebook_result() {
    }

    public listTagsByNotebook_result(
      List<com.evernote.edam.type.Tag> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTagsByNotebook_result(listTagsByNotebook_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.Tag> __this__success = new ArrayList<com.evernote.edam.type.Tag>();
        for (com.evernote.edam.type.Tag other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public listTagsByNotebook_result deepCopy() {
      return new listTagsByNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.Tag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.Tag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.Tag>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.Tag> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.Tag> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.Tag>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTagsByNotebook_result)
        return this.equals((listTagsByNotebook_result)that);
      return false;
    }

    public boolean equals(listTagsByNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listTagsByNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listTagsByNotebook_result typedOther = (listTagsByNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list111 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list111.size);
                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
                {
                  com.evernote.edam.type.Tag _elem113;
                  _elem113 = new com.evernote.edam.type.Tag();
                  _elem113.read(iprot);
                  this.success.add(_elem113);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.Tag _iter114 : this.success)
          {
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listTagsByNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTag_args implements TBase<getTag_args, getTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTag_args.class, metaDataMap);
    }

    public getTag_args() {
    }

    public getTag_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTag_args(getTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getTag_args deepCopy() {
      return new getTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTag_args)
        return this.equals((getTag_args)that);
      return false;
    }

    public boolean equals(getTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTag_args typedOther = (getTag_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTag_result implements TBase<getTag_result, getTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Tag success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getTag_result.class, metaDataMap);
    }

    public getTag_result() {
    }

    public getTag_result(
      com.evernote.edam.type.Tag success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTag_result(getTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Tag(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getTag_result deepCopy() {
      return new getTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Tag getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Tag success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Tag)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTag_result)
        return this.equals((getTag_result)that);
      return false;
    }

    public boolean equals(getTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTag_result typedOther = (getTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Tag();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createTag_args implements TBase<createTag_args, createTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField TAG_FIELD_DESC = new TField("tag", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Tag tag;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      TAG((short)2, "tag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // TAG
            return TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TAG, new FieldMetaData("tag", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createTag_args.class, metaDataMap);
    }

    public createTag_args() {
    }

    public createTag_args(
      String authenticationToken,
      com.evernote.edam.type.Tag tag)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTag_args(createTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetTag()) {
        this.tag = new com.evernote.edam.type.Tag(other.tag);
      }
    }

    public createTag_args deepCopy() {
      return new createTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.tag = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Tag getTag() {
      return this.tag;
    }

    public void setTag(com.evernote.edam.type.Tag tag) {
      this.tag = tag;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been asigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((com.evernote.edam.type.Tag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case TAG:
        return getTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case TAG:
        return isSetTag();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTag_args)
        return this.equals((createTag_args)that);
      return false;
    }

    public boolean equals(createTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createTag_args typedOther = (createTag_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {        lastComparison = TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG
            if (field.type == TType.STRUCT) {
              this.tag = new com.evernote.edam.type.Tag();
              this.tag.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createTag_result implements TBase<createTag_result, createTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Tag success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createTag_result.class, metaDataMap);
    }

    public createTag_result() {
    }

    public createTag_result(
      com.evernote.edam.type.Tag success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTag_result(createTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Tag(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public createTag_result deepCopy() {
      return new createTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Tag getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Tag success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Tag)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTag_result)
        return this.equals((createTag_result)that);
      return false;
    }

    public boolean equals(createTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createTag_result typedOther = (createTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Tag();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTag_args implements TBase<updateTag_args, updateTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField TAG_FIELD_DESC = new TField("tag", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Tag tag;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      TAG((short)2, "tag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // TAG
            return TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TAG, new FieldMetaData("tag", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateTag_args.class, metaDataMap);
    }

    public updateTag_args() {
    }

    public updateTag_args(
      String authenticationToken,
      com.evernote.edam.type.Tag tag)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTag_args(updateTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetTag()) {
        this.tag = new com.evernote.edam.type.Tag(other.tag);
      }
    }

    public updateTag_args deepCopy() {
      return new updateTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.tag = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Tag getTag() {
      return this.tag;
    }

    public void setTag(com.evernote.edam.type.Tag tag) {
      this.tag = tag;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been asigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((com.evernote.edam.type.Tag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case TAG:
        return getTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case TAG:
        return isSetTag();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTag_args)
        return this.equals((updateTag_args)that);
      return false;
    }

    public boolean equals(updateTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTag_args typedOther = (updateTag_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {        lastComparison = TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG
            if (field.type == TType.STRUCT) {
              this.tag = new com.evernote.edam.type.Tag();
              this.tag.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTag_result implements TBase<updateTag_result, updateTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateTag_result.class, metaDataMap);
    }

    public updateTag_result() {
    }

    public updateTag_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTag_result(updateTag_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateTag_result deepCopy() {
      return new updateTag_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTag_result)
        return this.equals((updateTag_result)that);
      return false;
    }

    public boolean equals(updateTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTag_result typedOther = (updateTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class untagAll_args implements TBase<untagAll_args, untagAll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("untagAll_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(untagAll_args.class, metaDataMap);
    }

    public untagAll_args() {
    }

    public untagAll_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untagAll_args(untagAll_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public untagAll_args deepCopy() {
      return new untagAll_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untagAll_args)
        return this.equals((untagAll_args)that);
      return false;
    }

    public boolean equals(untagAll_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(untagAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      untagAll_args typedOther = (untagAll_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("untagAll_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class untagAll_result implements TBase<untagAll_result, untagAll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("untagAll_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(untagAll_result.class, metaDataMap);
    }

    public untagAll_result() {
    }

    public untagAll_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untagAll_result(untagAll_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public untagAll_result deepCopy() {
      return new untagAll_result(this);
    }

    public void clear() {
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untagAll_result)
        return this.equals((untagAll_result)that);
      return false;
    }

    public boolean equals(untagAll_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(untagAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      untagAll_result typedOther = (untagAll_result)other;

      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("untagAll_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeTag_args implements TBase<expungeTag_args, expungeTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeTag_args.class, metaDataMap);
    }

    public expungeTag_args() {
    }

    public expungeTag_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeTag_args(expungeTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeTag_args deepCopy() {
      return new expungeTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeTag_args)
        return this.equals((expungeTag_args)that);
      return false;
    }

    public boolean equals(expungeTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeTag_args typedOther = (expungeTag_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeTag_result implements TBase<expungeTag_result, expungeTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeTag_result.class, metaDataMap);
    }

    public expungeTag_result() {
    }

    public expungeTag_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeTag_result(expungeTag_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeTag_result deepCopy() {
      return new expungeTag_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeTag_result)
        return this.equals((expungeTag_result)that);
      return false;
    }

    public boolean equals(expungeTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeTag_result typedOther = (expungeTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSearches_args implements TBase<listSearches_args, listSearches_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listSearches_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listSearches_args.class, metaDataMap);
    }

    public listSearches_args() {
    }

    public listSearches_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSearches_args(listSearches_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listSearches_args deepCopy() {
      return new listSearches_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSearches_args)
        return this.equals((listSearches_args)that);
      return false;
    }

    public boolean equals(listSearches_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listSearches_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSearches_args typedOther = (listSearches_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listSearches_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSearches_result implements TBase<listSearches_result, listSearches_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listSearches_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private List<com.evernote.edam.type.SavedSearch> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.SavedSearch.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listSearches_result.class, metaDataMap);
    }

    public listSearches_result() {
    }

    public listSearches_result(
      List<com.evernote.edam.type.SavedSearch> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSearches_result(listSearches_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.SavedSearch> __this__success = new ArrayList<com.evernote.edam.type.SavedSearch>();
        for (com.evernote.edam.type.SavedSearch other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.SavedSearch(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listSearches_result deepCopy() {
      return new listSearches_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.SavedSearch> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.SavedSearch elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.SavedSearch>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.SavedSearch> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.SavedSearch> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.SavedSearch>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSearches_result)
        return this.equals((listSearches_result)that);
      return false;
    }

    public boolean equals(listSearches_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listSearches_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSearches_result typedOther = (listSearches_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list115 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.SavedSearch>(_list115.size);
                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                {
                  com.evernote.edam.type.SavedSearch _elem117;
                  _elem117 = new com.evernote.edam.type.SavedSearch();
                  _elem117.read(iprot);
                  this.success.add(_elem117);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.SavedSearch _iter118 : this.success)
          {
            _iter118.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listSearches_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearch_args implements TBase<getSearch_args, getSearch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSearch_args.class, metaDataMap);
    }

    public getSearch_args() {
    }

    public getSearch_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearch_args(getSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getSearch_args deepCopy() {
      return new getSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearch_args)
        return this.equals((getSearch_args)that);
      return false;
    }

    public boolean equals(getSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSearch_args typedOther = (getSearch_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearch_result implements TBase<getSearch_result, getSearch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SavedSearch success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SavedSearch.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSearch_result.class, metaDataMap);
    }

    public getSearch_result() {
    }

    public getSearch_result(
      com.evernote.edam.type.SavedSearch success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearch_result(getSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SavedSearch(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getSearch_result deepCopy() {
      return new getSearch_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.SavedSearch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SavedSearch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.SavedSearch)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearch_result)
        return this.equals((getSearch_result)that);
      return false;
    }

    public boolean equals(getSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSearch_result typedOther = (getSearch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SavedSearch();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSearch_args implements TBase<createSearch_args, createSearch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SEARCH_FIELD_DESC = new TField("search", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SavedSearch search;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      SEARCH((short)2, "search");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // SEARCH
            return SEARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SEARCH, new FieldMetaData("search", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SavedSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createSearch_args.class, metaDataMap);
    }

    public createSearch_args() {
    }

    public createSearch_args(
      String authenticationToken,
      com.evernote.edam.type.SavedSearch search)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.search = search;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSearch_args(createSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSearch()) {
        this.search = new com.evernote.edam.type.SavedSearch(other.search);
      }
    }

    public createSearch_args deepCopy() {
      return new createSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.search = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SavedSearch getSearch() {
      return this.search;
    }

    public void setSearch(com.evernote.edam.type.SavedSearch search) {
      this.search = search;
    }

    public void unsetSearch() {
      this.search = null;
    }

    /** Returns true if field search is set (has been asigned a value) and false otherwise */
    public boolean isSetSearch() {
      return this.search != null;
    }

    public void setSearchIsSet(boolean value) {
      if (!value) {
        this.search = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case SEARCH:
        if (value == null) {
          unsetSearch();
        } else {
          setSearch((com.evernote.edam.type.SavedSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case SEARCH:
        return getSearch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case SEARCH:
        return isSetSearch();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSearch_args)
        return this.equals((createSearch_args)that);
      return false;
    }

    public boolean equals(createSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_search = true && this.isSetSearch();
      boolean that_present_search = true && that.isSetSearch();
      if (this_present_search || that_present_search) {
        if (!(this_present_search && that_present_search))
          return false;
        if (!this.search.equals(that.search))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSearch_args typedOther = (createSearch_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearch()).compareTo(typedOther.isSetSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearch()) {        lastComparison = TBaseHelper.compareTo(this.search, typedOther.search);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SEARCH
            if (field.type == TType.STRUCT) {
              this.search = new com.evernote.edam.type.SavedSearch();
              this.search.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.search != null) {
        oprot.writeFieldBegin(SEARCH_FIELD_DESC);
        this.search.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("search:");
      if (this.search == null) {
        sb.append("null");
      } else {
        sb.append(this.search);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSearch_result implements TBase<createSearch_result, createSearch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.SavedSearch success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SavedSearch.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createSearch_result.class, metaDataMap);
    }

    public createSearch_result() {
    }

    public createSearch_result(
      com.evernote.edam.type.SavedSearch success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSearch_result(createSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SavedSearch(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createSearch_result deepCopy() {
      return new createSearch_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SavedSearch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SavedSearch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.SavedSearch)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSearch_result)
        return this.equals((createSearch_result)that);
      return false;
    }

    public boolean equals(createSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSearch_result typedOther = (createSearch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SavedSearch();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSearch_args implements TBase<updateSearch_args, updateSearch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SEARCH_FIELD_DESC = new TField("search", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SavedSearch search;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      SEARCH((short)2, "search");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // SEARCH
            return SEARCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SEARCH, new FieldMetaData("search", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SavedSearch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateSearch_args.class, metaDataMap);
    }

    public updateSearch_args() {
    }

    public updateSearch_args(
      String authenticationToken,
      com.evernote.edam.type.SavedSearch search)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.search = search;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSearch_args(updateSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSearch()) {
        this.search = new com.evernote.edam.type.SavedSearch(other.search);
      }
    }

    public updateSearch_args deepCopy() {
      return new updateSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.search = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SavedSearch getSearch() {
      return this.search;
    }

    public void setSearch(com.evernote.edam.type.SavedSearch search) {
      this.search = search;
    }

    public void unsetSearch() {
      this.search = null;
    }

    /** Returns true if field search is set (has been asigned a value) and false otherwise */
    public boolean isSetSearch() {
      return this.search != null;
    }

    public void setSearchIsSet(boolean value) {
      if (!value) {
        this.search = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case SEARCH:
        if (value == null) {
          unsetSearch();
        } else {
          setSearch((com.evernote.edam.type.SavedSearch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case SEARCH:
        return getSearch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case SEARCH:
        return isSetSearch();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSearch_args)
        return this.equals((updateSearch_args)that);
      return false;
    }

    public boolean equals(updateSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_search = true && this.isSetSearch();
      boolean that_present_search = true && that.isSetSearch();
      if (this_present_search || that_present_search) {
        if (!(this_present_search && that_present_search))
          return false;
        if (!this.search.equals(that.search))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSearch_args typedOther = (updateSearch_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearch()).compareTo(typedOther.isSetSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearch()) {        lastComparison = TBaseHelper.compareTo(this.search, typedOther.search);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SEARCH
            if (field.type == TType.STRUCT) {
              this.search = new com.evernote.edam.type.SavedSearch();
              this.search.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.search != null) {
        oprot.writeFieldBegin(SEARCH_FIELD_DESC);
        this.search.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("search:");
      if (this.search == null) {
        sb.append("null");
      } else {
        sb.append(this.search);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSearch_result implements TBase<updateSearch_result, updateSearch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateSearch_result.class, metaDataMap);
    }

    public updateSearch_result() {
    }

    public updateSearch_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSearch_result(updateSearch_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateSearch_result deepCopy() {
      return new updateSearch_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSearch_result)
        return this.equals((updateSearch_result)that);
      return false;
    }

    public boolean equals(updateSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSearch_result typedOther = (updateSearch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSearch_args implements TBase<expungeSearch_args, expungeSearch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeSearch_args.class, metaDataMap);
    }

    public expungeSearch_args() {
    }

    public expungeSearch_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSearch_args(expungeSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeSearch_args deepCopy() {
      return new expungeSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSearch_args)
        return this.equals((expungeSearch_args)that);
      return false;
    }

    public boolean equals(expungeSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeSearch_args typedOther = (expungeSearch_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSearch_result implements TBase<expungeSearch_result, expungeSearch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeSearch_result.class, metaDataMap);
    }

    public expungeSearch_result() {
    }

    public expungeSearch_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSearch_result(expungeSearch_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeSearch_result deepCopy() {
      return new expungeSearch_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSearch_result)
        return this.equals((expungeSearch_result)that);
      return false;
    }

    public boolean equals(expungeSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeSearch_result typedOther = (expungeSearch_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotes_args implements TBase<findNotes_args, findNotes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)3);
    private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)4);

    private String authenticationToken;
    private NoteFilter filter;
    private int offset;
    private int maxNotes;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      FILTER((short)2, "filter"),
      OFFSET((short)3, "offset"),
      MAX_NOTES((short)4, "maxNotes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // OFFSET
            return OFFSET;
          case 4: // MAX_NOTES
            return MAX_NOTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __MAXNOTES_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteFilter.class)));
      tmpMap.put(_Fields.OFFSET, new FieldMetaData("offset", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.MAX_NOTES, new FieldMetaData("maxNotes", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNotes_args.class, metaDataMap);
    }

    public findNotes_args() {
    }

    public findNotes_args(
      String authenticationToken,
      NoteFilter filter,
      int offset,
      int maxNotes)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.offset = offset;
      setOffsetIsSet(true);
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotes_args(findNotes_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.offset = other.offset;
      this.maxNotes = other.maxNotes;
    }

    public findNotes_args deepCopy() {
      return new findNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setMaxNotesIsSet(false);
      this.maxNotes = 0;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_vector[__OFFSET_ISSET_ID] = false;
    }

    /** Returns true if field offset is set (has been asigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_vector[__OFFSET_ISSET_ID];
    }

    public void setOffsetIsSet(boolean value) {
      __isset_vector[__OFFSET_ISSET_ID] = value;
    }

    public int getMaxNotes() {
      return this.maxNotes;
    }

    public void setMaxNotes(int maxNotes) {
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    public void unsetMaxNotes() {
      __isset_vector[__MAXNOTES_ISSET_ID] = false;
    }

    /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxNotes() {
      return __isset_vector[__MAXNOTES_ISSET_ID];
    }

    public void setMaxNotesIsSet(boolean value) {
      __isset_vector[__MAXNOTES_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((NoteFilter)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case MAX_NOTES:
        if (value == null) {
          unsetMaxNotes();
        } else {
          setMaxNotes((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case FILTER:
        return getFilter();

      case OFFSET:
        return new Integer(getOffset());

      case MAX_NOTES:
        return new Integer(getMaxNotes());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case FILTER:
        return isSetFilter();
      case OFFSET:
        return isSetOffset();
      case MAX_NOTES:
        return isSetMaxNotes();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotes_args)
        return this.equals((findNotes_args)that);
      return false;
    }

    public boolean equals(findNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_maxNotes = true;
      boolean that_present_maxNotes = true;
      if (this_present_maxNotes || that_present_maxNotes) {
        if (!(this_present_maxNotes && that_present_maxNotes))
          return false;
        if (this.maxNotes != that.maxNotes)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNotes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNotes_args typedOther = (findNotes_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {        lastComparison = TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {        lastComparison = TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxNotes()).compareTo(typedOther.isSetMaxNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxNotes()) {        lastComparison = TBaseHelper.compareTo(this.maxNotes, typedOther.maxNotes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OFFSET
            if (field.type == TType.I32) {
              this.offset = iprot.readI32();
              setOffsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_NOTES
            if (field.type == TType.I32) {
              this.maxNotes = iprot.readI32();
              setMaxNotesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
      oprot.writeI32(this.maxNotes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxNotes:");
      sb.append(this.maxNotes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotes_result implements TBase<findNotes_result, findNotes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NoteList success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteList.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNotes_result.class, metaDataMap);
    }

    public findNotes_result() {
    }

    public findNotes_result(
      NoteList success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotes_result(findNotes_result other) {
      if (other.isSetSuccess()) {
        this.success = new NoteList(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNotes_result deepCopy() {
      return new findNotes_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NoteList getSuccess() {
      return this.success;
    }

    public void setSuccess(NoteList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NoteList)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotes_result)
        return this.equals((findNotes_result)that);
      return false;
    }

    public boolean equals(findNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNotes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNotes_result typedOther = (findNotes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NoteList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNotes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteOffset_args implements TBase<findNoteOffset_args, findNoteOffset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteOffset_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)3);

    private String authenticationToken;
    private NoteFilter filter;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      FILTER((short)2, "filter"),
      GUID((short)3, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteFilter.class)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNoteOffset_args.class, metaDataMap);
    }

    public findNoteOffset_args() {
    }

    public findNoteOffset_args(
      String authenticationToken,
      NoteFilter filter,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteOffset_args(findNoteOffset_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public findNoteOffset_args deepCopy() {
      return new findNoteOffset_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((NoteFilter)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case FILTER:
        return getFilter();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case FILTER:
        return isSetFilter();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteOffset_args)
        return this.equals((findNoteOffset_args)that);
      return false;
    }

    public boolean equals(findNoteOffset_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoteOffset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoteOffset_args typedOther = (findNoteOffset_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {        lastComparison = TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNoteOffset_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteOffset_result implements TBase<findNoteOffset_result, findNoteOffset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteOffset_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNoteOffset_result.class, metaDataMap);
    }

    public findNoteOffset_result() {
    }

    public findNoteOffset_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteOffset_result(findNoteOffset_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNoteOffset_result deepCopy() {
      return new findNoteOffset_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteOffset_result)
        return this.equals((findNoteOffset_result)that);
      return false;
    }

    public boolean equals(findNoteOffset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoteOffset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoteOffset_result typedOther = (findNoteOffset_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNoteOffset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotesMetadata_args implements TBase<findNotesMetadata_args, findNotesMetadata_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotesMetadata_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)3);
    private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)4);
    private static final TField RESULT_SPEC_FIELD_DESC = new TField("resultSpec", TType.STRUCT, (short)5);

    private String authenticationToken;
    private NoteFilter filter;
    private int offset;
    private int maxNotes;
    private NotesMetadataResultSpec resultSpec;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      FILTER((short)2, "filter"),
      OFFSET((short)3, "offset"),
      MAX_NOTES((short)4, "maxNotes"),
      RESULT_SPEC((short)5, "resultSpec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // OFFSET
            return OFFSET;
          case 4: // MAX_NOTES
            return MAX_NOTES;
          case 5: // RESULT_SPEC
            return RESULT_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __MAXNOTES_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteFilter.class)));
      tmpMap.put(_Fields.OFFSET, new FieldMetaData("offset", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.MAX_NOTES, new FieldMetaData("maxNotes", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.RESULT_SPEC, new FieldMetaData("resultSpec", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NotesMetadataResultSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNotesMetadata_args.class, metaDataMap);
    }

    public findNotesMetadata_args() {
    }

    public findNotesMetadata_args(
      String authenticationToken,
      NoteFilter filter,
      int offset,
      int maxNotes,
      NotesMetadataResultSpec resultSpec)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.offset = offset;
      setOffsetIsSet(true);
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
      this.resultSpec = resultSpec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotesMetadata_args(findNotesMetadata_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.offset = other.offset;
      this.maxNotes = other.maxNotes;
      if (other.isSetResultSpec()) {
        this.resultSpec = new NotesMetadataResultSpec(other.resultSpec);
      }
    }

    public findNotesMetadata_args deepCopy() {
      return new findNotesMetadata_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setMaxNotesIsSet(false);
      this.maxNotes = 0;
      this.resultSpec = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_vector[__OFFSET_ISSET_ID] = false;
    }

    /** Returns true if field offset is set (has been asigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_vector[__OFFSET_ISSET_ID];
    }

    public void setOffsetIsSet(boolean value) {
      __isset_vector[__OFFSET_ISSET_ID] = value;
    }

    public int getMaxNotes() {
      return this.maxNotes;
    }

    public void setMaxNotes(int maxNotes) {
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    public void unsetMaxNotes() {
      __isset_vector[__MAXNOTES_ISSET_ID] = false;
    }

    /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxNotes() {
      return __isset_vector[__MAXNOTES_ISSET_ID];
    }

    public void setMaxNotesIsSet(boolean value) {
      __isset_vector[__MAXNOTES_ISSET_ID] = value;
    }

    public NotesMetadataResultSpec getResultSpec() {
      return this.resultSpec;
    }

    public void setResultSpec(NotesMetadataResultSpec resultSpec) {
      this.resultSpec = resultSpec;
    }

    public void unsetResultSpec() {
      this.resultSpec = null;
    }

    /** Returns true if field resultSpec is set (has been asigned a value) and false otherwise */
    public boolean isSetResultSpec() {
      return this.resultSpec != null;
    }

    public void setResultSpecIsSet(boolean value) {
      if (!value) {
        this.resultSpec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((NoteFilter)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case MAX_NOTES:
        if (value == null) {
          unsetMaxNotes();
        } else {
          setMaxNotes((Integer)value);
        }
        break;

      case RESULT_SPEC:
        if (value == null) {
          unsetResultSpec();
        } else {
          setResultSpec((NotesMetadataResultSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case FILTER:
        return getFilter();

      case OFFSET:
        return new Integer(getOffset());

      case MAX_NOTES:
        return new Integer(getMaxNotes());

      case RESULT_SPEC:
        return getResultSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case FILTER:
        return isSetFilter();
      case OFFSET:
        return isSetOffset();
      case MAX_NOTES:
        return isSetMaxNotes();
      case RESULT_SPEC:
        return isSetResultSpec();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotesMetadata_args)
        return this.equals((findNotesMetadata_args)that);
      return false;
    }

    public boolean equals(findNotesMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_maxNotes = true;
      boolean that_present_maxNotes = true;
      if (this_present_maxNotes || that_present_maxNotes) {
        if (!(this_present_maxNotes && that_present_maxNotes))
          return false;
        if (this.maxNotes != that.maxNotes)
          return false;
      }

      boolean this_present_resultSpec = true && this.isSetResultSpec();
      boolean that_present_resultSpec = true && that.isSetResultSpec();
      if (this_present_resultSpec || that_present_resultSpec) {
        if (!(this_present_resultSpec && that_present_resultSpec))
          return false;
        if (!this.resultSpec.equals(that.resultSpec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNotesMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNotesMetadata_args typedOther = (findNotesMetadata_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {        lastComparison = TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {        lastComparison = TBaseHelper.compareTo(this.offset, typedOther.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxNotes()).compareTo(typedOther.isSetMaxNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxNotes()) {        lastComparison = TBaseHelper.compareTo(this.maxNotes, typedOther.maxNotes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultSpec()).compareTo(typedOther.isSetResultSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultSpec()) {        lastComparison = TBaseHelper.compareTo(this.resultSpec, typedOther.resultSpec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OFFSET
            if (field.type == TType.I32) {
              this.offset = iprot.readI32();
              setOffsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_NOTES
            if (field.type == TType.I32) {
              this.maxNotes = iprot.readI32();
              setMaxNotesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // RESULT_SPEC
            if (field.type == TType.STRUCT) {
              this.resultSpec = new NotesMetadataResultSpec();
              this.resultSpec.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
      oprot.writeI32(this.maxNotes);
      oprot.writeFieldEnd();
      if (this.resultSpec != null) {
        oprot.writeFieldBegin(RESULT_SPEC_FIELD_DESC);
        this.resultSpec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNotesMetadata_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxNotes:");
      sb.append(this.maxNotes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultSpec:");
      if (this.resultSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.resultSpec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotesMetadata_result implements TBase<findNotesMetadata_result, findNotesMetadata_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotesMetadata_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NotesMetadataList success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NotesMetadataList.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNotesMetadata_result.class, metaDataMap);
    }

    public findNotesMetadata_result() {
    }

    public findNotesMetadata_result(
      NotesMetadataList success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotesMetadata_result(findNotesMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new NotesMetadataList(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNotesMetadata_result deepCopy() {
      return new findNotesMetadata_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NotesMetadataList getSuccess() {
      return this.success;
    }

    public void setSuccess(NotesMetadataList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NotesMetadataList)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotesMetadata_result)
        return this.equals((findNotesMetadata_result)that);
      return false;
    }

    public boolean equals(findNotesMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNotesMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNotesMetadata_result typedOther = (findNotesMetadata_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NotesMetadataList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNotesMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteCounts_args implements TBase<findNoteCounts_args, findNoteCounts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteCounts_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField WITH_TRASH_FIELD_DESC = new TField("withTrash", TType.BOOL, (short)3);

    private String authenticationToken;
    private NoteFilter filter;
    private boolean withTrash;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      FILTER((short)2, "filter"),
      WITH_TRASH((short)3, "withTrash");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // FILTER
            return FILTER;
          case 3: // WITH_TRASH
            return WITH_TRASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WITHTRASH_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.FILTER, new FieldMetaData("filter", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteFilter.class)));
      tmpMap.put(_Fields.WITH_TRASH, new FieldMetaData("withTrash", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNoteCounts_args.class, metaDataMap);
    }

    public findNoteCounts_args() {
    }

    public findNoteCounts_args(
      String authenticationToken,
      NoteFilter filter,
      boolean withTrash)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.withTrash = withTrash;
      setWithTrashIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteCounts_args(findNoteCounts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.withTrash = other.withTrash;
    }

    public findNoteCounts_args deepCopy() {
      return new findNoteCounts_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setWithTrashIsSet(false);
      this.withTrash = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public boolean isWithTrash() {
      return this.withTrash;
    }

    public void setWithTrash(boolean withTrash) {
      this.withTrash = withTrash;
      setWithTrashIsSet(true);
    }

    public void unsetWithTrash() {
      __isset_vector[__WITHTRASH_ISSET_ID] = false;
    }

    /** Returns true if field withTrash is set (has been asigned a value) and false otherwise */
    public boolean isSetWithTrash() {
      return __isset_vector[__WITHTRASH_ISSET_ID];
    }

    public void setWithTrashIsSet(boolean value) {
      __isset_vector[__WITHTRASH_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((NoteFilter)value);
        }
        break;

      case WITH_TRASH:
        if (value == null) {
          unsetWithTrash();
        } else {
          setWithTrash((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case FILTER:
        return getFilter();

      case WITH_TRASH:
        return new Boolean(isWithTrash());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case FILTER:
        return isSetFilter();
      case WITH_TRASH:
        return isSetWithTrash();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteCounts_args)
        return this.equals((findNoteCounts_args)that);
      return false;
    }

    public boolean equals(findNoteCounts_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_withTrash = true;
      boolean that_present_withTrash = true;
      if (this_present_withTrash || that_present_withTrash) {
        if (!(this_present_withTrash && that_present_withTrash))
          return false;
        if (this.withTrash != that.withTrash)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoteCounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoteCounts_args typedOther = (findNoteCounts_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {        lastComparison = TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithTrash()).compareTo(typedOther.isSetWithTrash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithTrash()) {        lastComparison = TBaseHelper.compareTo(this.withTrash, typedOther.withTrash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_TRASH
            if (field.type == TType.BOOL) {
              this.withTrash = iprot.readBool();
              setWithTrashIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_TRASH_FIELD_DESC);
      oprot.writeBool(this.withTrash);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNoteCounts_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withTrash:");
      sb.append(this.withTrash);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteCounts_result implements TBase<findNoteCounts_result, findNoteCounts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteCounts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NoteCollectionCounts success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteCollectionCounts.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(findNoteCounts_result.class, metaDataMap);
    }

    public findNoteCounts_result() {
    }

    public findNoteCounts_result(
      NoteCollectionCounts success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteCounts_result(findNoteCounts_result other) {
      if (other.isSetSuccess()) {
        this.success = new NoteCollectionCounts(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNoteCounts_result deepCopy() {
      return new findNoteCounts_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NoteCollectionCounts getSuccess() {
      return this.success;
    }

    public void setSuccess(NoteCollectionCounts success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NoteCollectionCounts)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteCounts_result)
        return this.equals((findNoteCounts_result)that);
      return false;
    }

    public boolean equals(findNoteCounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(findNoteCounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findNoteCounts_result typedOther = (findNoteCounts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NoteCollectionCounts();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("findNoteCounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNote_args implements TBase<getNote_args, getNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField WITH_CONTENT_FIELD_DESC = new TField("withContent", TType.BOOL, (short)3);
    private static final TField WITH_RESOURCES_DATA_FIELD_DESC = new TField("withResourcesData", TType.BOOL, (short)4);
    private static final TField WITH_RESOURCES_RECOGNITION_FIELD_DESC = new TField("withResourcesRecognition", TType.BOOL, (short)5);
    private static final TField WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC = new TField("withResourcesAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String guid;
    private boolean withContent;
    private boolean withResourcesData;
    private boolean withResourcesRecognition;
    private boolean withResourcesAlternateData;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      WITH_CONTENT((short)3, "withContent"),
      WITH_RESOURCES_DATA((short)4, "withResourcesData"),
      WITH_RESOURCES_RECOGNITION((short)5, "withResourcesRecognition"),
      WITH_RESOURCES_ALTERNATE_DATA((short)6, "withResourcesAlternateData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // WITH_CONTENT
            return WITH_CONTENT;
          case 4: // WITH_RESOURCES_DATA
            return WITH_RESOURCES_DATA;
          case 5: // WITH_RESOURCES_RECOGNITION
            return WITH_RESOURCES_RECOGNITION;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            return WITH_RESOURCES_ALTERNATE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WITHCONTENT_ISSET_ID = 0;
    private static final int __WITHRESOURCESDATA_ISSET_ID = 1;
    private static final int __WITHRESOURCESRECOGNITION_ISSET_ID = 2;
    private static final int __WITHRESOURCESALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.WITH_CONTENT, new FieldMetaData("withContent", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RESOURCES_DATA, new FieldMetaData("withResourcesData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RESOURCES_RECOGNITION, new FieldMetaData("withResourcesRecognition", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RESOURCES_ALTERNATE_DATA, new FieldMetaData("withResourcesAlternateData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNote_args.class, metaDataMap);
    }

    public getNote_args() {
    }

    public getNote_args(
      String authenticationToken,
      String guid,
      boolean withContent,
      boolean withResourcesData,
      boolean withResourcesRecognition,
      boolean withResourcesAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.withContent = withContent;
      setWithContentIsSet(true);
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_args(getNote_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.withContent = other.withContent;
      this.withResourcesData = other.withResourcesData;
      this.withResourcesRecognition = other.withResourcesRecognition;
      this.withResourcesAlternateData = other.withResourcesAlternateData;
    }

    public getNote_args deepCopy() {
      return new getNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setWithContentIsSet(false);
      this.withContent = false;
      setWithResourcesDataIsSet(false);
      this.withResourcesData = false;
      setWithResourcesRecognitionIsSet(false);
      this.withResourcesRecognition = false;
      setWithResourcesAlternateDataIsSet(false);
      this.withResourcesAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isWithContent() {
      return this.withContent;
    }

    public void setWithContent(boolean withContent) {
      this.withContent = withContent;
      setWithContentIsSet(true);
    }

    public void unsetWithContent() {
      __isset_vector[__WITHCONTENT_ISSET_ID] = false;
    }

    /** Returns true if field withContent is set (has been asigned a value) and false otherwise */
    public boolean isSetWithContent() {
      return __isset_vector[__WITHCONTENT_ISSET_ID];
    }

    public void setWithContentIsSet(boolean value) {
      __isset_vector[__WITHCONTENT_ISSET_ID] = value;
    }

    public boolean isWithResourcesData() {
      return this.withResourcesData;
    }

    public void setWithResourcesData(boolean withResourcesData) {
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
    }

    public void unsetWithResourcesData() {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesData() {
      return __isset_vector[__WITHRESOURCESDATA_ISSET_ID];
    }

    public void setWithResourcesDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = value;
    }

    public boolean isWithResourcesRecognition() {
      return this.withResourcesRecognition;
    }

    public void setWithResourcesRecognition(boolean withResourcesRecognition) {
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
    }

    public void unsetWithResourcesRecognition() {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesRecognition() {
      return __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID];
    }

    public void setWithResourcesRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithResourcesAlternateData() {
      return this.withResourcesAlternateData;
    }

    public void setWithResourcesAlternateData(boolean withResourcesAlternateData) {
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    public void unsetWithResourcesAlternateData() {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesAlternateData() {
      return __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID];
    }

    public void setWithResourcesAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case WITH_CONTENT:
        if (value == null) {
          unsetWithContent();
        } else {
          setWithContent((Boolean)value);
        }
        break;

      case WITH_RESOURCES_DATA:
        if (value == null) {
          unsetWithResourcesData();
        } else {
          setWithResourcesData((Boolean)value);
        }
        break;

      case WITH_RESOURCES_RECOGNITION:
        if (value == null) {
          unsetWithResourcesRecognition();
        } else {
          setWithResourcesRecognition((Boolean)value);
        }
        break;

      case WITH_RESOURCES_ALTERNATE_DATA:
        if (value == null) {
          unsetWithResourcesAlternateData();
        } else {
          setWithResourcesAlternateData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case WITH_CONTENT:
        return new Boolean(isWithContent());

      case WITH_RESOURCES_DATA:
        return new Boolean(isWithResourcesData());

      case WITH_RESOURCES_RECOGNITION:
        return new Boolean(isWithResourcesRecognition());

      case WITH_RESOURCES_ALTERNATE_DATA:
        return new Boolean(isWithResourcesAlternateData());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case WITH_CONTENT:
        return isSetWithContent();
      case WITH_RESOURCES_DATA:
        return isSetWithResourcesData();
      case WITH_RESOURCES_RECOGNITION:
        return isSetWithResourcesRecognition();
      case WITH_RESOURCES_ALTERNATE_DATA:
        return isSetWithResourcesAlternateData();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_args)
        return this.equals((getNote_args)that);
      return false;
    }

    public boolean equals(getNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_withContent = true;
      boolean that_present_withContent = true;
      if (this_present_withContent || that_present_withContent) {
        if (!(this_present_withContent && that_present_withContent))
          return false;
        if (this.withContent != that.withContent)
          return false;
      }

      boolean this_present_withResourcesData = true;
      boolean that_present_withResourcesData = true;
      if (this_present_withResourcesData || that_present_withResourcesData) {
        if (!(this_present_withResourcesData && that_present_withResourcesData))
          return false;
        if (this.withResourcesData != that.withResourcesData)
          return false;
      }

      boolean this_present_withResourcesRecognition = true;
      boolean that_present_withResourcesRecognition = true;
      if (this_present_withResourcesRecognition || that_present_withResourcesRecognition) {
        if (!(this_present_withResourcesRecognition && that_present_withResourcesRecognition))
          return false;
        if (this.withResourcesRecognition != that.withResourcesRecognition)
          return false;
      }

      boolean this_present_withResourcesAlternateData = true;
      boolean that_present_withResourcesAlternateData = true;
      if (this_present_withResourcesAlternateData || that_present_withResourcesAlternateData) {
        if (!(this_present_withResourcesAlternateData && that_present_withResourcesAlternateData))
          return false;
        if (this.withResourcesAlternateData != that.withResourcesAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNote_args typedOther = (getNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithContent()).compareTo(typedOther.isSetWithContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithContent()) {        lastComparison = TBaseHelper.compareTo(this.withContent, typedOther.withContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesData()).compareTo(typedOther.isSetWithResourcesData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesData()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesData, typedOther.withResourcesData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesRecognition()).compareTo(typedOther.isSetWithResourcesRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesRecognition()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesRecognition, typedOther.withResourcesRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesAlternateData()).compareTo(typedOther.isSetWithResourcesAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesAlternateData()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesAlternateData, typedOther.withResourcesAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_CONTENT
            if (field.type == TType.BOOL) {
              this.withContent = iprot.readBool();
              setWithContentIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RESOURCES_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesData = iprot.readBool();
              setWithResourcesDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RESOURCES_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withResourcesRecognition = iprot.readBool();
              setWithResourcesRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesAlternateData = iprot.readBool();
              setWithResourcesAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_CONTENT_FIELD_DESC);
      oprot.writeBool(this.withContent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withResourcesRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withContent:");
      sb.append(this.withContent);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesData:");
      sb.append(this.withResourcesData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesRecognition:");
      sb.append(this.withResourcesRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesAlternateData:");
      sb.append(this.withResourcesAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNote_result implements TBase<getNote_result, getNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNote_result.class, metaDataMap);
    }

    public getNote_result() {
    }

    public getNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_result(getNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNote_result deepCopy() {
      return new getNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Note)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_result)
        return this.equals((getNote_result)that);
      return false;
    }

    public boolean equals(getNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNote_result typedOther = (getNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteApplicationData_args implements TBase<getNoteApplicationData_args, getNoteApplicationData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteApplicationData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteApplicationData_args.class, metaDataMap);
    }

    public getNoteApplicationData_args() {
    }

    public getNoteApplicationData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteApplicationData_args(getNoteApplicationData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNoteApplicationData_args deepCopy() {
      return new getNoteApplicationData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteApplicationData_args)
        return this.equals((getNoteApplicationData_args)that);
      return false;
    }

    public boolean equals(getNoteApplicationData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteApplicationData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteApplicationData_args typedOther = (getNoteApplicationData_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteApplicationData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteApplicationData_result implements TBase<getNoteApplicationData_result, getNoteApplicationData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteApplicationData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.LazyMap success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LazyMap.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteApplicationData_result.class, metaDataMap);
    }

    public getNoteApplicationData_result() {
    }

    public getNoteApplicationData_result(
      com.evernote.edam.type.LazyMap success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteApplicationData_result(getNoteApplicationData_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.LazyMap(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteApplicationData_result deepCopy() {
      return new getNoteApplicationData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.LazyMap getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.LazyMap success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.LazyMap)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteApplicationData_result)
        return this.equals((getNoteApplicationData_result)that);
      return false;
    }

    public boolean equals(getNoteApplicationData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteApplicationData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteApplicationData_result typedOther = (getNoteApplicationData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.LazyMap();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteApplicationData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteApplicationDataEntry_args implements TBase<getNoteApplicationDataEntry_args, getNoteApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);

    private String authenticationToken;
    private String guid;
    private String key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteApplicationDataEntry_args.class, metaDataMap);
    }

    public getNoteApplicationDataEntry_args() {
    }

    public getNoteApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteApplicationDataEntry_args(getNoteApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getNoteApplicationDataEntry_args deepCopy() {
      return new getNoteApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteApplicationDataEntry_args)
        return this.equals((getNoteApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(getNoteApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteApplicationDataEntry_args typedOther = (getNoteApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteApplicationDataEntry_result implements TBase<getNoteApplicationDataEntry_result, getNoteApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteApplicationDataEntry_result.class, metaDataMap);
    }

    public getNoteApplicationDataEntry_result() {
    }

    public getNoteApplicationDataEntry_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteApplicationDataEntry_result(getNoteApplicationDataEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteApplicationDataEntry_result deepCopy() {
      return new getNoteApplicationDataEntry_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteApplicationDataEntry_result)
        return this.equals((getNoteApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(getNoteApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteApplicationDataEntry_result typedOther = (getNoteApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setNoteApplicationDataEntry_args implements TBase<setNoteApplicationDataEntry_args, setNoteApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setNoteApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);

    private String authenticationToken;
    private String guid;
    private String key;
    private String value;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setNoteApplicationDataEntry_args.class, metaDataMap);
    }

    public setNoteApplicationDataEntry_args() {
    }

    public setNoteApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key,
      String value)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNoteApplicationDataEntry_args(setNoteApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public setNoteApplicationDataEntry_args deepCopy() {
      return new setNoteApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
      this.value = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNoteApplicationDataEntry_args)
        return this.equals((setNoteApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(setNoteApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(setNoteApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNoteApplicationDataEntry_args typedOther = (setNoteApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setNoteApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setNoteApplicationDataEntry_result implements TBase<setNoteApplicationDataEntry_result, setNoteApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setNoteApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setNoteApplicationDataEntry_result.class, metaDataMap);
    }

    public setNoteApplicationDataEntry_result() {
    }

    public setNoteApplicationDataEntry_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNoteApplicationDataEntry_result(setNoteApplicationDataEntry_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public setNoteApplicationDataEntry_result deepCopy() {
      return new setNoteApplicationDataEntry_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNoteApplicationDataEntry_result)
        return this.equals((setNoteApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(setNoteApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(setNoteApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setNoteApplicationDataEntry_result typedOther = (setNoteApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setNoteApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsetNoteApplicationDataEntry_args implements TBase<unsetNoteApplicationDataEntry_args, unsetNoteApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("unsetNoteApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);

    private String authenticationToken;
    private String guid;
    private String key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(unsetNoteApplicationDataEntry_args.class, metaDataMap);
    }

    public unsetNoteApplicationDataEntry_args() {
    }

    public unsetNoteApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetNoteApplicationDataEntry_args(unsetNoteApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public unsetNoteApplicationDataEntry_args deepCopy() {
      return new unsetNoteApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetNoteApplicationDataEntry_args)
        return this.equals((unsetNoteApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(unsetNoteApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(unsetNoteApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unsetNoteApplicationDataEntry_args typedOther = (unsetNoteApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("unsetNoteApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsetNoteApplicationDataEntry_result implements TBase<unsetNoteApplicationDataEntry_result, unsetNoteApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("unsetNoteApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(unsetNoteApplicationDataEntry_result.class, metaDataMap);
    }

    public unsetNoteApplicationDataEntry_result() {
    }

    public unsetNoteApplicationDataEntry_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetNoteApplicationDataEntry_result(unsetNoteApplicationDataEntry_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public unsetNoteApplicationDataEntry_result deepCopy() {
      return new unsetNoteApplicationDataEntry_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetNoteApplicationDataEntry_result)
        return this.equals((unsetNoteApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(unsetNoteApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(unsetNoteApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unsetNoteApplicationDataEntry_result typedOther = (unsetNoteApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("unsetNoteApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteContent_args implements TBase<getNoteContent_args, getNoteContent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteContent_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteContent_args.class, metaDataMap);
    }

    public getNoteContent_args() {
    }

    public getNoteContent_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteContent_args(getNoteContent_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNoteContent_args deepCopy() {
      return new getNoteContent_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteContent_args)
        return this.equals((getNoteContent_args)that);
      return false;
    }

    public boolean equals(getNoteContent_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteContent_args typedOther = (getNoteContent_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteContent_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteContent_result implements TBase<getNoteContent_result, getNoteContent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteContent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteContent_result.class, metaDataMap);
    }

    public getNoteContent_result() {
    }

    public getNoteContent_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteContent_result(getNoteContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteContent_result deepCopy() {
      return new getNoteContent_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteContent_result)
        return this.equals((getNoteContent_result)that);
      return false;
    }

    public boolean equals(getNoteContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteContent_result typedOther = (getNoteContent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteSearchText_args implements TBase<getNoteSearchText_args, getNoteSearchText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteSearchText_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField NOTE_ONLY_FIELD_DESC = new TField("noteOnly", TType.BOOL, (short)3);
    private static final TField TOKENIZE_FOR_INDEXING_FIELD_DESC = new TField("tokenizeForIndexing", TType.BOOL, (short)4);

    private String authenticationToken;
    private String guid;
    private boolean noteOnly;
    private boolean tokenizeForIndexing;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      NOTE_ONLY((short)3, "noteOnly"),
      TOKENIZE_FOR_INDEXING((short)4, "tokenizeForIndexing");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // NOTE_ONLY
            return NOTE_ONLY;
          case 4: // TOKENIZE_FOR_INDEXING
            return TOKENIZE_FOR_INDEXING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOTEONLY_ISSET_ID = 0;
    private static final int __TOKENIZEFORINDEXING_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.NOTE_ONLY, new FieldMetaData("noteOnly", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.TOKENIZE_FOR_INDEXING, new FieldMetaData("tokenizeForIndexing", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteSearchText_args.class, metaDataMap);
    }

    public getNoteSearchText_args() {
    }

    public getNoteSearchText_args(
      String authenticationToken,
      String guid,
      boolean noteOnly,
      boolean tokenizeForIndexing)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.noteOnly = noteOnly;
      setNoteOnlyIsSet(true);
      this.tokenizeForIndexing = tokenizeForIndexing;
      setTokenizeForIndexingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteSearchText_args(getNoteSearchText_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.noteOnly = other.noteOnly;
      this.tokenizeForIndexing = other.tokenizeForIndexing;
    }

    public getNoteSearchText_args deepCopy() {
      return new getNoteSearchText_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setNoteOnlyIsSet(false);
      this.noteOnly = false;
      setTokenizeForIndexingIsSet(false);
      this.tokenizeForIndexing = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isNoteOnly() {
      return this.noteOnly;
    }

    public void setNoteOnly(boolean noteOnly) {
      this.noteOnly = noteOnly;
      setNoteOnlyIsSet(true);
    }

    public void unsetNoteOnly() {
      __isset_vector[__NOTEONLY_ISSET_ID] = false;
    }

    /** Returns true if field noteOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteOnly() {
      return __isset_vector[__NOTEONLY_ISSET_ID];
    }

    public void setNoteOnlyIsSet(boolean value) {
      __isset_vector[__NOTEONLY_ISSET_ID] = value;
    }

    public boolean isTokenizeForIndexing() {
      return this.tokenizeForIndexing;
    }

    public void setTokenizeForIndexing(boolean tokenizeForIndexing) {
      this.tokenizeForIndexing = tokenizeForIndexing;
      setTokenizeForIndexingIsSet(true);
    }

    public void unsetTokenizeForIndexing() {
      __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID] = false;
    }

    /** Returns true if field tokenizeForIndexing is set (has been asigned a value) and false otherwise */
    public boolean isSetTokenizeForIndexing() {
      return __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID];
    }

    public void setTokenizeForIndexingIsSet(boolean value) {
      __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case NOTE_ONLY:
        if (value == null) {
          unsetNoteOnly();
        } else {
          setNoteOnly((Boolean)value);
        }
        break;

      case TOKENIZE_FOR_INDEXING:
        if (value == null) {
          unsetTokenizeForIndexing();
        } else {
          setTokenizeForIndexing((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case NOTE_ONLY:
        return new Boolean(isNoteOnly());

      case TOKENIZE_FOR_INDEXING:
        return new Boolean(isTokenizeForIndexing());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case NOTE_ONLY:
        return isSetNoteOnly();
      case TOKENIZE_FOR_INDEXING:
        return isSetTokenizeForIndexing();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteSearchText_args)
        return this.equals((getNoteSearchText_args)that);
      return false;
    }

    public boolean equals(getNoteSearchText_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_noteOnly = true;
      boolean that_present_noteOnly = true;
      if (this_present_noteOnly || that_present_noteOnly) {
        if (!(this_present_noteOnly && that_present_noteOnly))
          return false;
        if (this.noteOnly != that.noteOnly)
          return false;
      }

      boolean this_present_tokenizeForIndexing = true;
      boolean that_present_tokenizeForIndexing = true;
      if (this_present_tokenizeForIndexing || that_present_tokenizeForIndexing) {
        if (!(this_present_tokenizeForIndexing && that_present_tokenizeForIndexing))
          return false;
        if (this.tokenizeForIndexing != that.tokenizeForIndexing)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteSearchText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteSearchText_args typedOther = (getNoteSearchText_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteOnly()).compareTo(typedOther.isSetNoteOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteOnly()) {        lastComparison = TBaseHelper.compareTo(this.noteOnly, typedOther.noteOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTokenizeForIndexing()).compareTo(typedOther.isSetTokenizeForIndexing());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenizeForIndexing()) {        lastComparison = TBaseHelper.compareTo(this.tokenizeForIndexing, typedOther.tokenizeForIndexing);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOTE_ONLY
            if (field.type == TType.BOOL) {
              this.noteOnly = iprot.readBool();
              setNoteOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TOKENIZE_FOR_INDEXING
            if (field.type == TType.BOOL) {
              this.tokenizeForIndexing = iprot.readBool();
              setTokenizeForIndexingIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTE_ONLY_FIELD_DESC);
      oprot.writeBool(this.noteOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOKENIZE_FOR_INDEXING_FIELD_DESC);
      oprot.writeBool(this.tokenizeForIndexing);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteSearchText_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteOnly:");
      sb.append(this.noteOnly);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenizeForIndexing:");
      sb.append(this.tokenizeForIndexing);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteSearchText_result implements TBase<getNoteSearchText_result, getNoteSearchText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteSearchText_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteSearchText_result.class, metaDataMap);
    }

    public getNoteSearchText_result() {
    }

    public getNoteSearchText_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteSearchText_result(getNoteSearchText_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteSearchText_result deepCopy() {
      return new getNoteSearchText_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteSearchText_result)
        return this.equals((getNoteSearchText_result)that);
      return false;
    }

    public boolean equals(getNoteSearchText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteSearchText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteSearchText_result typedOther = (getNoteSearchText_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteSearchText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceSearchText_args implements TBase<getResourceSearchText_args, getResourceSearchText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceSearchText_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceSearchText_args.class, metaDataMap);
    }

    public getResourceSearchText_args() {
    }

    public getResourceSearchText_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceSearchText_args(getResourceSearchText_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceSearchText_args deepCopy() {
      return new getResourceSearchText_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceSearchText_args)
        return this.equals((getResourceSearchText_args)that);
      return false;
    }

    public boolean equals(getResourceSearchText_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceSearchText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceSearchText_args typedOther = (getResourceSearchText_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceSearchText_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceSearchText_result implements TBase<getResourceSearchText_result, getResourceSearchText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceSearchText_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceSearchText_result.class, metaDataMap);
    }

    public getResourceSearchText_result() {
    }

    public getResourceSearchText_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceSearchText_result(getResourceSearchText_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceSearchText_result deepCopy() {
      return new getResourceSearchText_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceSearchText_result)
        return this.equals((getResourceSearchText_result)that);
      return false;
    }

    public boolean equals(getResourceSearchText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceSearchText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceSearchText_result typedOther = (getResourceSearchText_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceSearchText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteTagNames_args implements TBase<getNoteTagNames_args, getNoteTagNames_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteTagNames_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteTagNames_args.class, metaDataMap);
    }

    public getNoteTagNames_args() {
    }

    public getNoteTagNames_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteTagNames_args(getNoteTagNames_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNoteTagNames_args deepCopy() {
      return new getNoteTagNames_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteTagNames_args)
        return this.equals((getNoteTagNames_args)that);
      return false;
    }

    public boolean equals(getNoteTagNames_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteTagNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteTagNames_args typedOther = (getNoteTagNames_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteTagNames_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteTagNames_result implements TBase<getNoteTagNames_result, getNoteTagNames_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteTagNames_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private List<String> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteTagNames_result.class, metaDataMap);
    }

    public getNoteTagNames_result() {
    }

    public getNoteTagNames_result(
      List<String> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteTagNames_result(getNoteTagNames_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteTagNames_result deepCopy() {
      return new getNoteTagNames_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteTagNames_result)
        return this.equals((getNoteTagNames_result)that);
      return false;
    }

    public boolean equals(getNoteTagNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteTagNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteTagNames_result typedOther = (getNoteTagNames_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list119 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list119.size);
                for (int _i120 = 0; _i120 < _list119.size; ++_i120)
                {
                  String _elem121;
                  _elem121 = iprot.readString();
                  this.success.add(_elem121);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter122 : this.success)
          {
            oprot.writeString(_iter122);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteTagNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNote_args implements TBase<createNote_args, createNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_FIELD_DESC = new TField("note", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Note note;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE((short)2, "note");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE
            return NOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE, new FieldMetaData("note", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createNote_args.class, metaDataMap);
    }

    public createNote_args() {
    }

    public createNote_args(
      String authenticationToken,
      com.evernote.edam.type.Note note)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNote_args(createNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNote()) {
        this.note = new com.evernote.edam.type.Note(other.note);
      }
    }

    public createNote_args deepCopy() {
      return new createNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.note = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Note getNote() {
      return this.note;
    }

    public void setNote(com.evernote.edam.type.Note note) {
      this.note = note;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been asigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((com.evernote.edam.type.Note)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE:
        return getNote();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE:
        return isSetNote();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNote_args)
        return this.equals((createNote_args)that);
      return false;
    }

    public boolean equals(createNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNote_args typedOther = (createNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {        lastComparison = TBaseHelper.compareTo(this.note, typedOther.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE
            if (field.type == TType.STRUCT) {
              this.note = new com.evernote.edam.type.Note();
              this.note.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        this.note.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNote_result implements TBase<createNote_result, createNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createNote_result.class, metaDataMap);
    }

    public createNote_result() {
    }

    public createNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNote_result(createNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public createNote_result deepCopy() {
      return new createNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Note)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNote_result)
        return this.equals((createNote_result)that);
      return false;
    }

    public boolean equals(createNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createNote_result typedOther = (createNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNote_args implements TBase<updateNote_args, updateNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_FIELD_DESC = new TField("note", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Note note;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE((short)2, "note");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE
            return NOTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE, new FieldMetaData("note", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateNote_args.class, metaDataMap);
    }

    public updateNote_args() {
    }

    public updateNote_args(
      String authenticationToken,
      com.evernote.edam.type.Note note)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_args(updateNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNote()) {
        this.note = new com.evernote.edam.type.Note(other.note);
      }
    }

    public updateNote_args deepCopy() {
      return new updateNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.note = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Note getNote() {
      return this.note;
    }

    public void setNote(com.evernote.edam.type.Note note) {
      this.note = note;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been asigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((com.evernote.edam.type.Note)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE:
        return getNote();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE:
        return isSetNote();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_args)
        return this.equals((updateNote_args)that);
      return false;
    }

    public boolean equals(updateNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNote_args typedOther = (updateNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNote()).compareTo(typedOther.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {        lastComparison = TBaseHelper.compareTo(this.note, typedOther.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE
            if (field.type == TType.STRUCT) {
              this.note = new com.evernote.edam.type.Note();
              this.note.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        this.note.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNote_result implements TBase<updateNote_result, updateNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateNote_result.class, metaDataMap);
    }

    public updateNote_result() {
    }

    public updateNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_result(updateNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateNote_result deepCopy() {
      return new updateNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Note)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_result)
        return this.equals((updateNote_result)that);
      return false;
    }

    public boolean equals(updateNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNote_result typedOther = (updateNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteNote_args implements TBase<deleteNote_args, deleteNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(deleteNote_args.class, metaDataMap);
    }

    public deleteNote_args() {
    }

    public deleteNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_args(deleteNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public deleteNote_args deepCopy() {
      return new deleteNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_args)
        return this.equals((deleteNote_args)that);
      return false;
    }

    public boolean equals(deleteNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNote_args typedOther = (deleteNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteNote_result implements TBase<deleteNote_result, deleteNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(deleteNote_result.class, metaDataMap);
    }

    public deleteNote_result() {
    }

    public deleteNote_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_result(deleteNote_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public deleteNote_result deepCopy() {
      return new deleteNote_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_result)
        return this.equals((deleteNote_result)that);
      return false;
    }

    public boolean equals(deleteNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNote_result typedOther = (deleteNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNote_args implements TBase<expungeNote_args, expungeNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNote_args.class, metaDataMap);
    }

    public expungeNote_args() {
    }

    public expungeNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNote_args(expungeNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeNote_args deepCopy() {
      return new expungeNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNote_args)
        return this.equals((expungeNote_args)that);
      return false;
    }

    public boolean equals(expungeNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNote_args typedOther = (expungeNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNote_result implements TBase<expungeNote_result, expungeNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNote_result.class, metaDataMap);
    }

    public expungeNote_result() {
    }

    public expungeNote_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNote_result(expungeNote_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNote_result deepCopy() {
      return new expungeNote_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNote_result)
        return this.equals((expungeNote_result)that);
      return false;
    }

    public boolean equals(expungeNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNote_result typedOther = (expungeNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotes_args implements TBase<expungeNotes_args, expungeNotes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUIDS_FIELD_DESC = new TField("noteGuids", TType.LIST, (short)2);

    private String authenticationToken;
    private List<String> noteGuids;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE_GUIDS((short)2, "noteGuids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE_GUIDS
            return NOTE_GUIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_GUIDS, new FieldMetaData("noteGuids", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING              , "Guid"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNotes_args.class, metaDataMap);
    }

    public expungeNotes_args() {
    }

    public expungeNotes_args(
      String authenticationToken,
      List<String> noteGuids)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuids = noteGuids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotes_args(expungeNotes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuids()) {
        List<String> __this__noteGuids = new ArrayList<String>();
        for (String other_element : other.noteGuids) {
          __this__noteGuids.add(other_element);
        }
        this.noteGuids = __this__noteGuids;
      }
    }

    public expungeNotes_args deepCopy() {
      return new expungeNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuids = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getNoteGuidsSize() {
      return (this.noteGuids == null) ? 0 : this.noteGuids.size();
    }

    public java.util.Iterator<String> getNoteGuidsIterator() {
      return (this.noteGuids == null) ? null : this.noteGuids.iterator();
    }

    public void addToNoteGuids(String elem) {
      if (this.noteGuids == null) {
        this.noteGuids = new ArrayList<String>();
      }
      this.noteGuids.add(elem);
    }

    public List<String> getNoteGuids() {
      return this.noteGuids;
    }

    public void setNoteGuids(List<String> noteGuids) {
      this.noteGuids = noteGuids;
    }

    public void unsetNoteGuids() {
      this.noteGuids = null;
    }

    /** Returns true if field noteGuids is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuids() {
      return this.noteGuids != null;
    }

    public void setNoteGuidsIsSet(boolean value) {
      if (!value) {
        this.noteGuids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE_GUIDS:
        if (value == null) {
          unsetNoteGuids();
        } else {
          setNoteGuids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE_GUIDS:
        return getNoteGuids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE_GUIDS:
        return isSetNoteGuids();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotes_args)
        return this.equals((expungeNotes_args)that);
      return false;
    }

    public boolean equals(expungeNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuids = true && this.isSetNoteGuids();
      boolean that_present_noteGuids = true && that.isSetNoteGuids();
      if (this_present_noteGuids || that_present_noteGuids) {
        if (!(this_present_noteGuids && that_present_noteGuids))
          return false;
        if (!this.noteGuids.equals(that.noteGuids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNotes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNotes_args typedOther = (expungeNotes_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteGuids()).compareTo(typedOther.isSetNoteGuids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuids()) {        lastComparison = TBaseHelper.compareTo(this.noteGuids, typedOther.noteGuids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUIDS
            if (field.type == TType.LIST) {
              {
                TList _list123 = iprot.readListBegin();
                this.noteGuids = new ArrayList<String>(_list123.size);
                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                {
                  String _elem125;
                  _elem125 = iprot.readString();
                  this.noteGuids.add(_elem125);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuids != null) {
        oprot.writeFieldBegin(NOTE_GUIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.noteGuids.size()));
          for (String _iter126 : this.noteGuids)
          {
            oprot.writeString(_iter126);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuids:");
      if (this.noteGuids == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotes_result implements TBase<expungeNotes_result, expungeNotes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeNotes_result.class, metaDataMap);
    }

    public expungeNotes_result() {
    }

    public expungeNotes_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotes_result(expungeNotes_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNotes_result deepCopy() {
      return new expungeNotes_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotes_result)
        return this.equals((expungeNotes_result)that);
      return false;
    }

    public boolean equals(expungeNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeNotes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeNotes_result typedOther = (expungeNotes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeNotes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeInactiveNotes_args implements TBase<expungeInactiveNotes_args, expungeInactiveNotes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeInactiveNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeInactiveNotes_args.class, metaDataMap);
    }

    public expungeInactiveNotes_args() {
    }

    public expungeInactiveNotes_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeInactiveNotes_args(expungeInactiveNotes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public expungeInactiveNotes_args deepCopy() {
      return new expungeInactiveNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeInactiveNotes_args)
        return this.equals((expungeInactiveNotes_args)that);
      return false;
    }

    public boolean equals(expungeInactiveNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeInactiveNotes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeInactiveNotes_args typedOther = (expungeInactiveNotes_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeInactiveNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeInactiveNotes_result implements TBase<expungeInactiveNotes_result, expungeInactiveNotes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeInactiveNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeInactiveNotes_result.class, metaDataMap);
    }

    public expungeInactiveNotes_result() {
    }

    public expungeInactiveNotes_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeInactiveNotes_result(expungeInactiveNotes_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeInactiveNotes_result deepCopy() {
      return new expungeInactiveNotes_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeInactiveNotes_result)
        return this.equals((expungeInactiveNotes_result)that);
      return false;
    }

    public boolean equals(expungeInactiveNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeInactiveNotes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeInactiveNotes_result typedOther = (expungeInactiveNotes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeInactiveNotes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class copyNote_args implements TBase<copyNote_args, copyNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("copyNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField TO_NOTEBOOK_GUID_FIELD_DESC = new TField("toNotebookGuid", TType.STRING, (short)3);

    private String authenticationToken;
    private String noteGuid;
    private String toNotebookGuid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE_GUID((short)2, "noteGuid"),
      TO_NOTEBOOK_GUID((short)3, "toNotebookGuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE_GUID
            return NOTE_GUID;
          case 3: // TO_NOTEBOOK_GUID
            return TO_NOTEBOOK_GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.TO_NOTEBOOK_GUID, new FieldMetaData("toNotebookGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(copyNote_args.class, metaDataMap);
    }

    public copyNote_args() {
    }

    public copyNote_args(
      String authenticationToken,
      String noteGuid,
      String toNotebookGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.toNotebookGuid = toNotebookGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyNote_args(copyNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      if (other.isSetToNotebookGuid()) {
        this.toNotebookGuid = other.toNotebookGuid;
      }
    }

    public copyNote_args deepCopy() {
      return new copyNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      this.toNotebookGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public String getToNotebookGuid() {
      return this.toNotebookGuid;
    }

    public void setToNotebookGuid(String toNotebookGuid) {
      this.toNotebookGuid = toNotebookGuid;
    }

    public void unsetToNotebookGuid() {
      this.toNotebookGuid = null;
    }

    /** Returns true if field toNotebookGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetToNotebookGuid() {
      return this.toNotebookGuid != null;
    }

    public void setToNotebookGuidIsSet(boolean value) {
      if (!value) {
        this.toNotebookGuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE_GUID:
        if (value == null) {
          unsetNoteGuid();
        } else {
          setNoteGuid((String)value);
        }
        break;

      case TO_NOTEBOOK_GUID:
        if (value == null) {
          unsetToNotebookGuid();
        } else {
          setToNotebookGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE_GUID:
        return getNoteGuid();

      case TO_NOTEBOOK_GUID:
        return getToNotebookGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE_GUID:
        return isSetNoteGuid();
      case TO_NOTEBOOK_GUID:
        return isSetToNotebookGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyNote_args)
        return this.equals((copyNote_args)that);
      return false;
    }

    public boolean equals(copyNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_toNotebookGuid = true && this.isSetToNotebookGuid();
      boolean that_present_toNotebookGuid = true && that.isSetToNotebookGuid();
      if (this_present_toNotebookGuid || that_present_toNotebookGuid) {
        if (!(this_present_toNotebookGuid && that_present_toNotebookGuid))
          return false;
        if (!this.toNotebookGuid.equals(that.toNotebookGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(copyNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyNote_args typedOther = (copyNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {        lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToNotebookGuid()).compareTo(typedOther.isSetToNotebookGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToNotebookGuid()) {        lastComparison = TBaseHelper.compareTo(this.toNotebookGuid, typedOther.toNotebookGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TO_NOTEBOOK_GUID
            if (field.type == TType.STRING) {
              this.toNotebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      if (this.toNotebookGuid != null) {
        oprot.writeFieldBegin(TO_NOTEBOOK_GUID_FIELD_DESC);
        oprot.writeString(this.toNotebookGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("copyNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toNotebookGuid:");
      if (this.toNotebookGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.toNotebookGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class copyNote_result implements TBase<copyNote_result, copyNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("copyNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(copyNote_result.class, metaDataMap);
    }

    public copyNote_result() {
    }

    public copyNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyNote_result(copyNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public copyNote_result deepCopy() {
      return new copyNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Note)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyNote_result)
        return this.equals((copyNote_result)that);
      return false;
    }

    public boolean equals(copyNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(copyNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyNote_result typedOther = (copyNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("copyNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNoteVersions_args implements TBase<listNoteVersions_args, listNoteVersions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listNoteVersions_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);

    private String authenticationToken;
    private String noteGuid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE_GUID((short)2, "noteGuid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE_GUID
            return NOTE_GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listNoteVersions_args.class, metaDataMap);
    }

    public listNoteVersions_args() {
    }

    public listNoteVersions_args(
      String authenticationToken,
      String noteGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNoteVersions_args(listNoteVersions_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
    }

    public listNoteVersions_args deepCopy() {
      return new listNoteVersions_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE_GUID:
        if (value == null) {
          unsetNoteGuid();
        } else {
          setNoteGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE_GUID:
        return getNoteGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE_GUID:
        return isSetNoteGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNoteVersions_args)
        return this.equals((listNoteVersions_args)that);
      return false;
    }

    public boolean equals(listNoteVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listNoteVersions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listNoteVersions_args typedOther = (listNoteVersions_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {        lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listNoteVersions_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNoteVersions_result implements TBase<listNoteVersions_result, listNoteVersions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listNoteVersions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private List<NoteVersionId> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, NoteVersionId.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listNoteVersions_result.class, metaDataMap);
    }

    public listNoteVersions_result() {
    }

    public listNoteVersions_result(
      List<NoteVersionId> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNoteVersions_result(listNoteVersions_result other) {
      if (other.isSetSuccess()) {
        List<NoteVersionId> __this__success = new ArrayList<NoteVersionId>();
        for (NoteVersionId other_element : other.success) {
          __this__success.add(new NoteVersionId(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public listNoteVersions_result deepCopy() {
      return new listNoteVersions_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NoteVersionId> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NoteVersionId elem) {
      if (this.success == null) {
        this.success = new ArrayList<NoteVersionId>();
      }
      this.success.add(elem);
    }

    public List<NoteVersionId> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<NoteVersionId> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NoteVersionId>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNoteVersions_result)
        return this.equals((listNoteVersions_result)that);
      return false;
    }

    public boolean equals(listNoteVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listNoteVersions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listNoteVersions_result typedOther = (listNoteVersions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list127 = iprot.readListBegin();
                this.success = new ArrayList<NoteVersionId>(_list127.size);
                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                {
                  NoteVersionId _elem129;
                  _elem129 = new NoteVersionId();
                  _elem129.read(iprot);
                  this.success.add(_elem129);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (NoteVersionId _iter130 : this.success)
          {
            _iter130.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listNoteVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteVersion_args implements TBase<getNoteVersion_args, getNoteVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteVersion_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField UPDATE_SEQUENCE_NUM_FIELD_DESC = new TField("updateSequenceNum", TType.I32, (short)3);
    private static final TField WITH_RESOURCES_DATA_FIELD_DESC = new TField("withResourcesData", TType.BOOL, (short)4);
    private static final TField WITH_RESOURCES_RECOGNITION_FIELD_DESC = new TField("withResourcesRecognition", TType.BOOL, (short)5);
    private static final TField WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC = new TField("withResourcesAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String noteGuid;
    private int updateSequenceNum;
    private boolean withResourcesData;
    private boolean withResourcesRecognition;
    private boolean withResourcesAlternateData;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE_GUID((short)2, "noteGuid"),
      UPDATE_SEQUENCE_NUM((short)3, "updateSequenceNum"),
      WITH_RESOURCES_DATA((short)4, "withResourcesData"),
      WITH_RESOURCES_RECOGNITION((short)5, "withResourcesRecognition"),
      WITH_RESOURCES_ALTERNATE_DATA((short)6, "withResourcesAlternateData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE_GUID
            return NOTE_GUID;
          case 3: // UPDATE_SEQUENCE_NUM
            return UPDATE_SEQUENCE_NUM;
          case 4: // WITH_RESOURCES_DATA
            return WITH_RESOURCES_DATA;
          case 5: // WITH_RESOURCES_RECOGNITION
            return WITH_RESOURCES_RECOGNITION;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            return WITH_RESOURCES_ALTERNATE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UPDATESEQUENCENUM_ISSET_ID = 0;
    private static final int __WITHRESOURCESDATA_ISSET_ID = 1;
    private static final int __WITHRESOURCESRECOGNITION_ISSET_ID = 2;
    private static final int __WITHRESOURCESALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.UPDATE_SEQUENCE_NUM, new FieldMetaData("updateSequenceNum", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.WITH_RESOURCES_DATA, new FieldMetaData("withResourcesData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RESOURCES_RECOGNITION, new FieldMetaData("withResourcesRecognition", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RESOURCES_ALTERNATE_DATA, new FieldMetaData("withResourcesAlternateData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteVersion_args.class, metaDataMap);
    }

    public getNoteVersion_args() {
    }

    public getNoteVersion_args(
      String authenticationToken,
      String noteGuid,
      int updateSequenceNum,
      boolean withResourcesData,
      boolean withResourcesRecognition,
      boolean withResourcesAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.updateSequenceNum = updateSequenceNum;
      setUpdateSequenceNumIsSet(true);
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteVersion_args(getNoteVersion_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      this.updateSequenceNum = other.updateSequenceNum;
      this.withResourcesData = other.withResourcesData;
      this.withResourcesRecognition = other.withResourcesRecognition;
      this.withResourcesAlternateData = other.withResourcesAlternateData;
    }

    public getNoteVersion_args deepCopy() {
      return new getNoteVersion_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      setUpdateSequenceNumIsSet(false);
      this.updateSequenceNum = 0;
      setWithResourcesDataIsSet(false);
      this.withResourcesData = false;
      setWithResourcesRecognitionIsSet(false);
      this.withResourcesRecognition = false;
      setWithResourcesAlternateDataIsSet(false);
      this.withResourcesAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public int getUpdateSequenceNum() {
      return this.updateSequenceNum;
    }

    public void setUpdateSequenceNum(int updateSequenceNum) {
      this.updateSequenceNum = updateSequenceNum;
      setUpdateSequenceNumIsSet(true);
    }

    public void unsetUpdateSequenceNum() {
      __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = false;
    }

    /** Returns true if field updateSequenceNum is set (has been asigned a value) and false otherwise */
    public boolean isSetUpdateSequenceNum() {
      return __isset_vector[__UPDATESEQUENCENUM_ISSET_ID];
    }

    public void setUpdateSequenceNumIsSet(boolean value) {
      __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = value;
    }

    public boolean isWithResourcesData() {
      return this.withResourcesData;
    }

    public void setWithResourcesData(boolean withResourcesData) {
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
    }

    public void unsetWithResourcesData() {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesData() {
      return __isset_vector[__WITHRESOURCESDATA_ISSET_ID];
    }

    public void setWithResourcesDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = value;
    }

    public boolean isWithResourcesRecognition() {
      return this.withResourcesRecognition;
    }

    public void setWithResourcesRecognition(boolean withResourcesRecognition) {
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
    }

    public void unsetWithResourcesRecognition() {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesRecognition() {
      return __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID];
    }

    public void setWithResourcesRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithResourcesAlternateData() {
      return this.withResourcesAlternateData;
    }

    public void setWithResourcesAlternateData(boolean withResourcesAlternateData) {
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    public void unsetWithResourcesAlternateData() {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesAlternateData() {
      return __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID];
    }

    public void setWithResourcesAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE_GUID:
        if (value == null) {
          unsetNoteGuid();
        } else {
          setNoteGuid((String)value);
        }
        break;

      case UPDATE_SEQUENCE_NUM:
        if (value == null) {
          unsetUpdateSequenceNum();
        } else {
          setUpdateSequenceNum((Integer)value);
        }
        break;

      case WITH_RESOURCES_DATA:
        if (value == null) {
          unsetWithResourcesData();
        } else {
          setWithResourcesData((Boolean)value);
        }
        break;

      case WITH_RESOURCES_RECOGNITION:
        if (value == null) {
          unsetWithResourcesRecognition();
        } else {
          setWithResourcesRecognition((Boolean)value);
        }
        break;

      case WITH_RESOURCES_ALTERNATE_DATA:
        if (value == null) {
          unsetWithResourcesAlternateData();
        } else {
          setWithResourcesAlternateData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE_GUID:
        return getNoteGuid();

      case UPDATE_SEQUENCE_NUM:
        return new Integer(getUpdateSequenceNum());

      case WITH_RESOURCES_DATA:
        return new Boolean(isWithResourcesData());

      case WITH_RESOURCES_RECOGNITION:
        return new Boolean(isWithResourcesRecognition());

      case WITH_RESOURCES_ALTERNATE_DATA:
        return new Boolean(isWithResourcesAlternateData());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE_GUID:
        return isSetNoteGuid();
      case UPDATE_SEQUENCE_NUM:
        return isSetUpdateSequenceNum();
      case WITH_RESOURCES_DATA:
        return isSetWithResourcesData();
      case WITH_RESOURCES_RECOGNITION:
        return isSetWithResourcesRecognition();
      case WITH_RESOURCES_ALTERNATE_DATA:
        return isSetWithResourcesAlternateData();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteVersion_args)
        return this.equals((getNoteVersion_args)that);
      return false;
    }

    public boolean equals(getNoteVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_updateSequenceNum = true;
      boolean that_present_updateSequenceNum = true;
      if (this_present_updateSequenceNum || that_present_updateSequenceNum) {
        if (!(this_present_updateSequenceNum && that_present_updateSequenceNum))
          return false;
        if (this.updateSequenceNum != that.updateSequenceNum)
          return false;
      }

      boolean this_present_withResourcesData = true;
      boolean that_present_withResourcesData = true;
      if (this_present_withResourcesData || that_present_withResourcesData) {
        if (!(this_present_withResourcesData && that_present_withResourcesData))
          return false;
        if (this.withResourcesData != that.withResourcesData)
          return false;
      }

      boolean this_present_withResourcesRecognition = true;
      boolean that_present_withResourcesRecognition = true;
      if (this_present_withResourcesRecognition || that_present_withResourcesRecognition) {
        if (!(this_present_withResourcesRecognition && that_present_withResourcesRecognition))
          return false;
        if (this.withResourcesRecognition != that.withResourcesRecognition)
          return false;
      }

      boolean this_present_withResourcesAlternateData = true;
      boolean that_present_withResourcesAlternateData = true;
      if (this_present_withResourcesAlternateData || that_present_withResourcesAlternateData) {
        if (!(this_present_withResourcesAlternateData && that_present_withResourcesAlternateData))
          return false;
        if (this.withResourcesAlternateData != that.withResourcesAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteVersion_args typedOther = (getNoteVersion_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {        lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateSequenceNum()).compareTo(typedOther.isSetUpdateSequenceNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateSequenceNum()) {        lastComparison = TBaseHelper.compareTo(this.updateSequenceNum, typedOther.updateSequenceNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesData()).compareTo(typedOther.isSetWithResourcesData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesData()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesData, typedOther.withResourcesData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesRecognition()).compareTo(typedOther.isSetWithResourcesRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesRecognition()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesRecognition, typedOther.withResourcesRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithResourcesAlternateData()).compareTo(typedOther.isSetWithResourcesAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesAlternateData()) {        lastComparison = TBaseHelper.compareTo(this.withResourcesAlternateData, typedOther.withResourcesAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UPDATE_SEQUENCE_NUM
            if (field.type == TType.I32) {
              this.updateSequenceNum = iprot.readI32();
              setUpdateSequenceNumIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RESOURCES_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesData = iprot.readBool();
              setWithResourcesDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RESOURCES_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withResourcesRecognition = iprot.readBool();
              setWithResourcesRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesAlternateData = iprot.readBool();
              setWithResourcesAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(this.updateSequenceNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withResourcesRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteVersion_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateSequenceNum:");
      sb.append(this.updateSequenceNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesData:");
      sb.append(this.withResourcesData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesRecognition:");
      sb.append(this.withResourcesRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesAlternateData:");
      sb.append(this.withResourcesAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteVersion_result implements TBase<getNoteVersion_result, getNoteVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteVersion_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getNoteVersion_result.class, metaDataMap);
    }

    public getNoteVersion_result() {
    }

    public getNoteVersion_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteVersion_result(getNoteVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteVersion_result deepCopy() {
      return new getNoteVersion_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Note)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteVersion_result)
        return this.equals((getNoteVersion_result)that);
      return false;
    }

    public boolean equals(getNoteVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getNoteVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNoteVersion_result typedOther = (getNoteVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getNoteVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResource_args implements TBase<getResource_args, getResource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResource_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField WITH_DATA_FIELD_DESC = new TField("withData", TType.BOOL, (short)3);
    private static final TField WITH_RECOGNITION_FIELD_DESC = new TField("withRecognition", TType.BOOL, (short)4);
    private static final TField WITH_ATTRIBUTES_FIELD_DESC = new TField("withAttributes", TType.BOOL, (short)5);
    private static final TField WITH_ALTERNATE_DATA_FIELD_DESC = new TField("withAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String guid;
    private boolean withData;
    private boolean withRecognition;
    private boolean withAttributes;
    private boolean withAlternateData;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      WITH_DATA((short)3, "withData"),
      WITH_RECOGNITION((short)4, "withRecognition"),
      WITH_ATTRIBUTES((short)5, "withAttributes"),
      WITH_ALTERNATE_DATA((short)6, "withAlternateData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // WITH_DATA
            return WITH_DATA;
          case 4: // WITH_RECOGNITION
            return WITH_RECOGNITION;
          case 5: // WITH_ATTRIBUTES
            return WITH_ATTRIBUTES;
          case 6: // WITH_ALTERNATE_DATA
            return WITH_ALTERNATE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WITHDATA_ISSET_ID = 0;
    private static final int __WITHRECOGNITION_ISSET_ID = 1;
    private static final int __WITHATTRIBUTES_ISSET_ID = 2;
    private static final int __WITHALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.WITH_DATA, new FieldMetaData("withData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RECOGNITION, new FieldMetaData("withRecognition", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_ATTRIBUTES, new FieldMetaData("withAttributes", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_ALTERNATE_DATA, new FieldMetaData("withAlternateData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResource_args.class, metaDataMap);
    }

    public getResource_args() {
    }

    public getResource_args(
      String authenticationToken,
      String guid,
      boolean withData,
      boolean withRecognition,
      boolean withAttributes,
      boolean withAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.withData = withData;
      setWithDataIsSet(true);
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
      this.withAttributes = withAttributes;
      setWithAttributesIsSet(true);
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_args(getResource_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.withData = other.withData;
      this.withRecognition = other.withRecognition;
      this.withAttributes = other.withAttributes;
      this.withAlternateData = other.withAlternateData;
    }

    public getResource_args deepCopy() {
      return new getResource_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setWithDataIsSet(false);
      this.withData = false;
      setWithRecognitionIsSet(false);
      this.withRecognition = false;
      setWithAttributesIsSet(false);
      this.withAttributes = false;
      setWithAlternateDataIsSet(false);
      this.withAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isWithData() {
      return this.withData;
    }

    public void setWithData(boolean withData) {
      this.withData = withData;
      setWithDataIsSet(true);
    }

    public void unsetWithData() {
      __isset_vector[__WITHDATA_ISSET_ID] = false;
    }

    /** Returns true if field withData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithData() {
      return __isset_vector[__WITHDATA_ISSET_ID];
    }

    public void setWithDataIsSet(boolean value) {
      __isset_vector[__WITHDATA_ISSET_ID] = value;
    }

    public boolean isWithRecognition() {
      return this.withRecognition;
    }

    public void setWithRecognition(boolean withRecognition) {
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
    }

    public void unsetWithRecognition() {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithRecognition() {
      return __isset_vector[__WITHRECOGNITION_ISSET_ID];
    }

    public void setWithRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithAttributes() {
      return this.withAttributes;
    }

    public void setWithAttributes(boolean withAttributes) {
      this.withAttributes = withAttributes;
      setWithAttributesIsSet(true);
    }

    public void unsetWithAttributes() {
      __isset_vector[__WITHATTRIBUTES_ISSET_ID] = false;
    }

    /** Returns true if field withAttributes is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAttributes() {
      return __isset_vector[__WITHATTRIBUTES_ISSET_ID];
    }

    public void setWithAttributesIsSet(boolean value) {
      __isset_vector[__WITHATTRIBUTES_ISSET_ID] = value;
    }

    public boolean isWithAlternateData() {
      return this.withAlternateData;
    }

    public void setWithAlternateData(boolean withAlternateData) {
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    public void unsetWithAlternateData() {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAlternateData() {
      return __isset_vector[__WITHALTERNATEDATA_ISSET_ID];
    }

    public void setWithAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case WITH_DATA:
        if (value == null) {
          unsetWithData();
        } else {
          setWithData((Boolean)value);
        }
        break;

      case WITH_RECOGNITION:
        if (value == null) {
          unsetWithRecognition();
        } else {
          setWithRecognition((Boolean)value);
        }
        break;

      case WITH_ATTRIBUTES:
        if (value == null) {
          unsetWithAttributes();
        } else {
          setWithAttributes((Boolean)value);
        }
        break;

      case WITH_ALTERNATE_DATA:
        if (value == null) {
          unsetWithAlternateData();
        } else {
          setWithAlternateData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case WITH_DATA:
        return new Boolean(isWithData());

      case WITH_RECOGNITION:
        return new Boolean(isWithRecognition());

      case WITH_ATTRIBUTES:
        return new Boolean(isWithAttributes());

      case WITH_ALTERNATE_DATA:
        return new Boolean(isWithAlternateData());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case WITH_DATA:
        return isSetWithData();
      case WITH_RECOGNITION:
        return isSetWithRecognition();
      case WITH_ATTRIBUTES:
        return isSetWithAttributes();
      case WITH_ALTERNATE_DATA:
        return isSetWithAlternateData();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_args)
        return this.equals((getResource_args)that);
      return false;
    }

    public boolean equals(getResource_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_withData = true;
      boolean that_present_withData = true;
      if (this_present_withData || that_present_withData) {
        if (!(this_present_withData && that_present_withData))
          return false;
        if (this.withData != that.withData)
          return false;
      }

      boolean this_present_withRecognition = true;
      boolean that_present_withRecognition = true;
      if (this_present_withRecognition || that_present_withRecognition) {
        if (!(this_present_withRecognition && that_present_withRecognition))
          return false;
        if (this.withRecognition != that.withRecognition)
          return false;
      }

      boolean this_present_withAttributes = true;
      boolean that_present_withAttributes = true;
      if (this_present_withAttributes || that_present_withAttributes) {
        if (!(this_present_withAttributes && that_present_withAttributes))
          return false;
        if (this.withAttributes != that.withAttributes)
          return false;
      }

      boolean this_present_withAlternateData = true;
      boolean that_present_withAlternateData = true;
      if (this_present_withAlternateData || that_present_withAlternateData) {
        if (!(this_present_withAlternateData && that_present_withAlternateData))
          return false;
        if (this.withAlternateData != that.withAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResource_args typedOther = (getResource_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithData()).compareTo(typedOther.isSetWithData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithData()) {        lastComparison = TBaseHelper.compareTo(this.withData, typedOther.withData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithRecognition()).compareTo(typedOther.isSetWithRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithRecognition()) {        lastComparison = TBaseHelper.compareTo(this.withRecognition, typedOther.withRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithAttributes()).compareTo(typedOther.isSetWithAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAttributes()) {        lastComparison = TBaseHelper.compareTo(this.withAttributes, typedOther.withAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithAlternateData()).compareTo(typedOther.isSetWithAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAlternateData()) {        lastComparison = TBaseHelper.compareTo(this.withAlternateData, typedOther.withAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_DATA
            if (field.type == TType.BOOL) {
              this.withData = iprot.readBool();
              setWithDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withRecognition = iprot.readBool();
              setWithRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_ATTRIBUTES
            if (field.type == TType.BOOL) {
              this.withAttributes = iprot.readBool();
              setWithAttributesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withAlternateData = iprot.readBool();
              setWithAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_DATA_FIELD_DESC);
      oprot.writeBool(this.withData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(this.withAttributes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResource_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withData:");
      sb.append(this.withData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withRecognition:");
      sb.append(this.withRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAttributes:");
      sb.append(this.withAttributes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAlternateData:");
      sb.append(this.withAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResource_result implements TBase<getResource_result, getResource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResource_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Resource success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Resource.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResource_result.class, metaDataMap);
    }

    public getResource_result() {
    }

    public getResource_result(
      com.evernote.edam.type.Resource success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_result(getResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Resource(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResource_result deepCopy() {
      return new getResource_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Resource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Resource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Resource)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_result)
        return this.equals((getResource_result)that);
      return false;
    }

    public boolean equals(getResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResource_result typedOther = (getResource_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Resource();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceApplicationData_args implements TBase<getResourceApplicationData_args, getResourceApplicationData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceApplicationData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceApplicationData_args.class, metaDataMap);
    }

    public getResourceApplicationData_args() {
    }

    public getResourceApplicationData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceApplicationData_args(getResourceApplicationData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceApplicationData_args deepCopy() {
      return new getResourceApplicationData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceApplicationData_args)
        return this.equals((getResourceApplicationData_args)that);
      return false;
    }

    public boolean equals(getResourceApplicationData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceApplicationData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceApplicationData_args typedOther = (getResourceApplicationData_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceApplicationData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceApplicationData_result implements TBase<getResourceApplicationData_result, getResourceApplicationData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceApplicationData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.LazyMap success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LazyMap.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceApplicationData_result.class, metaDataMap);
    }

    public getResourceApplicationData_result() {
    }

    public getResourceApplicationData_result(
      com.evernote.edam.type.LazyMap success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceApplicationData_result(getResourceApplicationData_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.LazyMap(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceApplicationData_result deepCopy() {
      return new getResourceApplicationData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.LazyMap getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.LazyMap success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.LazyMap)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceApplicationData_result)
        return this.equals((getResourceApplicationData_result)that);
      return false;
    }

    public boolean equals(getResourceApplicationData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceApplicationData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceApplicationData_result typedOther = (getResourceApplicationData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.LazyMap();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceApplicationData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceApplicationDataEntry_args implements TBase<getResourceApplicationDataEntry_args, getResourceApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);

    private String authenticationToken;
    private String guid;
    private String key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceApplicationDataEntry_args.class, metaDataMap);
    }

    public getResourceApplicationDataEntry_args() {
    }

    public getResourceApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceApplicationDataEntry_args(getResourceApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public getResourceApplicationDataEntry_args deepCopy() {
      return new getResourceApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceApplicationDataEntry_args)
        return this.equals((getResourceApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(getResourceApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceApplicationDataEntry_args typedOther = (getResourceApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceApplicationDataEntry_result implements TBase<getResourceApplicationDataEntry_result, getResourceApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceApplicationDataEntry_result.class, metaDataMap);
    }

    public getResourceApplicationDataEntry_result() {
    }

    public getResourceApplicationDataEntry_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceApplicationDataEntry_result(getResourceApplicationDataEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceApplicationDataEntry_result deepCopy() {
      return new getResourceApplicationDataEntry_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceApplicationDataEntry_result)
        return this.equals((getResourceApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(getResourceApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceApplicationDataEntry_result typedOther = (getResourceApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setResourceApplicationDataEntry_args implements TBase<setResourceApplicationDataEntry_args, setResourceApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setResourceApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);

    private String authenticationToken;
    private String guid;
    private String key;
    private String value;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setResourceApplicationDataEntry_args.class, metaDataMap);
    }

    public setResourceApplicationDataEntry_args() {
    }

    public setResourceApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key,
      String value)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setResourceApplicationDataEntry_args(setResourceApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public setResourceApplicationDataEntry_args deepCopy() {
      return new setResourceApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
      this.value = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setResourceApplicationDataEntry_args)
        return this.equals((setResourceApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(setResourceApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(setResourceApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setResourceApplicationDataEntry_args typedOther = (setResourceApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setResourceApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setResourceApplicationDataEntry_result implements TBase<setResourceApplicationDataEntry_result, setResourceApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setResourceApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setResourceApplicationDataEntry_result.class, metaDataMap);
    }

    public setResourceApplicationDataEntry_result() {
    }

    public setResourceApplicationDataEntry_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setResourceApplicationDataEntry_result(setResourceApplicationDataEntry_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public setResourceApplicationDataEntry_result deepCopy() {
      return new setResourceApplicationDataEntry_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setResourceApplicationDataEntry_result)
        return this.equals((setResourceApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(setResourceApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(setResourceApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setResourceApplicationDataEntry_result typedOther = (setResourceApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setResourceApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsetResourceApplicationDataEntry_args implements TBase<unsetResourceApplicationDataEntry_args, unsetResourceApplicationDataEntry_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("unsetResourceApplicationDataEntry_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)3);

    private String authenticationToken;
    private String guid;
    private String key;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid"),
      KEY((short)3, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          case 3: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(unsetResourceApplicationDataEntry_args.class, metaDataMap);
    }

    public unsetResourceApplicationDataEntry_args() {
    }

    public unsetResourceApplicationDataEntry_args(
      String authenticationToken,
      String guid,
      String key)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetResourceApplicationDataEntry_args(unsetResourceApplicationDataEntry_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public unsetResourceApplicationDataEntry_args deepCopy() {
      return new unsetResourceApplicationDataEntry_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      this.key = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been asigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetResourceApplicationDataEntry_args)
        return this.equals((unsetResourceApplicationDataEntry_args)that);
      return false;
    }

    public boolean equals(unsetResourceApplicationDataEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(unsetResourceApplicationDataEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unsetResourceApplicationDataEntry_args typedOther = (unsetResourceApplicationDataEntry_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {        lastComparison = TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("unsetResourceApplicationDataEntry_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsetResourceApplicationDataEntry_result implements TBase<unsetResourceApplicationDataEntry_result, unsetResourceApplicationDataEntry_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("unsetResourceApplicationDataEntry_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(unsetResourceApplicationDataEntry_result.class, metaDataMap);
    }

    public unsetResourceApplicationDataEntry_result() {
    }

    public unsetResourceApplicationDataEntry_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsetResourceApplicationDataEntry_result(unsetResourceApplicationDataEntry_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public unsetResourceApplicationDataEntry_result deepCopy() {
      return new unsetResourceApplicationDataEntry_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsetResourceApplicationDataEntry_result)
        return this.equals((unsetResourceApplicationDataEntry_result)that);
      return false;
    }

    public boolean equals(unsetResourceApplicationDataEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(unsetResourceApplicationDataEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unsetResourceApplicationDataEntry_result typedOther = (unsetResourceApplicationDataEntry_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("unsetResourceApplicationDataEntry_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateResource_args implements TBase<updateResource_args, updateResource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateResource_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField RESOURCE_FIELD_DESC = new TField("resource", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Resource resource;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      RESOURCE((short)2, "resource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // RESOURCE
            return RESOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.RESOURCE, new FieldMetaData("resource", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Resource.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateResource_args.class, metaDataMap);
    }

    public updateResource_args() {
    }

    public updateResource_args(
      String authenticationToken,
      com.evernote.edam.type.Resource resource)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.resource = resource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResource_args(updateResource_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetResource()) {
        this.resource = new com.evernote.edam.type.Resource(other.resource);
      }
    }

    public updateResource_args deepCopy() {
      return new updateResource_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.resource = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Resource getResource() {
      return this.resource;
    }

    public void setResource(com.evernote.edam.type.Resource resource) {
      this.resource = resource;
    }

    public void unsetResource() {
      this.resource = null;
    }

    /** Returns true if field resource is set (has been asigned a value) and false otherwise */
    public boolean isSetResource() {
      return this.resource != null;
    }

    public void setResourceIsSet(boolean value) {
      if (!value) {
        this.resource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case RESOURCE:
        if (value == null) {
          unsetResource();
        } else {
          setResource((com.evernote.edam.type.Resource)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case RESOURCE:
        return getResource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case RESOURCE:
        return isSetResource();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResource_args)
        return this.equals((updateResource_args)that);
      return false;
    }

    public boolean equals(updateResource_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_resource = true && this.isSetResource();
      boolean that_present_resource = true && that.isSetResource();
      if (this_present_resource || that_present_resource) {
        if (!(this_present_resource && that_present_resource))
          return false;
        if (!this.resource.equals(that.resource))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateResource_args typedOther = (updateResource_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResource()).compareTo(typedOther.isSetResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResource()) {        lastComparison = TBaseHelper.compareTo(this.resource, typedOther.resource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RESOURCE
            if (field.type == TType.STRUCT) {
              this.resource = new com.evernote.edam.type.Resource();
              this.resource.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        this.resource.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateResource_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resource:");
      if (this.resource == null) {
        sb.append("null");
      } else {
        sb.append(this.resource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateResource_result implements TBase<updateResource_result, updateResource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateResource_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateResource_result.class, metaDataMap);
    }

    public updateResource_result() {
    }

    public updateResource_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResource_result(updateResource_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateResource_result deepCopy() {
      return new updateResource_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResource_result)
        return this.equals((updateResource_result)that);
      return false;
    }

    public boolean equals(updateResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateResource_result typedOther = (updateResource_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceData_args implements TBase<getResourceData_args, getResourceData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceData_args.class, metaDataMap);
    }

    public getResourceData_args() {
    }

    public getResourceData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceData_args(getResourceData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceData_args deepCopy() {
      return new getResourceData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceData_args)
        return this.equals((getResourceData_args)that);
      return false;
    }

    public boolean equals(getResourceData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceData_args typedOther = (getResourceData_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceData_result implements TBase<getResourceData_result, getResourceData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceData_result.class, metaDataMap);
    }

    public getResourceData_result() {
    }

    public getResourceData_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceData_result(getResourceData_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceData_result deepCopy() {
      return new getResourceData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceData_result)
        return this.equals((getResourceData_result)that);
      return false;
    }

    public boolean equals(getResourceData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceData_result typedOther = (getResourceData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBytes();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceByHash_args implements TBase<getResourceByHash_args, getResourceByHash_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceByHash_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField CONTENT_HASH_FIELD_DESC = new TField("contentHash", TType.STRING, (short)3);
    private static final TField WITH_DATA_FIELD_DESC = new TField("withData", TType.BOOL, (short)4);
    private static final TField WITH_RECOGNITION_FIELD_DESC = new TField("withRecognition", TType.BOOL, (short)5);
    private static final TField WITH_ALTERNATE_DATA_FIELD_DESC = new TField("withAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String noteGuid;
    private byte[] contentHash;
    private boolean withData;
    private boolean withRecognition;
    private boolean withAlternateData;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTE_GUID((short)2, "noteGuid"),
      CONTENT_HASH((short)3, "contentHash"),
      WITH_DATA((short)4, "withData"),
      WITH_RECOGNITION((short)5, "withRecognition"),
      WITH_ALTERNATE_DATA((short)6, "withAlternateData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTE_GUID
            return NOTE_GUID;
          case 3: // CONTENT_HASH
            return CONTENT_HASH;
          case 4: // WITH_DATA
            return WITH_DATA;
          case 5: // WITH_RECOGNITION
            return WITH_RECOGNITION;
          case 6: // WITH_ALTERNATE_DATA
            return WITH_ALTERNATE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WITHDATA_ISSET_ID = 0;
    private static final int __WITHRECOGNITION_ISSET_ID = 1;
    private static final int __WITHALTERNATEDATA_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.CONTENT_HASH, new FieldMetaData("contentHash", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.WITH_DATA, new FieldMetaData("withData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_RECOGNITION, new FieldMetaData("withRecognition", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.WITH_ALTERNATE_DATA, new FieldMetaData("withAlternateData", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceByHash_args.class, metaDataMap);
    }

    public getResourceByHash_args() {
    }

    public getResourceByHash_args(
      String authenticationToken,
      String noteGuid,
      byte[] contentHash,
      boolean withData,
      boolean withRecognition,
      boolean withAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.contentHash = contentHash;
      this.withData = withData;
      setWithDataIsSet(true);
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceByHash_args(getResourceByHash_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      if (other.isSetContentHash()) {
        this.contentHash = new byte[other.contentHash.length];
        System.arraycopy(other.contentHash, 0, contentHash, 0, other.contentHash.length);
      }
      this.withData = other.withData;
      this.withRecognition = other.withRecognition;
      this.withAlternateData = other.withAlternateData;
    }

    public getResourceByHash_args deepCopy() {
      return new getResourceByHash_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      this.contentHash = null;
      setWithDataIsSet(false);
      this.withData = false;
      setWithRecognitionIsSet(false);
      this.withRecognition = false;
      setWithAlternateDataIsSet(false);
      this.withAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public byte[] getContentHash() {
      return this.contentHash;
    }

    public void setContentHash(byte[] contentHash) {
      this.contentHash = contentHash;
    }

    public void unsetContentHash() {
      this.contentHash = null;
    }

    /** Returns true if field contentHash is set (has been asigned a value) and false otherwise */
    public boolean isSetContentHash() {
      return this.contentHash != null;
    }

    public void setContentHashIsSet(boolean value) {
      if (!value) {
        this.contentHash = null;
      }
    }

    public boolean isWithData() {
      return this.withData;
    }

    public void setWithData(boolean withData) {
      this.withData = withData;
      setWithDataIsSet(true);
    }

    public void unsetWithData() {
      __isset_vector[__WITHDATA_ISSET_ID] = false;
    }

    /** Returns true if field withData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithData() {
      return __isset_vector[__WITHDATA_ISSET_ID];
    }

    public void setWithDataIsSet(boolean value) {
      __isset_vector[__WITHDATA_ISSET_ID] = value;
    }

    public boolean isWithRecognition() {
      return this.withRecognition;
    }

    public void setWithRecognition(boolean withRecognition) {
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
    }

    public void unsetWithRecognition() {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithRecognition() {
      return __isset_vector[__WITHRECOGNITION_ISSET_ID];
    }

    public void setWithRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithAlternateData() {
      return this.withAlternateData;
    }

    public void setWithAlternateData(boolean withAlternateData) {
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    public void unsetWithAlternateData() {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAlternateData() {
      return __isset_vector[__WITHALTERNATEDATA_ISSET_ID];
    }

    public void setWithAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = value;
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTE_GUID:
        if (value == null) {
          unsetNoteGuid();
        } else {
          setNoteGuid((String)value);
        }
        break;

      case CONTENT_HASH:
        if (value == null) {
          unsetContentHash();
        } else {
          setContentHash((byte[])value);
        }
        break;

      case WITH_DATA:
        if (value == null) {
          unsetWithData();
        } else {
          setWithData((Boolean)value);
        }
        break;

      case WITH_RECOGNITION:
        if (value == null) {
          unsetWithRecognition();
        } else {
          setWithRecognition((Boolean)value);
        }
        break;

      case WITH_ALTERNATE_DATA:
        if (value == null) {
          unsetWithAlternateData();
        } else {
          setWithAlternateData((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTE_GUID:
        return getNoteGuid();

      case CONTENT_HASH:
        return getContentHash();

      case WITH_DATA:
        return new Boolean(isWithData());

      case WITH_RECOGNITION:
        return new Boolean(isWithRecognition());

      case WITH_ALTERNATE_DATA:
        return new Boolean(isWithAlternateData());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTE_GUID:
        return isSetNoteGuid();
      case CONTENT_HASH:
        return isSetContentHash();
      case WITH_DATA:
        return isSetWithData();
      case WITH_RECOGNITION:
        return isSetWithRecognition();
      case WITH_ALTERNATE_DATA:
        return isSetWithAlternateData();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceByHash_args)
        return this.equals((getResourceByHash_args)that);
      return false;
    }

    public boolean equals(getResourceByHash_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_contentHash = true && this.isSetContentHash();
      boolean that_present_contentHash = true && that.isSetContentHash();
      if (this_present_contentHash || that_present_contentHash) {
        if (!(this_present_contentHash && that_present_contentHash))
          return false;
        if (TBaseHelper.compareTo(this.contentHash, that.contentHash) != 0)
          return false;
      }

      boolean this_present_withData = true;
      boolean that_present_withData = true;
      if (this_present_withData || that_present_withData) {
        if (!(this_present_withData && that_present_withData))
          return false;
        if (this.withData != that.withData)
          return false;
      }

      boolean this_present_withRecognition = true;
      boolean that_present_withRecognition = true;
      if (this_present_withRecognition || that_present_withRecognition) {
        if (!(this_present_withRecognition && that_present_withRecognition))
          return false;
        if (this.withRecognition != that.withRecognition)
          return false;
      }

      boolean this_present_withAlternateData = true;
      boolean that_present_withAlternateData = true;
      if (this_present_withAlternateData || that_present_withAlternateData) {
        if (!(this_present_withAlternateData && that_present_withAlternateData))
          return false;
        if (this.withAlternateData != that.withAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceByHash_args typedOther = (getResourceByHash_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {        lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContentHash()).compareTo(typedOther.isSetContentHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContentHash()) {        lastComparison = TBaseHelper.compareTo(this.contentHash, typedOther.contentHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithData()).compareTo(typedOther.isSetWithData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithData()) {        lastComparison = TBaseHelper.compareTo(this.withData, typedOther.withData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithRecognition()).compareTo(typedOther.isSetWithRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithRecognition()) {        lastComparison = TBaseHelper.compareTo(this.withRecognition, typedOther.withRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWithAlternateData()).compareTo(typedOther.isSetWithAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAlternateData()) {        lastComparison = TBaseHelper.compareTo(this.withAlternateData, typedOther.withAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT_HASH
            if (field.type == TType.STRING) {
              this.contentHash = iprot.readBytes();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_DATA
            if (field.type == TType.BOOL) {
              this.withData = iprot.readBool();
              setWithDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withRecognition = iprot.readBool();
              setWithRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withAlternateData = iprot.readBool();
              setWithAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      if (this.contentHash != null) {
        oprot.writeFieldBegin(CONTENT_HASH_FIELD_DESC);
        oprot.writeBinary(this.contentHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_DATA_FIELD_DESC);
      oprot.writeBool(this.withData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceByHash_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contentHash:");
      if (this.contentHash == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.contentHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withData:");
      sb.append(this.withData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withRecognition:");
      sb.append(this.withRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAlternateData:");
      sb.append(this.withAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceByHash_result implements TBase<getResourceByHash_result, getResourceByHash_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceByHash_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Resource success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Resource.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceByHash_result.class, metaDataMap);
    }

    public getResourceByHash_result() {
    }

    public getResourceByHash_result(
      com.evernote.edam.type.Resource success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceByHash_result(getResourceByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Resource(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceByHash_result deepCopy() {
      return new getResourceByHash_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Resource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Resource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Resource)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceByHash_result)
        return this.equals((getResourceByHash_result)that);
      return false;
    }

    public boolean equals(getResourceByHash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceByHash_result typedOther = (getResourceByHash_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Resource();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceRecognition_args implements TBase<getResourceRecognition_args, getResourceRecognition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceRecognition_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceRecognition_args.class, metaDataMap);
    }

    public getResourceRecognition_args() {
    }

    public getResourceRecognition_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceRecognition_args(getResourceRecognition_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceRecognition_args deepCopy() {
      return new getResourceRecognition_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceRecognition_args)
        return this.equals((getResourceRecognition_args)that);
      return false;
    }

    public boolean equals(getResourceRecognition_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceRecognition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceRecognition_args typedOther = (getResourceRecognition_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceRecognition_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceRecognition_result implements TBase<getResourceRecognition_result, getResourceRecognition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceRecognition_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceRecognition_result.class, metaDataMap);
    }

    public getResourceRecognition_result() {
    }

    public getResourceRecognition_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceRecognition_result(getResourceRecognition_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceRecognition_result deepCopy() {
      return new getResourceRecognition_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceRecognition_result)
        return this.equals((getResourceRecognition_result)that);
      return false;
    }

    public boolean equals(getResourceRecognition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceRecognition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceRecognition_result typedOther = (getResourceRecognition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBytes();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceRecognition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAlternateData_args implements TBase<getResourceAlternateData_args, getResourceAlternateData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAlternateData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceAlternateData_args.class, metaDataMap);
    }

    public getResourceAlternateData_args() {
    }

    public getResourceAlternateData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAlternateData_args(getResourceAlternateData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceAlternateData_args deepCopy() {
      return new getResourceAlternateData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAlternateData_args)
        return this.equals((getResourceAlternateData_args)that);
      return false;
    }

    public boolean equals(getResourceAlternateData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceAlternateData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceAlternateData_args typedOther = (getResourceAlternateData_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceAlternateData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAlternateData_result implements TBase<getResourceAlternateData_result, getResourceAlternateData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAlternateData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceAlternateData_result.class, metaDataMap);
    }

    public getResourceAlternateData_result() {
    }

    public getResourceAlternateData_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAlternateData_result(getResourceAlternateData_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceAlternateData_result deepCopy() {
      return new getResourceAlternateData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAlternateData_result)
        return this.equals((getResourceAlternateData_result)that);
      return false;
    }

    public boolean equals(getResourceAlternateData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceAlternateData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceAlternateData_result typedOther = (getResourceAlternateData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBytes();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceAlternateData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAttributes_args implements TBase<getResourceAttributes_args, getResourceAttributes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAttributes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceAttributes_args.class, metaDataMap);
    }

    public getResourceAttributes_args() {
    }

    public getResourceAttributes_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAttributes_args(getResourceAttributes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceAttributes_args deepCopy() {
      return new getResourceAttributes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAttributes_args)
        return this.equals((getResourceAttributes_args)that);
      return false;
    }

    public boolean equals(getResourceAttributes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceAttributes_args typedOther = (getResourceAttributes_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceAttributes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAttributes_result implements TBase<getResourceAttributes_result, getResourceAttributes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAttributes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.ResourceAttributes success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.ResourceAttributes.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getResourceAttributes_result.class, metaDataMap);
    }

    public getResourceAttributes_result() {
    }

    public getResourceAttributes_result(
      com.evernote.edam.type.ResourceAttributes success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAttributes_result(getResourceAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.ResourceAttributes(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceAttributes_result deepCopy() {
      return new getResourceAttributes_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.ResourceAttributes getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.ResourceAttributes success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.ResourceAttributes)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAttributes_result)
        return this.equals((getResourceAttributes_result)that);
      return false;
    }

    public boolean equals(getResourceAttributes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getResourceAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getResourceAttributes_result typedOther = (getResourceAttributes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.ResourceAttributes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAccountSize_args implements TBase<getAccountSize_args, getAccountSize_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAccountSize_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAccountSize_args.class, metaDataMap);
    }

    public getAccountSize_args() {
    }

    public getAccountSize_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountSize_args(getAccountSize_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getAccountSize_args deepCopy() {
      return new getAccountSize_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountSize_args)
        return this.equals((getAccountSize_args)that);
      return false;
    }

    public boolean equals(getAccountSize_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccountSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccountSize_args typedOther = (getAccountSize_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getAccountSize_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAccountSize_result implements TBase<getAccountSize_result, getAccountSize_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAccountSize_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private long success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAccountSize_result.class, metaDataMap);
    }

    public getAccountSize_result() {
    }

    public getAccountSize_result(
      long success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountSize_result(getAccountSize_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getAccountSize_result deepCopy() {
      return new getAccountSize_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Long(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountSize_result)
        return this.equals((getAccountSize_result)that);
      return false;
    }

    public boolean equals(getAccountSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getAccountSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAccountSize_result typedOther = (getAccountSize_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getAccountSize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAds_args implements TBase<getAds_args, getAds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAds_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AD_PARAMETERS_FIELD_DESC = new TField("adParameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private AdParameters adParameters;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      AD_PARAMETERS((short)2, "adParameters");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // AD_PARAMETERS
            return AD_PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AD_PARAMETERS, new FieldMetaData("adParameters", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, AdParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAds_args.class, metaDataMap);
    }

    public getAds_args() {
    }

    public getAds_args(
      String authenticationToken,
      AdParameters adParameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.adParameters = adParameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_args(getAds_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetAdParameters()) {
        this.adParameters = new AdParameters(other.adParameters);
      }
    }

    public getAds_args deepCopy() {
      return new getAds_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.adParameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public AdParameters getAdParameters() {
      return this.adParameters;
    }

    public void setAdParameters(AdParameters adParameters) {
      this.adParameters = adParameters;
    }

    public void unsetAdParameters() {
      this.adParameters = null;
    }

    /** Returns true if field adParameters is set (has been asigned a value) and false otherwise */
    public boolean isSetAdParameters() {
      return this.adParameters != null;
    }

    public void setAdParametersIsSet(boolean value) {
      if (!value) {
        this.adParameters = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case AD_PARAMETERS:
        if (value == null) {
          unsetAdParameters();
        } else {
          setAdParameters((AdParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case AD_PARAMETERS:
        return getAdParameters();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case AD_PARAMETERS:
        return isSetAdParameters();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_args)
        return this.equals((getAds_args)that);
      return false;
    }

    public boolean equals(getAds_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_adParameters = true && this.isSetAdParameters();
      boolean that_present_adParameters = true && that.isSetAdParameters();
      if (this_present_adParameters || that_present_adParameters) {
        if (!(this_present_adParameters && that_present_adParameters))
          return false;
        if (!this.adParameters.equals(that.adParameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAds_args typedOther = (getAds_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdParameters()).compareTo(typedOther.isSetAdParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdParameters()) {        lastComparison = TBaseHelper.compareTo(this.adParameters, typedOther.adParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AD_PARAMETERS
            if (field.type == TType.STRUCT) {
              this.adParameters = new AdParameters();
              this.adParameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.adParameters != null) {
        oprot.writeFieldBegin(AD_PARAMETERS_FIELD_DESC);
        this.adParameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getAds_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adParameters:");
      if (this.adParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.adParameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAds_result implements TBase<getAds_result, getAds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private List<com.evernote.edam.type.Ad> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.Ad.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getAds_result.class, metaDataMap);
    }

    public getAds_result() {
    }

    public getAds_result(
      List<com.evernote.edam.type.Ad> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_result(getAds_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.Ad> __this__success = new ArrayList<com.evernote.edam.type.Ad>();
        for (com.evernote.edam.type.Ad other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.Ad(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getAds_result deepCopy() {
      return new getAds_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.Ad> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.Ad elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.Ad>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.Ad> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.Ad> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.Ad>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_result)
        return this.equals((getAds_result)that);
      return false;
    }

    public boolean equals(getAds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAds_result typedOther = (getAds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list131 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.Ad>(_list131.size);
                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                {
                  com.evernote.edam.type.Ad _elem133;
                  _elem133 = new com.evernote.edam.type.Ad();
                  _elem133.read(iprot);
                  this.success.add(_elem133);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.Ad _iter134 : this.success)
          {
            _iter134.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRandomAd_args implements TBase<getRandomAd_args, getRandomAd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getRandomAd_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AD_PARAMETERS_FIELD_DESC = new TField("adParameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private AdParameters adParameters;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      AD_PARAMETERS((short)2, "adParameters");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // AD_PARAMETERS
            return AD_PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AD_PARAMETERS, new FieldMetaData("adParameters", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, AdParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getRandomAd_args.class, metaDataMap);
    }

    public getRandomAd_args() {
    }

    public getRandomAd_args(
      String authenticationToken,
      AdParameters adParameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.adParameters = adParameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomAd_args(getRandomAd_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetAdParameters()) {
        this.adParameters = new AdParameters(other.adParameters);
      }
    }

    public getRandomAd_args deepCopy() {
      return new getRandomAd_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.adParameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public AdParameters getAdParameters() {
      return this.adParameters;
    }

    public void setAdParameters(AdParameters adParameters) {
      this.adParameters = adParameters;
    }

    public void unsetAdParameters() {
      this.adParameters = null;
    }

    /** Returns true if field adParameters is set (has been asigned a value) and false otherwise */
    public boolean isSetAdParameters() {
      return this.adParameters != null;
    }

    public void setAdParametersIsSet(boolean value) {
      if (!value) {
        this.adParameters = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case AD_PARAMETERS:
        if (value == null) {
          unsetAdParameters();
        } else {
          setAdParameters((AdParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case AD_PARAMETERS:
        return getAdParameters();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case AD_PARAMETERS:
        return isSetAdParameters();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomAd_args)
        return this.equals((getRandomAd_args)that);
      return false;
    }

    public boolean equals(getRandomAd_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_adParameters = true && this.isSetAdParameters();
      boolean that_present_adParameters = true && that.isSetAdParameters();
      if (this_present_adParameters || that_present_adParameters) {
        if (!(this_present_adParameters && that_present_adParameters))
          return false;
        if (!this.adParameters.equals(that.adParameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getRandomAd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRandomAd_args typedOther = (getRandomAd_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdParameters()).compareTo(typedOther.isSetAdParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdParameters()) {        lastComparison = TBaseHelper.compareTo(this.adParameters, typedOther.adParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AD_PARAMETERS
            if (field.type == TType.STRUCT) {
              this.adParameters = new AdParameters();
              this.adParameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.adParameters != null) {
        oprot.writeFieldBegin(AD_PARAMETERS_FIELD_DESC);
        this.adParameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomAd_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adParameters:");
      if (this.adParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.adParameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRandomAd_result implements TBase<getRandomAd_result, getRandomAd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getRandomAd_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Ad success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      SYSTEM_EXCEPTION((short)2, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Ad.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getRandomAd_result.class, metaDataMap);
    }

    public getRandomAd_result() {
    }

    public getRandomAd_result(
      com.evernote.edam.type.Ad success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomAd_result(getRandomAd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Ad(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getRandomAd_result deepCopy() {
      return new getRandomAd_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Ad getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Ad success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Ad)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomAd_result)
        return this.equals((getRandomAd_result)that);
      return false;
    }

    public boolean equals(getRandomAd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getRandomAd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRandomAd_result typedOther = (getRandomAd_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Ad();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomAd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicNotebook_args implements TBase<getPublicNotebook_args, getPublicNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicNotebook_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
    private static final TField PUBLIC_URI_FIELD_DESC = new TField("publicUri", TType.STRING, (short)2);

    private int userId;
    private String publicUri;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PUBLIC_URI((short)2, "publicUri");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PUBLIC_URI
            return PUBLIC_URI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32          , "UserID")));
      tmpMap.put(_Fields.PUBLIC_URI, new FieldMetaData("publicUri", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getPublicNotebook_args.class, metaDataMap);
    }

    public getPublicNotebook_args() {
    }

    public getPublicNotebook_args(
      int userId,
      String publicUri)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.publicUri = publicUri;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicNotebook_args(getPublicNotebook_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.userId = other.userId;
      if (other.isSetPublicUri()) {
        this.publicUri = other.publicUri;
      }
    }

    public getPublicNotebook_args deepCopy() {
      return new getPublicNotebook_args(this);
    }

    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.publicUri = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public void setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been asigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public String getPublicUri() {
      return this.publicUri;
    }

    public void setPublicUri(String publicUri) {
      this.publicUri = publicUri;
    }

    public void unsetPublicUri() {
      this.publicUri = null;
    }

    /** Returns true if field publicUri is set (has been asigned a value) and false otherwise */
    public boolean isSetPublicUri() {
      return this.publicUri != null;
    }

    public void setPublicUriIsSet(boolean value) {
      if (!value) {
        this.publicUri = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case PUBLIC_URI:
        if (value == null) {
          unsetPublicUri();
        } else {
          setPublicUri((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return new Integer(getUserId());

      case PUBLIC_URI:
        return getPublicUri();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PUBLIC_URI:
        return isSetPublicUri();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicNotebook_args)
        return this.equals((getPublicNotebook_args)that);
      return false;
    }

    public boolean equals(getPublicNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_publicUri = true && this.isSetPublicUri();
      boolean that_present_publicUri = true && that.isSetPublicUri();
      if (this_present_publicUri || that_present_publicUri) {
        if (!(this_present_publicUri && that_present_publicUri))
          return false;
        if (!this.publicUri.equals(that.publicUri))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getPublicNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPublicNotebook_args typedOther = (getPublicNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {        lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublicUri()).compareTo(typedOther.isSetPublicUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicUri()) {        lastComparison = TBaseHelper.compareTo(this.publicUri, typedOther.publicUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userId = iprot.readI32();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PUBLIC_URI
            if (field.type == TType.STRING) {
              this.publicUri = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userId);
      oprot.writeFieldEnd();
      if (this.publicUri != null) {
        oprot.writeFieldBegin(PUBLIC_URI_FIELD_DESC);
        oprot.writeString(this.publicUri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicNotebook_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicUri:");
      if (this.publicUri == null) {
        sb.append("null");
      } else {
        sb.append(this.publicUri);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicNotebook_result implements TBase<getPublicNotebook_result, getPublicNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getPublicNotebook_result.class, metaDataMap);
    }

    public getPublicNotebook_result() {
    }

    public getPublicNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicNotebook_result(getPublicNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getPublicNotebook_result deepCopy() {
      return new getPublicNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.Notebook)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicNotebook_result)
        return this.equals((getPublicNotebook_result)that);
      return false;
    }

    public boolean equals(getPublicNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getPublicNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPublicNotebook_result typedOther = (getPublicNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getPublicNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSharedNotebook_args implements TBase<createSharedNotebook_args, createSharedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SHARED_NOTEBOOK_FIELD_DESC = new TField("sharedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SharedNotebook sharedNotebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      SHARED_NOTEBOOK((short)2, "sharedNotebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // SHARED_NOTEBOOK
            return SHARED_NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SHARED_NOTEBOOK, new FieldMetaData("sharedNotebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createSharedNotebook_args.class, metaDataMap);
    }

    public createSharedNotebook_args() {
    }

    public createSharedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.SharedNotebook sharedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.sharedNotebook = sharedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedNotebook_args(createSharedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSharedNotebook()) {
        this.sharedNotebook = new com.evernote.edam.type.SharedNotebook(other.sharedNotebook);
      }
    }

    public createSharedNotebook_args deepCopy() {
      return new createSharedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.sharedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SharedNotebook getSharedNotebook() {
      return this.sharedNotebook;
    }

    public void setSharedNotebook(com.evernote.edam.type.SharedNotebook sharedNotebook) {
      this.sharedNotebook = sharedNotebook;
    }

    public void unsetSharedNotebook() {
      this.sharedNotebook = null;
    }

    /** Returns true if field sharedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetSharedNotebook() {
      return this.sharedNotebook != null;
    }

    public void setSharedNotebookIsSet(boolean value) {
      if (!value) {
        this.sharedNotebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case SHARED_NOTEBOOK:
        if (value == null) {
          unsetSharedNotebook();
        } else {
          setSharedNotebook((com.evernote.edam.type.SharedNotebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case SHARED_NOTEBOOK:
        return getSharedNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case SHARED_NOTEBOOK:
        return isSetSharedNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedNotebook_args)
        return this.equals((createSharedNotebook_args)that);
      return false;
    }

    public boolean equals(createSharedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_sharedNotebook = true && this.isSetSharedNotebook();
      boolean that_present_sharedNotebook = true && that.isSetSharedNotebook();
      if (this_present_sharedNotebook || that_present_sharedNotebook) {
        if (!(this_present_sharedNotebook && that_present_sharedNotebook))
          return false;
        if (!this.sharedNotebook.equals(that.sharedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createSharedNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSharedNotebook_args typedOther = (createSharedNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSharedNotebook()).compareTo(typedOther.isSetSharedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebook, typedOther.sharedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SHARED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.sharedNotebook = new com.evernote.edam.type.SharedNotebook();
              this.sharedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.sharedNotebook != null) {
        oprot.writeFieldBegin(SHARED_NOTEBOOK_FIELD_DESC);
        this.sharedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createSharedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedNotebook:");
      if (this.sharedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSharedNotebook_result implements TBase<createSharedNotebook_result, createSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SharedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createSharedNotebook_result.class, metaDataMap);
    }

    public createSharedNotebook_result() {
    }

    public createSharedNotebook_result(
      com.evernote.edam.type.SharedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedNotebook_result(createSharedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createSharedNotebook_result deepCopy() {
      return new createSharedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SharedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.SharedNotebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedNotebook_result)
        return this.equals((createSharedNotebook_result)that);
      return false;
    }

    public boolean equals(createSharedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createSharedNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSharedNotebook_result typedOther = (createSharedNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SharedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createSharedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageToSharedNotebookMembers_args implements TBase<sendMessageToSharedNotebookMembers_args, sendMessageToSharedNotebookMembers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_GUID_FIELD_DESC = new TField("notebookGuid", TType.STRING, (short)2);
    private static final TField MESSAGE_TEXT_FIELD_DESC = new TField("messageText", TType.STRING, (short)3);
    private static final TField RECIPIENTS_FIELD_DESC = new TField("recipients", TType.LIST, (short)4);

    private String authenticationToken;
    private String notebookGuid;
    private String messageText;
    private List<String> recipients;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      NOTEBOOK_GUID((short)2, "notebookGuid"),
      MESSAGE_TEXT((short)3, "messageText"),
      RECIPIENTS((short)4, "recipients");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // NOTEBOOK_GUID
            return NOTEBOOK_GUID;
          case 3: // MESSAGE_TEXT
            return MESSAGE_TEXT;
          case 4: // RECIPIENTS
            return RECIPIENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTEBOOK_GUID, new FieldMetaData("notebookGuid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      tmpMap.put(_Fields.MESSAGE_TEXT, new FieldMetaData("messageText", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.RECIPIENTS, new FieldMetaData("recipients", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_args.class, metaDataMap);
    }

    public sendMessageToSharedNotebookMembers_args() {
    }

    public sendMessageToSharedNotebookMembers_args(
      String authenticationToken,
      String notebookGuid,
      String messageText,
      List<String> recipients)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebookGuid = notebookGuid;
      this.messageText = messageText;
      this.recipients = recipients;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageToSharedNotebookMembers_args(sendMessageToSharedNotebookMembers_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebookGuid()) {
        this.notebookGuid = other.notebookGuid;
      }
      if (other.isSetMessageText()) {
        this.messageText = other.messageText;
      }
      if (other.isSetRecipients()) {
        List<String> __this__recipients = new ArrayList<String>();
        for (String other_element : other.recipients) {
          __this__recipients.add(other_element);
        }
        this.recipients = __this__recipients;
      }
    }

    public sendMessageToSharedNotebookMembers_args deepCopy() {
      return new sendMessageToSharedNotebookMembers_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebookGuid = null;
      this.messageText = null;
      this.recipients = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNotebookGuid() {
      return this.notebookGuid;
    }

    public void setNotebookGuid(String notebookGuid) {
      this.notebookGuid = notebookGuid;
    }

    public void unsetNotebookGuid() {
      this.notebookGuid = null;
    }

    /** Returns true if field notebookGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebookGuid() {
      return this.notebookGuid != null;
    }

    public void setNotebookGuidIsSet(boolean value) {
      if (!value) {
        this.notebookGuid = null;
      }
    }

    public String getMessageText() {
      return this.messageText;
    }

    public void setMessageText(String messageText) {
      this.messageText = messageText;
    }

    public void unsetMessageText() {
      this.messageText = null;
    }

    /** Returns true if field messageText is set (has been asigned a value) and false otherwise */
    public boolean isSetMessageText() {
      return this.messageText != null;
    }

    public void setMessageTextIsSet(boolean value) {
      if (!value) {
        this.messageText = null;
      }
    }

    public int getRecipientsSize() {
      return (this.recipients == null) ? 0 : this.recipients.size();
    }

    public java.util.Iterator<String> getRecipientsIterator() {
      return (this.recipients == null) ? null : this.recipients.iterator();
    }

    public void addToRecipients(String elem) {
      if (this.recipients == null) {
        this.recipients = new ArrayList<String>();
      }
      this.recipients.add(elem);
    }

    public List<String> getRecipients() {
      return this.recipients;
    }

    public void setRecipients(List<String> recipients) {
      this.recipients = recipients;
    }

    public void unsetRecipients() {
      this.recipients = null;
    }

    /** Returns true if field recipients is set (has been asigned a value) and false otherwise */
    public boolean isSetRecipients() {
      return this.recipients != null;
    }

    public void setRecipientsIsSet(boolean value) {
      if (!value) {
        this.recipients = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case NOTEBOOK_GUID:
        if (value == null) {
          unsetNotebookGuid();
        } else {
          setNotebookGuid((String)value);
        }
        break;

      case MESSAGE_TEXT:
        if (value == null) {
          unsetMessageText();
        } else {
          setMessageText((String)value);
        }
        break;

      case RECIPIENTS:
        if (value == null) {
          unsetRecipients();
        } else {
          setRecipients((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case NOTEBOOK_GUID:
        return getNotebookGuid();

      case MESSAGE_TEXT:
        return getMessageText();

      case RECIPIENTS:
        return getRecipients();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case NOTEBOOK_GUID:
        return isSetNotebookGuid();
      case MESSAGE_TEXT:
        return isSetMessageText();
      case RECIPIENTS:
        return isSetRecipients();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageToSharedNotebookMembers_args)
        return this.equals((sendMessageToSharedNotebookMembers_args)that);
      return false;
    }

    public boolean equals(sendMessageToSharedNotebookMembers_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebookGuid = true && this.isSetNotebookGuid();
      boolean that_present_notebookGuid = true && that.isSetNotebookGuid();
      if (this_present_notebookGuid || that_present_notebookGuid) {
        if (!(this_present_notebookGuid && that_present_notebookGuid))
          return false;
        if (!this.notebookGuid.equals(that.notebookGuid))
          return false;
      }

      boolean this_present_messageText = true && this.isSetMessageText();
      boolean that_present_messageText = true && that.isSetMessageText();
      if (this_present_messageText || that_present_messageText) {
        if (!(this_present_messageText && that_present_messageText))
          return false;
        if (!this.messageText.equals(that.messageText))
          return false;
      }

      boolean this_present_recipients = true && this.isSetRecipients();
      boolean that_present_recipients = true && that.isSetRecipients();
      if (this_present_recipients || that_present_recipients) {
        if (!(this_present_recipients && that_present_recipients))
          return false;
        if (!this.recipients.equals(that.recipients))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(sendMessageToSharedNotebookMembers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendMessageToSharedNotebookMembers_args typedOther = (sendMessageToSharedNotebookMembers_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotebookGuid()).compareTo(typedOther.isSetNotebookGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebookGuid()) {        lastComparison = TBaseHelper.compareTo(this.notebookGuid, typedOther.notebookGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageText()).compareTo(typedOther.isSetMessageText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageText()) {        lastComparison = TBaseHelper.compareTo(this.messageText, typedOther.messageText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecipients()).compareTo(typedOther.isSetRecipients());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecipients()) {        lastComparison = TBaseHelper.compareTo(this.recipients, typedOther.recipients);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK_GUID
            if (field.type == TType.STRING) {
              this.notebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_TEXT
            if (field.type == TType.STRING) {
              this.messageText = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // RECIPIENTS
            if (field.type == TType.LIST) {
              {
                TList _list135 = iprot.readListBegin();
                this.recipients = new ArrayList<String>(_list135.size);
                for (int _i136 = 0; _i136 < _list135.size; ++_i136)
                {
                  String _elem137;
                  _elem137 = iprot.readString();
                  this.recipients.add(_elem137);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebookGuid != null) {
        oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
        oprot.writeString(this.notebookGuid);
        oprot.writeFieldEnd();
      }
      if (this.messageText != null) {
        oprot.writeFieldBegin(MESSAGE_TEXT_FIELD_DESC);
        oprot.writeString(this.messageText);
        oprot.writeFieldEnd();
      }
      if (this.recipients != null) {
        oprot.writeFieldBegin(RECIPIENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.recipients.size()));
          for (String _iter138 : this.recipients)
          {
            oprot.writeString(_iter138);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebookGuid:");
      if (this.notebookGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.notebookGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageText:");
      if (this.messageText == null) {
        sb.append("null");
      } else {
        sb.append(this.messageText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recipients:");
      if (this.recipients == null) {
        sb.append("null");
      } else {
        sb.append(this.recipients);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageToSharedNotebookMembers_result implements TBase<sendMessageToSharedNotebookMembers_result, sendMessageToSharedNotebookMembers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_result.class, metaDataMap);
    }

    public sendMessageToSharedNotebookMembers_result() {
    }

    public sendMessageToSharedNotebookMembers_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageToSharedNotebookMembers_result(sendMessageToSharedNotebookMembers_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public sendMessageToSharedNotebookMembers_result deepCopy() {
      return new sendMessageToSharedNotebookMembers_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageToSharedNotebookMembers_result)
        return this.equals((sendMessageToSharedNotebookMembers_result)that);
      return false;
    }

    public boolean equals(sendMessageToSharedNotebookMembers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(sendMessageToSharedNotebookMembers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendMessageToSharedNotebookMembers_result typedOther = (sendMessageToSharedNotebookMembers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSharedNotebooks_args implements TBase<listSharedNotebooks_args, listSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_args.class, metaDataMap);
    }

    public listSharedNotebooks_args() {
    }

    public listSharedNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSharedNotebooks_args(listSharedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listSharedNotebooks_args deepCopy() {
      return new listSharedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSharedNotebooks_args)
        return this.equals((listSharedNotebooks_args)that);
      return false;
    }

    public boolean equals(listSharedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listSharedNotebooks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSharedNotebooks_args typedOther = (listSharedNotebooks_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listSharedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSharedNotebooks_result implements TBase<listSharedNotebooks_result, listSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private List<com.evernote.edam.type.SharedNotebook> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_result.class, metaDataMap);
    }

    public listSharedNotebooks_result() {
    }

    public listSharedNotebooks_result(
      List<com.evernote.edam.type.SharedNotebook> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSharedNotebooks_result(listSharedNotebooks_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.SharedNotebook> __this__success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
        for (com.evernote.edam.type.SharedNotebook other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.SharedNotebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listSharedNotebooks_result deepCopy() {
      return new listSharedNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.SharedNotebook> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.SharedNotebook elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.SharedNotebook> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.SharedNotebook> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.SharedNotebook>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSharedNotebooks_result)
        return this.equals((listSharedNotebooks_result)that);
      return false;
    }

    public boolean equals(listSharedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listSharedNotebooks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listSharedNotebooks_result typedOther = (listSharedNotebooks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list139 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>(_list139.size);
                for (int _i140 = 0; _i140 < _list139.size; ++_i140)
                {
                  com.evernote.edam.type.SharedNotebook _elem141;
                  _elem141 = new com.evernote.edam.type.SharedNotebook();
                  _elem141.read(iprot);
                  this.success.add(_elem141);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.SharedNotebook _iter142 : this.success)
          {
            _iter142.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listSharedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSharedNotebooks_args implements TBase<expungeSharedNotebooks_args, expungeSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SHARED_NOTEBOOK_IDS_FIELD_DESC = new TField("sharedNotebookIds", TType.LIST, (short)2);

    private String authenticationToken;
    private List<Long> sharedNotebookIds;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      SHARED_NOTEBOOK_IDS((short)2, "sharedNotebookIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // SHARED_NOTEBOOK_IDS
            return SHARED_NOTEBOOK_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SHARED_NOTEBOOK_IDS, new FieldMetaData("sharedNotebookIds", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_args.class, metaDataMap);
    }

    public expungeSharedNotebooks_args() {
    }

    public expungeSharedNotebooks_args(
      String authenticationToken,
      List<Long> sharedNotebookIds)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.sharedNotebookIds = sharedNotebookIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSharedNotebooks_args(expungeSharedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSharedNotebookIds()) {
        List<Long> __this__sharedNotebookIds = new ArrayList<Long>();
        for (Long other_element : other.sharedNotebookIds) {
          __this__sharedNotebookIds.add(other_element);
        }
        this.sharedNotebookIds = __this__sharedNotebookIds;
      }
    }

    public expungeSharedNotebooks_args deepCopy() {
      return new expungeSharedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.sharedNotebookIds = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getSharedNotebookIdsSize() {
      return (this.sharedNotebookIds == null) ? 0 : this.sharedNotebookIds.size();
    }

    public java.util.Iterator<Long> getSharedNotebookIdsIterator() {
      return (this.sharedNotebookIds == null) ? null : this.sharedNotebookIds.iterator();
    }

    public void addToSharedNotebookIds(long elem) {
      if (this.sharedNotebookIds == null) {
        this.sharedNotebookIds = new ArrayList<Long>();
      }
      this.sharedNotebookIds.add(elem);
    }

    public List<Long> getSharedNotebookIds() {
      return this.sharedNotebookIds;
    }

    public void setSharedNotebookIds(List<Long> sharedNotebookIds) {
      this.sharedNotebookIds = sharedNotebookIds;
    }

    public void unsetSharedNotebookIds() {
      this.sharedNotebookIds = null;
    }

    /** Returns true if field sharedNotebookIds is set (has been asigned a value) and false otherwise */
    public boolean isSetSharedNotebookIds() {
      return this.sharedNotebookIds != null;
    }

    public void setSharedNotebookIdsIsSet(boolean value) {
      if (!value) {
        this.sharedNotebookIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case SHARED_NOTEBOOK_IDS:
        if (value == null) {
          unsetSharedNotebookIds();
        } else {
          setSharedNotebookIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case SHARED_NOTEBOOK_IDS:
        return getSharedNotebookIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case SHARED_NOTEBOOK_IDS:
        return isSetSharedNotebookIds();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSharedNotebooks_args)
        return this.equals((expungeSharedNotebooks_args)that);
      return false;
    }

    public boolean equals(expungeSharedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_sharedNotebookIds = true && this.isSetSharedNotebookIds();
      boolean that_present_sharedNotebookIds = true && that.isSetSharedNotebookIds();
      if (this_present_sharedNotebookIds || that_present_sharedNotebookIds) {
        if (!(this_present_sharedNotebookIds && that_present_sharedNotebookIds))
          return false;
        if (!this.sharedNotebookIds.equals(that.sharedNotebookIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeSharedNotebooks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeSharedNotebooks_args typedOther = (expungeSharedNotebooks_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSharedNotebookIds()).compareTo(typedOther.isSetSharedNotebookIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedNotebookIds()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebookIds, typedOther.sharedNotebookIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SHARED_NOTEBOOK_IDS
            if (field.type == TType.LIST) {
              {
                TList _list143 = iprot.readListBegin();
                this.sharedNotebookIds = new ArrayList<Long>(_list143.size);
                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
                {
                  long _elem145;
                  _elem145 = iprot.readI64();
                  this.sharedNotebookIds.add(_elem145);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.sharedNotebookIds != null) {
        oprot.writeFieldBegin(SHARED_NOTEBOOK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.sharedNotebookIds.size()));
          for (long _iter146 : this.sharedNotebookIds)
          {
            oprot.writeI64(_iter146);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedNotebookIds:");
      if (this.sharedNotebookIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebookIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSharedNotebooks_result implements TBase<expungeSharedNotebooks_result, expungeSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_result.class, metaDataMap);
    }

    public expungeSharedNotebooks_result() {
    }

    public expungeSharedNotebooks_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSharedNotebooks_result(expungeSharedNotebooks_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeSharedNotebooks_result deepCopy() {
      return new expungeSharedNotebooks_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSharedNotebooks_result)
        return this.equals((expungeSharedNotebooks_result)that);
      return false;
    }

    public boolean equals(expungeSharedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeSharedNotebooks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeSharedNotebooks_result typedOther = (expungeSharedNotebooks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createLinkedNotebook_args implements TBase<createLinkedNotebook_args, createLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      LINKED_NOTEBOOK((short)2, "linkedNotebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // LINKED_NOTEBOOK
            return LINKED_NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_args.class, metaDataMap);
    }

    public createLinkedNotebook_args() {
    }

    public createLinkedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLinkedNotebook_args(createLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public createLinkedNotebook_args deepCopy() {
      return new createLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case LINKED_NOTEBOOK:
        if (value == null) {
          unsetLinkedNotebook();
        } else {
          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case LINKED_NOTEBOOK:
        return getLinkedNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case LINKED_NOTEBOOK:
        return isSetLinkedNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLinkedNotebook_args)
        return this.equals((createLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(createLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createLinkedNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createLinkedNotebook_args typedOther = (createLinkedNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createLinkedNotebook_result implements TBase<createLinkedNotebook_result, createLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.LinkedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_result.class, metaDataMap);
    }

    public createLinkedNotebook_result() {
    }

    public createLinkedNotebook_result(
      com.evernote.edam.type.LinkedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLinkedNotebook_result(createLinkedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.LinkedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createLinkedNotebook_result deepCopy() {
      return new createLinkedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.LinkedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.LinkedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.LinkedNotebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLinkedNotebook_result)
        return this.equals((createLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(createLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(createLinkedNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createLinkedNotebook_result typedOther = (createLinkedNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.LinkedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("createLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateLinkedNotebook_args implements TBase<updateLinkedNotebook_args, updateLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      LINKED_NOTEBOOK((short)2, "linkedNotebook");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // LINKED_NOTEBOOK
            return LINKED_NOTEBOOK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_args.class, metaDataMap);
    }

    public updateLinkedNotebook_args() {
    }

    public updateLinkedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLinkedNotebook_args(updateLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public updateLinkedNotebook_args deepCopy() {
      return new updateLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case LINKED_NOTEBOOK:
        if (value == null) {
          unsetLinkedNotebook();
        } else {
          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case LINKED_NOTEBOOK:
        return getLinkedNotebook();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case LINKED_NOTEBOOK:
        return isSetLinkedNotebook();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLinkedNotebook_args)
        return this.equals((updateLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(updateLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateLinkedNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateLinkedNotebook_args typedOther = (updateLinkedNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateLinkedNotebook_result implements TBase<updateLinkedNotebook_result, updateLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_result.class, metaDataMap);
    }

    public updateLinkedNotebook_result() {
    }

    public updateLinkedNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLinkedNotebook_result(updateLinkedNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public updateLinkedNotebook_result deepCopy() {
      return new updateLinkedNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLinkedNotebook_result)
        return this.equals((updateLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(updateLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(updateLinkedNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateLinkedNotebook_result typedOther = (updateLinkedNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("updateLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listLinkedNotebooks_args implements TBase<listLinkedNotebooks_args, listLinkedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_args.class, metaDataMap);
    }

    public listLinkedNotebooks_args() {
    }

    public listLinkedNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLinkedNotebooks_args(listLinkedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listLinkedNotebooks_args deepCopy() {
      return new listLinkedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLinkedNotebooks_args)
        return this.equals((listLinkedNotebooks_args)that);
      return false;
    }

    public boolean equals(listLinkedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listLinkedNotebooks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listLinkedNotebooks_args typedOther = (listLinkedNotebooks_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listLinkedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listLinkedNotebooks_result implements TBase<listLinkedNotebooks_result, listLinkedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private List<com.evernote.edam.type.LinkedNotebook> success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class))));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_result.class, metaDataMap);
    }

    public listLinkedNotebooks_result() {
    }

    public listLinkedNotebooks_result(
      List<com.evernote.edam.type.LinkedNotebook> success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLinkedNotebooks_result(listLinkedNotebooks_result other) {
      if (other.isSetSuccess()) {
        List<com.evernote.edam.type.LinkedNotebook> __this__success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
        for (com.evernote.edam.type.LinkedNotebook other_element : other.success) {
          __this__success.add(new com.evernote.edam.type.LinkedNotebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listLinkedNotebooks_result deepCopy() {
      return new listLinkedNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.evernote.edam.type.LinkedNotebook> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.evernote.edam.type.LinkedNotebook elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
      }
      this.success.add(elem);
    }

    public List<com.evernote.edam.type.LinkedNotebook> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.evernote.edam.type.LinkedNotebook> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.evernote.edam.type.LinkedNotebook>)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLinkedNotebooks_result)
        return this.equals((listLinkedNotebooks_result)that);
      return false;
    }

    public boolean equals(listLinkedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(listLinkedNotebooks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listLinkedNotebooks_result typedOther = (listLinkedNotebooks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list147 = iprot.readListBegin();
                this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>(_list147.size);
                for (int _i148 = 0; _i148 < _list147.size; ++_i148)
                {
                  com.evernote.edam.type.LinkedNotebook _elem149;
                  _elem149 = new com.evernote.edam.type.LinkedNotebook();
                  _elem149.read(iprot);
                  this.success.add(_elem149);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (com.evernote.edam.type.LinkedNotebook _iter150 : this.success)
          {
            _iter150.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("listLinkedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeLinkedNotebook_args implements TBase<expungeLinkedNotebook_args, expungeLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_args.class, metaDataMap);
    }

    public expungeLinkedNotebook_args() {
    }

    public expungeLinkedNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeLinkedNotebook_args(expungeLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeLinkedNotebook_args deepCopy() {
      return new expungeLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeLinkedNotebook_args)
        return this.equals((expungeLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(expungeLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeLinkedNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeLinkedNotebook_args typedOther = (expungeLinkedNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeLinkedNotebook_result implements TBase<expungeLinkedNotebook_result, expungeLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_result.class, metaDataMap);
    }

    public expungeLinkedNotebook_result() {
    }

    public expungeLinkedNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeLinkedNotebook_result(expungeLinkedNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeLinkedNotebook_result deepCopy() {
      return new expungeLinkedNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return new Integer(getSuccess());

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeLinkedNotebook_result)
        return this.equals((expungeLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(expungeLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(expungeLinkedNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      expungeLinkedNotebook_result typedOther = (expungeLinkedNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNotebook_args implements TBase<authenticateToSharedNotebook_args, authenticateToSharedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_args");

    private static final TField SHARE_KEY_FIELD_DESC = new TField("shareKey", TType.STRING, (short)1);
    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)2);

    private String shareKey;
    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SHARE_KEY((short)1, "shareKey"),
      AUTHENTICATION_TOKEN((short)2, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHARE_KEY
            return SHARE_KEY;
          case 2: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHARE_KEY, new FieldMetaData("shareKey", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_args.class, metaDataMap);
    }

    public authenticateToSharedNotebook_args() {
    }

    public authenticateToSharedNotebook_args(
      String shareKey,
      String authenticationToken)
    {
      this();
      this.shareKey = shareKey;
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNotebook_args(authenticateToSharedNotebook_args other) {
      if (other.isSetShareKey()) {
        this.shareKey = other.shareKey;
      }
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public authenticateToSharedNotebook_args deepCopy() {
      return new authenticateToSharedNotebook_args(this);
    }

    public void clear() {
      this.shareKey = null;
      this.authenticationToken = null;
    }

    public String getShareKey() {
      return this.shareKey;
    }

    public void setShareKey(String shareKey) {
      this.shareKey = shareKey;
    }

    public void unsetShareKey() {
      this.shareKey = null;
    }

    /** Returns true if field shareKey is set (has been asigned a value) and false otherwise */
    public boolean isSetShareKey() {
      return this.shareKey != null;
    }

    public void setShareKeyIsSet(boolean value) {
      if (!value) {
        this.shareKey = null;
      }
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHARE_KEY:
        if (value == null) {
          unsetShareKey();
        } else {
          setShareKey((String)value);
        }
        break;

      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHARE_KEY:
        return getShareKey();

      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHARE_KEY:
        return isSetShareKey();
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNotebook_args)
        return this.equals((authenticateToSharedNotebook_args)that);
      return false;
    }

    public boolean equals(authenticateToSharedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_shareKey = true && this.isSetShareKey();
      boolean that_present_shareKey = true && that.isSetShareKey();
      if (this_present_shareKey || that_present_shareKey) {
        if (!(this_present_shareKey && that_present_shareKey))
          return false;
        if (!this.shareKey.equals(that.shareKey))
          return false;
      }

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateToSharedNotebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateToSharedNotebook_args typedOther = (authenticateToSharedNotebook_args)other;

      lastComparison = Boolean.valueOf(isSetShareKey()).compareTo(typedOther.isSetShareKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareKey()) {        lastComparison = TBaseHelper.compareTo(this.shareKey, typedOther.shareKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SHARE_KEY
            if (field.type == TType.STRING) {
              this.shareKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.shareKey != null) {
        oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
        oprot.writeString(this.shareKey);
        oprot.writeFieldEnd();
      }
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_args(");
      boolean first = true;

      sb.append("shareKey:");
      if (this.shareKey == null) {
        sb.append("null");
      } else {
        sb.append(this.shareKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNotebook_result implements TBase<authenticateToSharedNotebook_result, authenticateToSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.userstore.AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_result.class, metaDataMap);
    }

    public authenticateToSharedNotebook_result() {
    }

    public authenticateToSharedNotebook_result(
      com.evernote.edam.userstore.AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNotebook_result(authenticateToSharedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public authenticateToSharedNotebook_result deepCopy() {
      return new authenticateToSharedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNotebook_result)
        return this.equals((authenticateToSharedNotebook_result)that);
      return false;
    }

    public boolean equals(authenticateToSharedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateToSharedNotebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateToSharedNotebook_result typedOther = (authenticateToSharedNotebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.userstore.AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSharedNotebookByAuth_args implements TBase<getSharedNotebookByAuth_args, getSharedNotebookByAuth_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_args.class, metaDataMap);
    }

    public getSharedNotebookByAuth_args() {
    }

    public getSharedNotebookByAuth_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedNotebookByAuth_args(getSharedNotebookByAuth_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getSharedNotebookByAuth_args deepCopy() {
      return new getSharedNotebookByAuth_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedNotebookByAuth_args)
        return this.equals((getSharedNotebookByAuth_args)that);
      return false;
    }

    public boolean equals(getSharedNotebookByAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSharedNotebookByAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSharedNotebookByAuth_args typedOther = (getSharedNotebookByAuth_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSharedNotebookByAuth_result implements TBase<getSharedNotebookByAuth_result, getSharedNotebookByAuth_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SharedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_result.class, metaDataMap);
    }

    public getSharedNotebookByAuth_result() {
    }

    public getSharedNotebookByAuth_result(
      com.evernote.edam.type.SharedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedNotebookByAuth_result(getSharedNotebookByAuth_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSharedNotebookByAuth_result deepCopy() {
      return new getSharedNotebookByAuth_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SharedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.type.SharedNotebook)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedNotebookByAuth_result)
        return this.equals((getSharedNotebookByAuth_result)that);
      return false;
    }

    public boolean equals(getSharedNotebookByAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(getSharedNotebookByAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSharedNotebookByAuth_result typedOther = (getSharedNotebookByAuth_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SharedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class emailNote_args implements TBase<emailNote_args, emailNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("emailNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private NoteEmailParameters parameters;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      PARAMETERS((short)2, "parameters");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // PARAMETERS
            return PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, NoteEmailParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(emailNote_args.class, metaDataMap);
    }

    public emailNote_args() {
    }

    public emailNote_args(
      String authenticationToken,
      NoteEmailParameters parameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emailNote_args(emailNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetParameters()) {
        this.parameters = new NoteEmailParameters(other.parameters);
      }
    }

    public emailNote_args deepCopy() {
      return new emailNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.parameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteEmailParameters getParameters() {
      return this.parameters;
    }

    public void setParameters(NoteEmailParameters parameters) {
      this.parameters = parameters;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been asigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((NoteEmailParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case PARAMETERS:
        return getParameters();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case PARAMETERS:
        return isSetParameters();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emailNote_args)
        return this.equals((emailNote_args)that);
      return false;
    }

    public boolean equals(emailNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(emailNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      emailNote_args typedOther = (emailNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {        lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PARAMETERS
            if (field.type == TType.STRUCT) {
              this.parameters = new NoteEmailParameters();
              this.parameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.parameters != null) {
        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
        this.parameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("emailNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class emailNote_result implements TBase<emailNote_result, emailNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("emailNote_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(emailNote_result.class, metaDataMap);
    }

    public emailNote_result() {
    }

    public emailNote_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emailNote_result(emailNote_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public emailNote_result deepCopy() {
      return new emailNote_result(this);
    }

    public void clear() {
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emailNote_result)
        return this.equals((emailNote_result)that);
      return false;
    }

    public boolean equals(emailNote_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(emailNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      emailNote_result typedOther = (emailNote_result)other;

      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("emailNote_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class shareNote_args implements TBase<shareNote_args, shareNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("shareNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shareNote_args.class, metaDataMap);
    }

    public shareNote_args() {
    }

    public shareNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shareNote_args(shareNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public shareNote_args deepCopy() {
      return new shareNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shareNote_args)
        return this.equals((shareNote_args)that);
      return false;
    }

    public boolean equals(shareNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(shareNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shareNote_args typedOther = (shareNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("shareNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class shareNote_result implements TBase<shareNote_result, shareNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("shareNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shareNote_result.class, metaDataMap);
    }

    public shareNote_result() {
    }

    public shareNote_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shareNote_result(shareNote_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public shareNote_result deepCopy() {
      return new shareNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shareNote_result)
        return this.equals((shareNote_result)that);
      return false;
    }

    public boolean equals(shareNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(shareNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shareNote_result typedOther = (shareNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("shareNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stopSharingNote_args implements TBase<stopSharingNote_args, stopSharingNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
      GUID((short)2, "guid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION_TOKEN
            return AUTHENTICATION_TOKEN;
          case 2: // GUID
            return GUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING          , "Guid")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(stopSharingNote_args.class, metaDataMap);
    }

    public stopSharingNote_args() {
    }

    public stopSharingNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSharingNote_args(stopSharingNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public stopSharingNote_args deepCopy() {
      return new stopSharingNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        if (value == null) {
          unsetAuthenticationToken();
        } else {
          setAuthenticationToken((String)value);
        }
        break;

      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION_TOKEN:
        return getAuthenticationToken();

      case GUID:
        return getGuid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION_TOKEN:
        return isSetAuthenticationToken();
      case GUID:
        return isSetGuid();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSharingNote_args)
        return this.equals((stopSharingNote_args)that);
      return false;
    }

    public boolean equals(stopSharingNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(stopSharingNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopSharingNote_args typedOther = (stopSharingNote_args)other;

      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("stopSharingNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stopSharingNote_result implements TBase<stopSharingNote_result, stopSharingNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(stopSharingNote_result.class, metaDataMap);
    }

    public stopSharingNote_result() {
    }

    public stopSharingNote_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSharingNote_result(stopSharingNote_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public stopSharingNote_result deepCopy() {
      return new stopSharingNote_result(this);
    }

    public void clear() {
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSharingNote_result)
        return this.equals((stopSharingNote_result)that);
      return false;
    }

    public boolean equals(stopSharingNote_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(stopSharingNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopSharingNote_result typedOther = (stopSharingNote_result)other;

      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("stopSharingNote_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNote_args implements TBase<authenticateToSharedNote_args, authenticateToSharedNote_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_args");

    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)1);
    private static final TField NOTE_KEY_FIELD_DESC = new TField("noteKey", TType.STRING, (short)2);

    private String guid;
    private String noteKey;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      GUID((short)1, "guid"),
      NOTE_KEY((short)2, "noteKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GUID
            return GUID;
          case 2: // NOTE_KEY
            return NOTE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NOTE_KEY, new FieldMetaData("noteKey", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_args.class, metaDataMap);
    }

    public authenticateToSharedNote_args() {
    }

    public authenticateToSharedNote_args(
      String guid,
      String noteKey)
    {
      this();
      this.guid = guid;
      this.noteKey = noteKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNote_args(authenticateToSharedNote_args other) {
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetNoteKey()) {
        this.noteKey = other.noteKey;
      }
    }

    public authenticateToSharedNote_args deepCopy() {
      return new authenticateToSharedNote_args(this);
    }

    public void clear() {
      this.guid = null;
      this.noteKey = null;
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getNoteKey() {
      return this.noteKey;
    }

    public void setNoteKey(String noteKey) {
      this.noteKey = noteKey;
    }

    public void unsetNoteKey() {
      this.noteKey = null;
    }

    /** Returns true if field noteKey is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteKey() {
      return this.noteKey != null;
    }

    public void setNoteKeyIsSet(boolean value) {
      if (!value) {
        this.noteKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((String)value);
        }
        break;

      case NOTE_KEY:
        if (value == null) {
          unsetNoteKey();
        } else {
          setNoteKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GUID:
        return getGuid();

      case NOTE_KEY:
        return getNoteKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GUID:
        return isSetGuid();
      case NOTE_KEY:
        return isSetNoteKey();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNote_args)
        return this.equals((authenticateToSharedNote_args)that);
      return false;
    }

    public boolean equals(authenticateToSharedNote_args that) {
      if (that == null)
        return false;

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_noteKey = true && this.isSetNoteKey();
      boolean that_present_noteKey = true && that.isSetNoteKey();
      if (this_present_noteKey || that_present_noteKey) {
        if (!(this_present_noteKey && that_present_noteKey))
          return false;
        if (!this.noteKey.equals(that.noteKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateToSharedNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateToSharedNote_args typedOther = (authenticateToSharedNote_args)other;

      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoteKey()).compareTo(typedOther.isSetNoteKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteKey()) {        lastComparison = TBaseHelper.compareTo(this.noteKey, typedOther.noteKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_KEY
            if (field.type == TType.STRING) {
              this.noteKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.noteKey != null) {
        oprot.writeFieldBegin(NOTE_KEY_FIELD_DESC);
        oprot.writeString(this.noteKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateToSharedNote_args(");
      boolean first = true;

      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteKey:");
      if (this.noteKey == null) {
        sb.append("null");
      } else {
        sb.append(this.noteKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNote_result implements TBase<authenticateToSharedNote_result, authenticateToSharedNote_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.userstore.AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      USER_EXCEPTION((short)1, "userException"),
      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
      SYSTEM_EXCEPTION((short)3, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 2: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          case 3: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_result.class, metaDataMap);
    }

    public authenticateToSharedNote_result() {
    }

    public authenticateToSharedNote_result(
      com.evernote.edam.userstore.AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNote_result(authenticateToSharedNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public authenticateToSharedNote_result deepCopy() {
      return new authenticateToSharedNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.evernote.edam.error.EDAMUserException)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNote_result)
        return this.equals((authenticateToSharedNote_result)that);
      return false;
    }

    public boolean equals(authenticateToSharedNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateToSharedNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateToSharedNote_result typedOther = (authenticateToSharedNote_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.userstore.AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateToSharedNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
