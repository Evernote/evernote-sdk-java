/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  This structure encapsulates the information about the state of the
 *  user's account for the purpose of "state based" synchronization.
 * <dl>
 *  <dt>currentTime</dt>
 *    <dd>
 *    The server's current date and time.
 *    </dd>
 * 
 *  <dt>fullSyncBefore</dt>
 *    <dd>
 *    The cutoff date and time for client caches to be
 *    updated via incremental synchronization.  Any clients that were last
 *    synched with the server before this date/time must do a full resync of all
 *    objects.  This cutoff point will change over time as archival data is
 *    deleted or special circumstances on the service require resynchronization.
 *    </dd>
 * 
 *  <dt>updateCount</dt>
 *    <dd>
 *    Indicates the total number of transactions that have
 *    been committed within the account.  This reflects (for example) the
 *    number of discrete additions or modifications that have been made to
 *    the data in this account (tags, notes, resources, etc.).
 *    This number is the "high water mark" for Update Sequence Numbers (USN)
 *    within the account.
 *    </dd>
 * 
 *  <dt>uploaded</dt>
 *    <dd>
 *    The total number of bytes that have been uploaded to
 *    this account in the current monthly period.  This can be compared against
 *    Accounting.uploadLimit (from the UserStore) to determine how close the user
 *    is to their monthly upload limit.
 *    This value may not be present if the SyncState has been retrieved by
 *    a caller that only has read access to the account.
 *    </dd>
 *  </dl>
 */
public class SyncState implements TBase<SyncState, SyncState._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SyncState");

  private static final TField CURRENT_TIME_FIELD_DESC = new TField("currentTime", TType.I64, (short)1);
  private static final TField FULL_SYNC_BEFORE_FIELD_DESC = new TField("fullSyncBefore", TType.I64, (short)2);
  private static final TField UPDATE_COUNT_FIELD_DESC = new TField("updateCount", TType.I32, (short)3);
  private static final TField UPLOADED_FIELD_DESC = new TField("uploaded", TType.I64, (short)4);

  private long currentTime;
  private long fullSyncBefore;
  private int updateCount;
  private long uploaded;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CURRENT_TIME((short)1, "currentTime"),
    FULL_SYNC_BEFORE((short)2, "fullSyncBefore"),
    UPDATE_COUNT((short)3, "updateCount"),
    UPLOADED((short)4, "uploaded");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_TIME
          return CURRENT_TIME;
        case 2: // FULL_SYNC_BEFORE
          return FULL_SYNC_BEFORE;
        case 3: // UPDATE_COUNT
          return UPDATE_COUNT;
        case 4: // UPLOADED
          return UPLOADED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTTIME_ISSET_ID = 0;
  private static final int __FULLSYNCBEFORE_ISSET_ID = 1;
  private static final int __UPDATECOUNT_ISSET_ID = 2;
  private static final int __UPLOADED_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_TIME, new FieldMetaData("currentTime", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.FULL_SYNC_BEFORE, new FieldMetaData("fullSyncBefore", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.UPDATE_COUNT, new FieldMetaData("updateCount", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UPLOADED, new FieldMetaData("uploaded", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SyncState.class, metaDataMap);
  }

  public SyncState() {
  }

  public SyncState(
    long currentTime,
    long fullSyncBefore,
    int updateCount)
  {
    this();
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
    this.fullSyncBefore = fullSyncBefore;
    setFullSyncBeforeIsSet(true);
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncState(SyncState other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.currentTime = other.currentTime;
    this.fullSyncBefore = other.fullSyncBefore;
    this.updateCount = other.updateCount;
    this.uploaded = other.uploaded;
  }

  public SyncState deepCopy() {
    return new SyncState(this);
  }

  public void clear() {
    setCurrentTimeIsSet(false);
    this.currentTime = 0;
    setFullSyncBeforeIsSet(false);
    this.fullSyncBefore = 0;
    setUpdateCountIsSet(false);
    this.updateCount = 0;
    setUploadedIsSet(false);
    this.uploaded = 0;
  }

  public long getCurrentTime() {
    return this.currentTime;
  }

  public void setCurrentTime(long currentTime) {
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
  }

  public void unsetCurrentTime() {
    __isset_vector[__CURRENTTIME_ISSET_ID] = false;
  }

  /** Returns true if field currentTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return __isset_vector[__CURRENTTIME_ISSET_ID];
  }

  public void setCurrentTimeIsSet(boolean value) {
    __isset_vector[__CURRENTTIME_ISSET_ID] = value;
  }

  public long getFullSyncBefore() {
    return this.fullSyncBefore;
  }

  public void setFullSyncBefore(long fullSyncBefore) {
    this.fullSyncBefore = fullSyncBefore;
    setFullSyncBeforeIsSet(true);
  }

  public void unsetFullSyncBefore() {
    __isset_vector[__FULLSYNCBEFORE_ISSET_ID] = false;
  }

  /** Returns true if field fullSyncBefore is set (has been asigned a value) and false otherwise */
  public boolean isSetFullSyncBefore() {
    return __isset_vector[__FULLSYNCBEFORE_ISSET_ID];
  }

  public void setFullSyncBeforeIsSet(boolean value) {
    __isset_vector[__FULLSYNCBEFORE_ISSET_ID] = value;
  }

  public int getUpdateCount() {
    return this.updateCount;
  }

  public void setUpdateCount(int updateCount) {
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
  }

  public void unsetUpdateCount() {
    __isset_vector[__UPDATECOUNT_ISSET_ID] = false;
  }

  /** Returns true if field updateCount is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateCount() {
    return __isset_vector[__UPDATECOUNT_ISSET_ID];
  }

  public void setUpdateCountIsSet(boolean value) {
    __isset_vector[__UPDATECOUNT_ISSET_ID] = value;
  }

  public long getUploaded() {
    return this.uploaded;
  }

  public void setUploaded(long uploaded) {
    this.uploaded = uploaded;
    setUploadedIsSet(true);
  }

  public void unsetUploaded() {
    __isset_vector[__UPLOADED_ISSET_ID] = false;
  }

  /** Returns true if field uploaded is set (has been asigned a value) and false otherwise */
  public boolean isSetUploaded() {
    return __isset_vector[__UPLOADED_ISSET_ID];
  }

  public void setUploadedIsSet(boolean value) {
    __isset_vector[__UPLOADED_ISSET_ID] = value;
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_TIME:
      if (value == null) {
        unsetCurrentTime();
      } else {
        setCurrentTime((Long)value);
      }
      break;

    case FULL_SYNC_BEFORE:
      if (value == null) {
        unsetFullSyncBefore();
      } else {
        setFullSyncBefore((Long)value);
      }
      break;

    case UPDATE_COUNT:
      if (value == null) {
        unsetUpdateCount();
      } else {
        setUpdateCount((Integer)value);
      }
      break;

    case UPLOADED:
      if (value == null) {
        unsetUploaded();
      } else {
        setUploaded((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_TIME:
      return new Long(getCurrentTime());

    case FULL_SYNC_BEFORE:
      return new Long(getFullSyncBefore());

    case UPDATE_COUNT:
      return new Integer(getUpdateCount());

    case UPLOADED:
      return new Long(getUploaded());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_TIME:
      return isSetCurrentTime();
    case FULL_SYNC_BEFORE:
      return isSetFullSyncBefore();
    case UPDATE_COUNT:
      return isSetUpdateCount();
    case UPLOADED:
      return isSetUploaded();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncState)
      return this.equals((SyncState)that);
    return false;
  }

  public boolean equals(SyncState that) {
    if (that == null)
      return false;

    boolean this_present_currentTime = true;
    boolean that_present_currentTime = true;
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (this.currentTime != that.currentTime)
        return false;
    }

    boolean this_present_fullSyncBefore = true;
    boolean that_present_fullSyncBefore = true;
    if (this_present_fullSyncBefore || that_present_fullSyncBefore) {
      if (!(this_present_fullSyncBefore && that_present_fullSyncBefore))
        return false;
      if (this.fullSyncBefore != that.fullSyncBefore)
        return false;
    }

    boolean this_present_updateCount = true;
    boolean that_present_updateCount = true;
    if (this_present_updateCount || that_present_updateCount) {
      if (!(this_present_updateCount && that_present_updateCount))
        return false;
      if (this.updateCount != that.updateCount)
        return false;
    }

    boolean this_present_uploaded = true && this.isSetUploaded();
    boolean that_present_uploaded = true && that.isSetUploaded();
    if (this_present_uploaded || that_present_uploaded) {
      if (!(this_present_uploaded && that_present_uploaded))
        return false;
      if (this.uploaded != that.uploaded)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(SyncState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SyncState typedOther = (SyncState)other;

    lastComparison = Boolean.valueOf(isSetCurrentTime()).compareTo(typedOther.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {      lastComparison = TBaseHelper.compareTo(this.currentTime, typedOther.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullSyncBefore()).compareTo(typedOther.isSetFullSyncBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullSyncBefore()) {      lastComparison = TBaseHelper.compareTo(this.fullSyncBefore, typedOther.fullSyncBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateCount()).compareTo(typedOther.isSetUpdateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateCount()) {      lastComparison = TBaseHelper.compareTo(this.updateCount, typedOther.updateCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploaded()).compareTo(typedOther.isSetUploaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploaded()) {      lastComparison = TBaseHelper.compareTo(this.uploaded, typedOther.uploaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CURRENT_TIME
          if (field.type == TType.I64) {
            this.currentTime = iprot.readI64();
            setCurrentTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FULL_SYNC_BEFORE
          if (field.type == TType.I64) {
            this.fullSyncBefore = iprot.readI64();
            setFullSyncBeforeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // UPDATE_COUNT
          if (field.type == TType.I32) {
            this.updateCount = iprot.readI32();
            setUpdateCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // UPLOADED
          if (field.type == TType.I64) {
            this.uploaded = iprot.readI64();
            setUploadedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
    oprot.writeI64(this.currentTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FULL_SYNC_BEFORE_FIELD_DESC);
    oprot.writeI64(this.fullSyncBefore);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_COUNT_FIELD_DESC);
    oprot.writeI32(this.updateCount);
    oprot.writeFieldEnd();
    if (isSetUploaded()) {
      oprot.writeFieldBegin(UPLOADED_FIELD_DESC);
      oprot.writeI64(this.uploaded);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("SyncState(");
    boolean first = true;

    sb.append("currentTime:");
    sb.append(this.currentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullSyncBefore:");
    sb.append(this.fullSyncBefore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateCount:");
    sb.append(this.updateCount);
    first = false;
    if (isSetUploaded()) {
      if (!first) sb.append(", ");
      sb.append("uploaded:");
      sb.append(this.uploaded);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetCurrentTime()) {
      throw new TProtocolException("Required field 'currentTime' is unset! Struct:" + toString());
    }

    if (!isSetFullSyncBefore()) {
      throw new TProtocolException("Required field 'fullSyncBefore' is unset! Struct:" + toString());
    }

    if (!isSetUpdateCount()) {
      throw new TProtocolException("Required field 'updateCount' is unset! Struct:" + toString());
    }

  }

}

