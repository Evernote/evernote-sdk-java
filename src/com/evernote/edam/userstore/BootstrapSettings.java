/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  This structure describes a collection of bootstrap settings.
 * <dl>
 *  <dt>serviceHost:</dt>
 *    <dd>
 *    The hostname and optional port for composing Evernote web service URLs.
 *    This URL can be used to access the UserStore and related services,
 *    but must not be used to compose the NoteStore URL. Client applications
 *    must handle serviceHost values that include only the hostname
 *    (e.g. www.evernote.com) or both the hostname and port (e.g. www.evernote.com:8080).
 *    If no port is specified, or if port 443 is specified, client applications must
 *    use the scheme "https" when composing URLs. Otherwise, a client must use the
 *    scheme "http".
 *  </dd>
 *  <dt>marketingUrl:</dt>
 *    <dd>
 *    The URL stem for the Evernote corporate marketing website, e.g. http://www.evernote.com.
 *    This stem can be used to compose website URLs. For example, the URL of the Evernote
 *    Trunk is composed by appending "/about/trunk/" to the value of marketingUrl.
 *    </dd>
 *  <dt>supportUrl:</dt>
 *    <dd>
 *    The full URL for the Evernote customer support website, e.g. https://support.evernote.com.
 *    </dd>
 *  <dt>accountEmailDomain:</dt>
 *    <dd>
 *    The domain used for an Evernote user's incoming email address, which allows notes to
 *    be emailed into an account. E.g. m.evernote.com.
 *    </dd>
 *  <dt>enableFacebookSharing:</dt>
 *    <dd>
 *    Whether the client application should enable sharing of notes on Facebook.
 *    </dd>
 *  <dt>enableGiftSubscriptions:</dt>
 *    <dd>
 *    Whether the client application should enable gift subscriptions.
 *    </dd>
 *  <dt>enableSupportTickets:</dt>
 *    <dd>
 *    Whether the client application should enable in-client creation of support tickets.
 *    </dd>
 *  <dt>enableSharedNotebooks:</dt>
 *    <dd>
 *    Whether the client application should enable shared notebooks.
 *    </dd>
 *  <dt>enableSingleNoteSharing:</dt>
 *    <dd>
 *    Whether the client application should enable single note sharing.
 *    </dd>
 *  <dt>enableSponsoredAccounts:</dt>
 *    <dd>
 *    Whether the client application should enable sponsored accounts.
 *    </dd>
 *  <dt>enableTwitterSharing:</dt>
 *    <dd>
 *    Whether the client application should enable sharing of notes on Twitter.
 *    </dd>
 *  </dl>
 */
public class BootstrapSettings implements TBase<BootstrapSettings, BootstrapSettings._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BootstrapSettings");

  private static final TField SERVICE_HOST_FIELD_DESC = new TField("serviceHost", TType.STRING, (short)1);
  private static final TField MARKETING_URL_FIELD_DESC = new TField("marketingUrl", TType.STRING, (short)2);
  private static final TField SUPPORT_URL_FIELD_DESC = new TField("supportUrl", TType.STRING, (short)3);
  private static final TField ACCOUNT_EMAIL_DOMAIN_FIELD_DESC = new TField("accountEmailDomain", TType.STRING, (short)4);
  private static final TField ENABLE_FACEBOOK_SHARING_FIELD_DESC = new TField("enableFacebookSharing", TType.BOOL, (short)5);
  private static final TField ENABLE_GIFT_SUBSCRIPTIONS_FIELD_DESC = new TField("enableGiftSubscriptions", TType.BOOL, (short)6);
  private static final TField ENABLE_SUPPORT_TICKETS_FIELD_DESC = new TField("enableSupportTickets", TType.BOOL, (short)7);
  private static final TField ENABLE_SHARED_NOTEBOOKS_FIELD_DESC = new TField("enableSharedNotebooks", TType.BOOL, (short)8);
  private static final TField ENABLE_SINGLE_NOTE_SHARING_FIELD_DESC = new TField("enableSingleNoteSharing", TType.BOOL, (short)9);
  private static final TField ENABLE_SPONSORED_ACCOUNTS_FIELD_DESC = new TField("enableSponsoredAccounts", TType.BOOL, (short)10);
  private static final TField ENABLE_TWITTER_SHARING_FIELD_DESC = new TField("enableTwitterSharing", TType.BOOL, (short)11);

  private String serviceHost;
  private String marketingUrl;
  private String supportUrl;
  private String accountEmailDomain;
  private boolean enableFacebookSharing;
  private boolean enableGiftSubscriptions;
  private boolean enableSupportTickets;
  private boolean enableSharedNotebooks;
  private boolean enableSingleNoteSharing;
  private boolean enableSponsoredAccounts;
  private boolean enableTwitterSharing;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SERVICE_HOST((short)1, "serviceHost"),
    MARKETING_URL((short)2, "marketingUrl"),
    SUPPORT_URL((short)3, "supportUrl"),
    ACCOUNT_EMAIL_DOMAIN((short)4, "accountEmailDomain"),
    ENABLE_FACEBOOK_SHARING((short)5, "enableFacebookSharing"),
    ENABLE_GIFT_SUBSCRIPTIONS((short)6, "enableGiftSubscriptions"),
    ENABLE_SUPPORT_TICKETS((short)7, "enableSupportTickets"),
    ENABLE_SHARED_NOTEBOOKS((short)8, "enableSharedNotebooks"),
    ENABLE_SINGLE_NOTE_SHARING((short)9, "enableSingleNoteSharing"),
    ENABLE_SPONSORED_ACCOUNTS((short)10, "enableSponsoredAccounts"),
    ENABLE_TWITTER_SHARING((short)11, "enableTwitterSharing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_HOST
          return SERVICE_HOST;
        case 2: // MARKETING_URL
          return MARKETING_URL;
        case 3: // SUPPORT_URL
          return SUPPORT_URL;
        case 4: // ACCOUNT_EMAIL_DOMAIN
          return ACCOUNT_EMAIL_DOMAIN;
        case 5: // ENABLE_FACEBOOK_SHARING
          return ENABLE_FACEBOOK_SHARING;
        case 6: // ENABLE_GIFT_SUBSCRIPTIONS
          return ENABLE_GIFT_SUBSCRIPTIONS;
        case 7: // ENABLE_SUPPORT_TICKETS
          return ENABLE_SUPPORT_TICKETS;
        case 8: // ENABLE_SHARED_NOTEBOOKS
          return ENABLE_SHARED_NOTEBOOKS;
        case 9: // ENABLE_SINGLE_NOTE_SHARING
          return ENABLE_SINGLE_NOTE_SHARING;
        case 10: // ENABLE_SPONSORED_ACCOUNTS
          return ENABLE_SPONSORED_ACCOUNTS;
        case 11: // ENABLE_TWITTER_SHARING
          return ENABLE_TWITTER_SHARING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLEFACEBOOKSHARING_ISSET_ID = 0;
  private static final int __ENABLEGIFTSUBSCRIPTIONS_ISSET_ID = 1;
  private static final int __ENABLESUPPORTTICKETS_ISSET_ID = 2;
  private static final int __ENABLESHAREDNOTEBOOKS_ISSET_ID = 3;
  private static final int __ENABLESINGLENOTESHARING_ISSET_ID = 4;
  private static final int __ENABLESPONSOREDACCOUNTS_ISSET_ID = 5;
  private static final int __ENABLETWITTERSHARING_ISSET_ID = 6;
  private boolean[] __isset_vector = new boolean[7];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_HOST, new FieldMetaData("serviceHost", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MARKETING_URL, new FieldMetaData("marketingUrl", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SUPPORT_URL, new FieldMetaData("supportUrl", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_EMAIL_DOMAIN, new FieldMetaData("accountEmailDomain", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ENABLE_FACEBOOK_SHARING, new FieldMetaData("enableFacebookSharing", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_GIFT_SUBSCRIPTIONS, new FieldMetaData("enableGiftSubscriptions", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SUPPORT_TICKETS, new FieldMetaData("enableSupportTickets", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SHARED_NOTEBOOKS, new FieldMetaData("enableSharedNotebooks", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SINGLE_NOTE_SHARING, new FieldMetaData("enableSingleNoteSharing", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SPONSORED_ACCOUNTS, new FieldMetaData("enableSponsoredAccounts", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_TWITTER_SHARING, new FieldMetaData("enableTwitterSharing", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BootstrapSettings.class, metaDataMap);
  }

  public BootstrapSettings() {
  }

  public BootstrapSettings(
    String serviceHost,
    String marketingUrl,
    String supportUrl,
    String accountEmailDomain)
  {
    this();
    this.serviceHost = serviceHost;
    this.marketingUrl = marketingUrl;
    this.supportUrl = supportUrl;
    this.accountEmailDomain = accountEmailDomain;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BootstrapSettings(BootstrapSettings other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetServiceHost()) {
      this.serviceHost = other.serviceHost;
    }
    if (other.isSetMarketingUrl()) {
      this.marketingUrl = other.marketingUrl;
    }
    if (other.isSetSupportUrl()) {
      this.supportUrl = other.supportUrl;
    }
    if (other.isSetAccountEmailDomain()) {
      this.accountEmailDomain = other.accountEmailDomain;
    }
    this.enableFacebookSharing = other.enableFacebookSharing;
    this.enableGiftSubscriptions = other.enableGiftSubscriptions;
    this.enableSupportTickets = other.enableSupportTickets;
    this.enableSharedNotebooks = other.enableSharedNotebooks;
    this.enableSingleNoteSharing = other.enableSingleNoteSharing;
    this.enableSponsoredAccounts = other.enableSponsoredAccounts;
    this.enableTwitterSharing = other.enableTwitterSharing;
  }

  public BootstrapSettings deepCopy() {
    return new BootstrapSettings(this);
  }

  public void clear() {
    this.serviceHost = null;
    this.marketingUrl = null;
    this.supportUrl = null;
    this.accountEmailDomain = null;
    setEnableFacebookSharingIsSet(false);
    this.enableFacebookSharing = false;
    setEnableGiftSubscriptionsIsSet(false);
    this.enableGiftSubscriptions = false;
    setEnableSupportTicketsIsSet(false);
    this.enableSupportTickets = false;
    setEnableSharedNotebooksIsSet(false);
    this.enableSharedNotebooks = false;
    setEnableSingleNoteSharingIsSet(false);
    this.enableSingleNoteSharing = false;
    setEnableSponsoredAccountsIsSet(false);
    this.enableSponsoredAccounts = false;
    setEnableTwitterSharingIsSet(false);
    this.enableTwitterSharing = false;
  }

  public String getServiceHost() {
    return this.serviceHost;
  }

  public void setServiceHost(String serviceHost) {
    this.serviceHost = serviceHost;
  }

  public void unsetServiceHost() {
    this.serviceHost = null;
  }

  /** Returns true if field serviceHost is set (has been asigned a value) and false otherwise */
  public boolean isSetServiceHost() {
    return this.serviceHost != null;
  }

  public void setServiceHostIsSet(boolean value) {
    if (!value) {
      this.serviceHost = null;
    }
  }

  public String getMarketingUrl() {
    return this.marketingUrl;
  }

  public void setMarketingUrl(String marketingUrl) {
    this.marketingUrl = marketingUrl;
  }

  public void unsetMarketingUrl() {
    this.marketingUrl = null;
  }

  /** Returns true if field marketingUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetMarketingUrl() {
    return this.marketingUrl != null;
  }

  public void setMarketingUrlIsSet(boolean value) {
    if (!value) {
      this.marketingUrl = null;
    }
  }

  public String getSupportUrl() {
    return this.supportUrl;
  }

  public void setSupportUrl(String supportUrl) {
    this.supportUrl = supportUrl;
  }

  public void unsetSupportUrl() {
    this.supportUrl = null;
  }

  /** Returns true if field supportUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetSupportUrl() {
    return this.supportUrl != null;
  }

  public void setSupportUrlIsSet(boolean value) {
    if (!value) {
      this.supportUrl = null;
    }
  }

  public String getAccountEmailDomain() {
    return this.accountEmailDomain;
  }

  public void setAccountEmailDomain(String accountEmailDomain) {
    this.accountEmailDomain = accountEmailDomain;
  }

  public void unsetAccountEmailDomain() {
    this.accountEmailDomain = null;
  }

  /** Returns true if field accountEmailDomain is set (has been asigned a value) and false otherwise */
  public boolean isSetAccountEmailDomain() {
    return this.accountEmailDomain != null;
  }

  public void setAccountEmailDomainIsSet(boolean value) {
    if (!value) {
      this.accountEmailDomain = null;
    }
  }

  public boolean isEnableFacebookSharing() {
    return this.enableFacebookSharing;
  }

  public void setEnableFacebookSharing(boolean enableFacebookSharing) {
    this.enableFacebookSharing = enableFacebookSharing;
    setEnableFacebookSharingIsSet(true);
  }

  public void unsetEnableFacebookSharing() {
    __isset_vector[__ENABLEFACEBOOKSHARING_ISSET_ID] = false;
  }

  /** Returns true if field enableFacebookSharing is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableFacebookSharing() {
    return __isset_vector[__ENABLEFACEBOOKSHARING_ISSET_ID];
  }

  public void setEnableFacebookSharingIsSet(boolean value) {
    __isset_vector[__ENABLEFACEBOOKSHARING_ISSET_ID] = value;
  }

  public boolean isEnableGiftSubscriptions() {
    return this.enableGiftSubscriptions;
  }

  public void setEnableGiftSubscriptions(boolean enableGiftSubscriptions) {
    this.enableGiftSubscriptions = enableGiftSubscriptions;
    setEnableGiftSubscriptionsIsSet(true);
  }

  public void unsetEnableGiftSubscriptions() {
    __isset_vector[__ENABLEGIFTSUBSCRIPTIONS_ISSET_ID] = false;
  }

  /** Returns true if field enableGiftSubscriptions is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableGiftSubscriptions() {
    return __isset_vector[__ENABLEGIFTSUBSCRIPTIONS_ISSET_ID];
  }

  public void setEnableGiftSubscriptionsIsSet(boolean value) {
    __isset_vector[__ENABLEGIFTSUBSCRIPTIONS_ISSET_ID] = value;
  }

  public boolean isEnableSupportTickets() {
    return this.enableSupportTickets;
  }

  public void setEnableSupportTickets(boolean enableSupportTickets) {
    this.enableSupportTickets = enableSupportTickets;
    setEnableSupportTicketsIsSet(true);
  }

  public void unsetEnableSupportTickets() {
    __isset_vector[__ENABLESUPPORTTICKETS_ISSET_ID] = false;
  }

  /** Returns true if field enableSupportTickets is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableSupportTickets() {
    return __isset_vector[__ENABLESUPPORTTICKETS_ISSET_ID];
  }

  public void setEnableSupportTicketsIsSet(boolean value) {
    __isset_vector[__ENABLESUPPORTTICKETS_ISSET_ID] = value;
  }

  public boolean isEnableSharedNotebooks() {
    return this.enableSharedNotebooks;
  }

  public void setEnableSharedNotebooks(boolean enableSharedNotebooks) {
    this.enableSharedNotebooks = enableSharedNotebooks;
    setEnableSharedNotebooksIsSet(true);
  }

  public void unsetEnableSharedNotebooks() {
    __isset_vector[__ENABLESHAREDNOTEBOOKS_ISSET_ID] = false;
  }

  /** Returns true if field enableSharedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableSharedNotebooks() {
    return __isset_vector[__ENABLESHAREDNOTEBOOKS_ISSET_ID];
  }

  public void setEnableSharedNotebooksIsSet(boolean value) {
    __isset_vector[__ENABLESHAREDNOTEBOOKS_ISSET_ID] = value;
  }

  public boolean isEnableSingleNoteSharing() {
    return this.enableSingleNoteSharing;
  }

  public void setEnableSingleNoteSharing(boolean enableSingleNoteSharing) {
    this.enableSingleNoteSharing = enableSingleNoteSharing;
    setEnableSingleNoteSharingIsSet(true);
  }

  public void unsetEnableSingleNoteSharing() {
    __isset_vector[__ENABLESINGLENOTESHARING_ISSET_ID] = false;
  }

  /** Returns true if field enableSingleNoteSharing is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableSingleNoteSharing() {
    return __isset_vector[__ENABLESINGLENOTESHARING_ISSET_ID];
  }

  public void setEnableSingleNoteSharingIsSet(boolean value) {
    __isset_vector[__ENABLESINGLENOTESHARING_ISSET_ID] = value;
  }

  public boolean isEnableSponsoredAccounts() {
    return this.enableSponsoredAccounts;
  }

  public void setEnableSponsoredAccounts(boolean enableSponsoredAccounts) {
    this.enableSponsoredAccounts = enableSponsoredAccounts;
    setEnableSponsoredAccountsIsSet(true);
  }

  public void unsetEnableSponsoredAccounts() {
    __isset_vector[__ENABLESPONSOREDACCOUNTS_ISSET_ID] = false;
  }

  /** Returns true if field enableSponsoredAccounts is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableSponsoredAccounts() {
    return __isset_vector[__ENABLESPONSOREDACCOUNTS_ISSET_ID];
  }

  public void setEnableSponsoredAccountsIsSet(boolean value) {
    __isset_vector[__ENABLESPONSOREDACCOUNTS_ISSET_ID] = value;
  }

  public boolean isEnableTwitterSharing() {
    return this.enableTwitterSharing;
  }

  public void setEnableTwitterSharing(boolean enableTwitterSharing) {
    this.enableTwitterSharing = enableTwitterSharing;
    setEnableTwitterSharingIsSet(true);
  }

  public void unsetEnableTwitterSharing() {
    __isset_vector[__ENABLETWITTERSHARING_ISSET_ID] = false;
  }

  /** Returns true if field enableTwitterSharing is set (has been asigned a value) and false otherwise */
  public boolean isSetEnableTwitterSharing() {
    return __isset_vector[__ENABLETWITTERSHARING_ISSET_ID];
  }

  public void setEnableTwitterSharingIsSet(boolean value) {
    __isset_vector[__ENABLETWITTERSHARING_ISSET_ID] = value;
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_HOST:
      if (value == null) {
        unsetServiceHost();
      } else {
        setServiceHost((String)value);
      }
      break;

    case MARKETING_URL:
      if (value == null) {
        unsetMarketingUrl();
      } else {
        setMarketingUrl((String)value);
      }
      break;

    case SUPPORT_URL:
      if (value == null) {
        unsetSupportUrl();
      } else {
        setSupportUrl((String)value);
      }
      break;

    case ACCOUNT_EMAIL_DOMAIN:
      if (value == null) {
        unsetAccountEmailDomain();
      } else {
        setAccountEmailDomain((String)value);
      }
      break;

    case ENABLE_FACEBOOK_SHARING:
      if (value == null) {
        unsetEnableFacebookSharing();
      } else {
        setEnableFacebookSharing((Boolean)value);
      }
      break;

    case ENABLE_GIFT_SUBSCRIPTIONS:
      if (value == null) {
        unsetEnableGiftSubscriptions();
      } else {
        setEnableGiftSubscriptions((Boolean)value);
      }
      break;

    case ENABLE_SUPPORT_TICKETS:
      if (value == null) {
        unsetEnableSupportTickets();
      } else {
        setEnableSupportTickets((Boolean)value);
      }
      break;

    case ENABLE_SHARED_NOTEBOOKS:
      if (value == null) {
        unsetEnableSharedNotebooks();
      } else {
        setEnableSharedNotebooks((Boolean)value);
      }
      break;

    case ENABLE_SINGLE_NOTE_SHARING:
      if (value == null) {
        unsetEnableSingleNoteSharing();
      } else {
        setEnableSingleNoteSharing((Boolean)value);
      }
      break;

    case ENABLE_SPONSORED_ACCOUNTS:
      if (value == null) {
        unsetEnableSponsoredAccounts();
      } else {
        setEnableSponsoredAccounts((Boolean)value);
      }
      break;

    case ENABLE_TWITTER_SHARING:
      if (value == null) {
        unsetEnableTwitterSharing();
      } else {
        setEnableTwitterSharing((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_HOST:
      return getServiceHost();

    case MARKETING_URL:
      return getMarketingUrl();

    case SUPPORT_URL:
      return getSupportUrl();

    case ACCOUNT_EMAIL_DOMAIN:
      return getAccountEmailDomain();

    case ENABLE_FACEBOOK_SHARING:
      return new Boolean(isEnableFacebookSharing());

    case ENABLE_GIFT_SUBSCRIPTIONS:
      return new Boolean(isEnableGiftSubscriptions());

    case ENABLE_SUPPORT_TICKETS:
      return new Boolean(isEnableSupportTickets());

    case ENABLE_SHARED_NOTEBOOKS:
      return new Boolean(isEnableSharedNotebooks());

    case ENABLE_SINGLE_NOTE_SHARING:
      return new Boolean(isEnableSingleNoteSharing());

    case ENABLE_SPONSORED_ACCOUNTS:
      return new Boolean(isEnableSponsoredAccounts());

    case ENABLE_TWITTER_SHARING:
      return new Boolean(isEnableTwitterSharing());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_HOST:
      return isSetServiceHost();
    case MARKETING_URL:
      return isSetMarketingUrl();
    case SUPPORT_URL:
      return isSetSupportUrl();
    case ACCOUNT_EMAIL_DOMAIN:
      return isSetAccountEmailDomain();
    case ENABLE_FACEBOOK_SHARING:
      return isSetEnableFacebookSharing();
    case ENABLE_GIFT_SUBSCRIPTIONS:
      return isSetEnableGiftSubscriptions();
    case ENABLE_SUPPORT_TICKETS:
      return isSetEnableSupportTickets();
    case ENABLE_SHARED_NOTEBOOKS:
      return isSetEnableSharedNotebooks();
    case ENABLE_SINGLE_NOTE_SHARING:
      return isSetEnableSingleNoteSharing();
    case ENABLE_SPONSORED_ACCOUNTS:
      return isSetEnableSponsoredAccounts();
    case ENABLE_TWITTER_SHARING:
      return isSetEnableTwitterSharing();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BootstrapSettings)
      return this.equals((BootstrapSettings)that);
    return false;
  }

  public boolean equals(BootstrapSettings that) {
    if (that == null)
      return false;

    boolean this_present_serviceHost = true && this.isSetServiceHost();
    boolean that_present_serviceHost = true && that.isSetServiceHost();
    if (this_present_serviceHost || that_present_serviceHost) {
      if (!(this_present_serviceHost && that_present_serviceHost))
        return false;
      if (!this.serviceHost.equals(that.serviceHost))
        return false;
    }

    boolean this_present_marketingUrl = true && this.isSetMarketingUrl();
    boolean that_present_marketingUrl = true && that.isSetMarketingUrl();
    if (this_present_marketingUrl || that_present_marketingUrl) {
      if (!(this_present_marketingUrl && that_present_marketingUrl))
        return false;
      if (!this.marketingUrl.equals(that.marketingUrl))
        return false;
    }

    boolean this_present_supportUrl = true && this.isSetSupportUrl();
    boolean that_present_supportUrl = true && that.isSetSupportUrl();
    if (this_present_supportUrl || that_present_supportUrl) {
      if (!(this_present_supportUrl && that_present_supportUrl))
        return false;
      if (!this.supportUrl.equals(that.supportUrl))
        return false;
    }

    boolean this_present_accountEmailDomain = true && this.isSetAccountEmailDomain();
    boolean that_present_accountEmailDomain = true && that.isSetAccountEmailDomain();
    if (this_present_accountEmailDomain || that_present_accountEmailDomain) {
      if (!(this_present_accountEmailDomain && that_present_accountEmailDomain))
        return false;
      if (!this.accountEmailDomain.equals(that.accountEmailDomain))
        return false;
    }

    boolean this_present_enableFacebookSharing = true && this.isSetEnableFacebookSharing();
    boolean that_present_enableFacebookSharing = true && that.isSetEnableFacebookSharing();
    if (this_present_enableFacebookSharing || that_present_enableFacebookSharing) {
      if (!(this_present_enableFacebookSharing && that_present_enableFacebookSharing))
        return false;
      if (this.enableFacebookSharing != that.enableFacebookSharing)
        return false;
    }

    boolean this_present_enableGiftSubscriptions = true && this.isSetEnableGiftSubscriptions();
    boolean that_present_enableGiftSubscriptions = true && that.isSetEnableGiftSubscriptions();
    if (this_present_enableGiftSubscriptions || that_present_enableGiftSubscriptions) {
      if (!(this_present_enableGiftSubscriptions && that_present_enableGiftSubscriptions))
        return false;
      if (this.enableGiftSubscriptions != that.enableGiftSubscriptions)
        return false;
    }

    boolean this_present_enableSupportTickets = true && this.isSetEnableSupportTickets();
    boolean that_present_enableSupportTickets = true && that.isSetEnableSupportTickets();
    if (this_present_enableSupportTickets || that_present_enableSupportTickets) {
      if (!(this_present_enableSupportTickets && that_present_enableSupportTickets))
        return false;
      if (this.enableSupportTickets != that.enableSupportTickets)
        return false;
    }

    boolean this_present_enableSharedNotebooks = true && this.isSetEnableSharedNotebooks();
    boolean that_present_enableSharedNotebooks = true && that.isSetEnableSharedNotebooks();
    if (this_present_enableSharedNotebooks || that_present_enableSharedNotebooks) {
      if (!(this_present_enableSharedNotebooks && that_present_enableSharedNotebooks))
        return false;
      if (this.enableSharedNotebooks != that.enableSharedNotebooks)
        return false;
    }

    boolean this_present_enableSingleNoteSharing = true && this.isSetEnableSingleNoteSharing();
    boolean that_present_enableSingleNoteSharing = true && that.isSetEnableSingleNoteSharing();
    if (this_present_enableSingleNoteSharing || that_present_enableSingleNoteSharing) {
      if (!(this_present_enableSingleNoteSharing && that_present_enableSingleNoteSharing))
        return false;
      if (this.enableSingleNoteSharing != that.enableSingleNoteSharing)
        return false;
    }

    boolean this_present_enableSponsoredAccounts = true && this.isSetEnableSponsoredAccounts();
    boolean that_present_enableSponsoredAccounts = true && that.isSetEnableSponsoredAccounts();
    if (this_present_enableSponsoredAccounts || that_present_enableSponsoredAccounts) {
      if (!(this_present_enableSponsoredAccounts && that_present_enableSponsoredAccounts))
        return false;
      if (this.enableSponsoredAccounts != that.enableSponsoredAccounts)
        return false;
    }

    boolean this_present_enableTwitterSharing = true && this.isSetEnableTwitterSharing();
    boolean that_present_enableTwitterSharing = true && that.isSetEnableTwitterSharing();
    if (this_present_enableTwitterSharing || that_present_enableTwitterSharing) {
      if (!(this_present_enableTwitterSharing && that_present_enableTwitterSharing))
        return false;
      if (this.enableTwitterSharing != that.enableTwitterSharing)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(BootstrapSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BootstrapSettings typedOther = (BootstrapSettings)other;

    lastComparison = Boolean.valueOf(isSetServiceHost()).compareTo(typedOther.isSetServiceHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceHost()) {      lastComparison = TBaseHelper.compareTo(this.serviceHost, typedOther.serviceHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketingUrl()).compareTo(typedOther.isSetMarketingUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketingUrl()) {      lastComparison = TBaseHelper.compareTo(this.marketingUrl, typedOther.marketingUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportUrl()).compareTo(typedOther.isSetSupportUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportUrl()) {      lastComparison = TBaseHelper.compareTo(this.supportUrl, typedOther.supportUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountEmailDomain()).compareTo(typedOther.isSetAccountEmailDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountEmailDomain()) {      lastComparison = TBaseHelper.compareTo(this.accountEmailDomain, typedOther.accountEmailDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableFacebookSharing()).compareTo(typedOther.isSetEnableFacebookSharing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableFacebookSharing()) {      lastComparison = TBaseHelper.compareTo(this.enableFacebookSharing, typedOther.enableFacebookSharing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableGiftSubscriptions()).compareTo(typedOther.isSetEnableGiftSubscriptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableGiftSubscriptions()) {      lastComparison = TBaseHelper.compareTo(this.enableGiftSubscriptions, typedOther.enableGiftSubscriptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableSupportTickets()).compareTo(typedOther.isSetEnableSupportTickets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableSupportTickets()) {      lastComparison = TBaseHelper.compareTo(this.enableSupportTickets, typedOther.enableSupportTickets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableSharedNotebooks()).compareTo(typedOther.isSetEnableSharedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableSharedNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.enableSharedNotebooks, typedOther.enableSharedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableSingleNoteSharing()).compareTo(typedOther.isSetEnableSingleNoteSharing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableSingleNoteSharing()) {      lastComparison = TBaseHelper.compareTo(this.enableSingleNoteSharing, typedOther.enableSingleNoteSharing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableSponsoredAccounts()).compareTo(typedOther.isSetEnableSponsoredAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableSponsoredAccounts()) {      lastComparison = TBaseHelper.compareTo(this.enableSponsoredAccounts, typedOther.enableSponsoredAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableTwitterSharing()).compareTo(typedOther.isSetEnableTwitterSharing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableTwitterSharing()) {      lastComparison = TBaseHelper.compareTo(this.enableTwitterSharing, typedOther.enableTwitterSharing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SERVICE_HOST
          if (field.type == TType.STRING) {
            this.serviceHost = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MARKETING_URL
          if (field.type == TType.STRING) {
            this.marketingUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUPPORT_URL
          if (field.type == TType.STRING) {
            this.supportUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ACCOUNT_EMAIL_DOMAIN
          if (field.type == TType.STRING) {
            this.accountEmailDomain = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ENABLE_FACEBOOK_SHARING
          if (field.type == TType.BOOL) {
            this.enableFacebookSharing = iprot.readBool();
            setEnableFacebookSharingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ENABLE_GIFT_SUBSCRIPTIONS
          if (field.type == TType.BOOL) {
            this.enableGiftSubscriptions = iprot.readBool();
            setEnableGiftSubscriptionsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ENABLE_SUPPORT_TICKETS
          if (field.type == TType.BOOL) {
            this.enableSupportTickets = iprot.readBool();
            setEnableSupportTicketsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ENABLE_SHARED_NOTEBOOKS
          if (field.type == TType.BOOL) {
            this.enableSharedNotebooks = iprot.readBool();
            setEnableSharedNotebooksIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ENABLE_SINGLE_NOTE_SHARING
          if (field.type == TType.BOOL) {
            this.enableSingleNoteSharing = iprot.readBool();
            setEnableSingleNoteSharingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // ENABLE_SPONSORED_ACCOUNTS
          if (field.type == TType.BOOL) {
            this.enableSponsoredAccounts = iprot.readBool();
            setEnableSponsoredAccountsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ENABLE_TWITTER_SHARING
          if (field.type == TType.BOOL) {
            this.enableTwitterSharing = iprot.readBool();
            setEnableTwitterSharingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.serviceHost != null) {
      oprot.writeFieldBegin(SERVICE_HOST_FIELD_DESC);
      oprot.writeString(this.serviceHost);
      oprot.writeFieldEnd();
    }
    if (this.marketingUrl != null) {
      oprot.writeFieldBegin(MARKETING_URL_FIELD_DESC);
      oprot.writeString(this.marketingUrl);
      oprot.writeFieldEnd();
    }
    if (this.supportUrl != null) {
      oprot.writeFieldBegin(SUPPORT_URL_FIELD_DESC);
      oprot.writeString(this.supportUrl);
      oprot.writeFieldEnd();
    }
    if (this.accountEmailDomain != null) {
      oprot.writeFieldBegin(ACCOUNT_EMAIL_DOMAIN_FIELD_DESC);
      oprot.writeString(this.accountEmailDomain);
      oprot.writeFieldEnd();
    }
    if (isSetEnableFacebookSharing()) {
      oprot.writeFieldBegin(ENABLE_FACEBOOK_SHARING_FIELD_DESC);
      oprot.writeBool(this.enableFacebookSharing);
      oprot.writeFieldEnd();
    }
    if (isSetEnableGiftSubscriptions()) {
      oprot.writeFieldBegin(ENABLE_GIFT_SUBSCRIPTIONS_FIELD_DESC);
      oprot.writeBool(this.enableGiftSubscriptions);
      oprot.writeFieldEnd();
    }
    if (isSetEnableSupportTickets()) {
      oprot.writeFieldBegin(ENABLE_SUPPORT_TICKETS_FIELD_DESC);
      oprot.writeBool(this.enableSupportTickets);
      oprot.writeFieldEnd();
    }
    if (isSetEnableSharedNotebooks()) {
      oprot.writeFieldBegin(ENABLE_SHARED_NOTEBOOKS_FIELD_DESC);
      oprot.writeBool(this.enableSharedNotebooks);
      oprot.writeFieldEnd();
    }
    if (isSetEnableSingleNoteSharing()) {
      oprot.writeFieldBegin(ENABLE_SINGLE_NOTE_SHARING_FIELD_DESC);
      oprot.writeBool(this.enableSingleNoteSharing);
      oprot.writeFieldEnd();
    }
    if (isSetEnableSponsoredAccounts()) {
      oprot.writeFieldBegin(ENABLE_SPONSORED_ACCOUNTS_FIELD_DESC);
      oprot.writeBool(this.enableSponsoredAccounts);
      oprot.writeFieldEnd();
    }
    if (isSetEnableTwitterSharing()) {
      oprot.writeFieldBegin(ENABLE_TWITTER_SHARING_FIELD_DESC);
      oprot.writeBool(this.enableTwitterSharing);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("BootstrapSettings(");
    boolean first = true;

    sb.append("serviceHost:");
    if (this.serviceHost == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketingUrl:");
    if (this.marketingUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.marketingUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportUrl:");
    if (this.supportUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.supportUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountEmailDomain:");
    if (this.accountEmailDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.accountEmailDomain);
    }
    first = false;
    if (isSetEnableFacebookSharing()) {
      if (!first) sb.append(", ");
      sb.append("enableFacebookSharing:");
      sb.append(this.enableFacebookSharing);
      first = false;
    }
    if (isSetEnableGiftSubscriptions()) {
      if (!first) sb.append(", ");
      sb.append("enableGiftSubscriptions:");
      sb.append(this.enableGiftSubscriptions);
      first = false;
    }
    if (isSetEnableSupportTickets()) {
      if (!first) sb.append(", ");
      sb.append("enableSupportTickets:");
      sb.append(this.enableSupportTickets);
      first = false;
    }
    if (isSetEnableSharedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("enableSharedNotebooks:");
      sb.append(this.enableSharedNotebooks);
      first = false;
    }
    if (isSetEnableSingleNoteSharing()) {
      if (!first) sb.append(", ");
      sb.append("enableSingleNoteSharing:");
      sb.append(this.enableSingleNoteSharing);
      first = false;
    }
    if (isSetEnableSponsoredAccounts()) {
      if (!first) sb.append(", ");
      sb.append("enableSponsoredAccounts:");
      sb.append(this.enableSponsoredAccounts);
      first = false;
    }
    if (isSetEnableTwitterSharing()) {
      if (!first) sb.append(", ");
      sb.append("enableTwitterSharing:");
      sb.append(this.enableTwitterSharing);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetServiceHost()) {
      throw new TProtocolException("Required field 'serviceHost' is unset! Struct:" + toString());
    }

    if (!isSetMarketingUrl()) {
      throw new TProtocolException("Required field 'marketingUrl' is unset! Struct:" + toString());
    }

    if (!isSetSupportUrl()) {
      throw new TProtocolException("Required field 'supportUrl' is unset! Struct:" + toString());
    }

    if (!isSetAccountEmailDomain()) {
      throw new TProtocolException("Required field 'accountEmailDomain' is unset! Struct:" + toString());
    }

  }

}

