/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  When an authentication (or re-authentication) is performed, this structure
 *  provides the result to the client.
 * <dl>
 *  <dt>currentTime:</dt>
 *    <dd>
 *    The server-side date and time when this result was
 *    generated.
 *    </dd>
 *  <dt>authenticationToken:</dt>
 *    <dd>
 *    Holds an opaque, ASCII-encoded token that can be
 *    used by the client to perform actions on a NoteStore.
 *    </dd>
 *  <dt>expiration:</dt>
 *    <dd>
 *    Holds the server-side date and time when the
 *    authentication token will expire.
 *    This time can be compared to "currentTime" to produce an expiration
 *    time that can be reconciled with the client's local clock.
 *    </dd>
 *  <dt>user:</dt>
 *    <dd>
 *    Holds the information about the account which was
 *    authenticated if this was a full authentication.  May be absent if this
 *    particular authentication did not require user information.
 *    </dd>
 *  <dt>publicUserInfo:</dt>
 *    <dd>
 *    If this authentication result was achieved without full permissions to
 *    access the full User structure, this field may be set to give back
 *    a more limited public set of data.
 *    </dd>
 *  <dt>noteStoreUrl:</dt>
 *    <dd>
 *    This field will contain the full URL that clients should use to make
 *    NoteStore requests to the server shard that contains that user's data.
 *    I.e. this is the URL that should be used to create the Thrift HTTP client
 *    transport to send messages to the NoteStore service for the account.
 *    </dd>
 *  <dt>webApiUrlPrefix:</dt>
 *    <dd>
 *    This field will contain the initial part of the URLs that should be used
 *    to make requests to Evernote's thin client "web API", which provide
 *    optimized operations for clients that aren't capable of manipulating
 *    the full contents of accounts via the full Thrift data model. Clients
 *    should concatenate the relative path for the various servlets onto the
 *    end of this string to construct the full URL, as documented on our
 *    developer web site.
 *    </dd>
 *  </dl>
 */
public class AuthenticationResult implements TBase<AuthenticationResult, AuthenticationResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AuthenticationResult");

  private static final TField CURRENT_TIME_FIELD_DESC = new TField("currentTime", TType.I64, (short)1);
  private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)2);
  private static final TField EXPIRATION_FIELD_DESC = new TField("expiration", TType.I64, (short)3);
  private static final TField USER_FIELD_DESC = new TField("user", TType.STRUCT, (short)4);
  private static final TField PUBLIC_USER_INFO_FIELD_DESC = new TField("publicUserInfo", TType.STRUCT, (short)5);
  private static final TField NOTE_STORE_URL_FIELD_DESC = new TField("noteStoreUrl", TType.STRING, (short)6);
  private static final TField WEB_API_URL_PREFIX_FIELD_DESC = new TField("webApiUrlPrefix", TType.STRING, (short)7);

  private long currentTime;
  private String authenticationToken;
  private long expiration;
  private com.evernote.edam.type.User user;
  private PublicUserInfo publicUserInfo;
  private String noteStoreUrl;
  private String webApiUrlPrefix;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CURRENT_TIME((short)1, "currentTime"),
    AUTHENTICATION_TOKEN((short)2, "authenticationToken"),
    EXPIRATION((short)3, "expiration"),
    USER((short)4, "user"),
    PUBLIC_USER_INFO((short)5, "publicUserInfo"),
    NOTE_STORE_URL((short)6, "noteStoreUrl"),
    WEB_API_URL_PREFIX((short)7, "webApiUrlPrefix");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_TIME
          return CURRENT_TIME;
        case 2: // AUTHENTICATION_TOKEN
          return AUTHENTICATION_TOKEN;
        case 3: // EXPIRATION
          return EXPIRATION;
        case 4: // USER
          return USER;
        case 5: // PUBLIC_USER_INFO
          return PUBLIC_USER_INFO;
        case 6: // NOTE_STORE_URL
          return NOTE_STORE_URL;
        case 7: // WEB_API_URL_PREFIX
          return WEB_API_URL_PREFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTTIME_ISSET_ID = 0;
  private static final int __EXPIRATION_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_TIME, new FieldMetaData("currentTime", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXPIRATION, new FieldMetaData("expiration", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, com.evernote.edam.type.User.class)));
    tmpMap.put(_Fields.PUBLIC_USER_INFO, new FieldMetaData("publicUserInfo", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, PublicUserInfo.class)));
    tmpMap.put(_Fields.NOTE_STORE_URL, new FieldMetaData("noteStoreUrl", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WEB_API_URL_PREFIX, new FieldMetaData("webApiUrlPrefix", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(AuthenticationResult.class, metaDataMap);
  }

  public AuthenticationResult() {
  }

  public AuthenticationResult(
    long currentTime,
    String authenticationToken,
    long expiration)
  {
    this();
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
    this.authenticationToken = authenticationToken;
    this.expiration = expiration;
    setExpirationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthenticationResult(AuthenticationResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.currentTime = other.currentTime;
    if (other.isSetAuthenticationToken()) {
      this.authenticationToken = other.authenticationToken;
    }
    this.expiration = other.expiration;
    if (other.isSetUser()) {
      this.user = new com.evernote.edam.type.User(other.user);
    }
    if (other.isSetPublicUserInfo()) {
      this.publicUserInfo = new PublicUserInfo(other.publicUserInfo);
    }
    if (other.isSetNoteStoreUrl()) {
      this.noteStoreUrl = other.noteStoreUrl;
    }
    if (other.isSetWebApiUrlPrefix()) {
      this.webApiUrlPrefix = other.webApiUrlPrefix;
    }
  }

  public AuthenticationResult deepCopy() {
    return new AuthenticationResult(this);
  }

  public void clear() {
    setCurrentTimeIsSet(false);
    this.currentTime = 0;
    this.authenticationToken = null;
    setExpirationIsSet(false);
    this.expiration = 0;
    this.user = null;
    this.publicUserInfo = null;
    this.noteStoreUrl = null;
    this.webApiUrlPrefix = null;
  }

  public long getCurrentTime() {
    return this.currentTime;
  }

  public void setCurrentTime(long currentTime) {
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
  }

  public void unsetCurrentTime() {
    __isset_vector[__CURRENTTIME_ISSET_ID] = false;
  }

  /** Returns true if field currentTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return __isset_vector[__CURRENTTIME_ISSET_ID];
  }

  public void setCurrentTimeIsSet(boolean value) {
    __isset_vector[__CURRENTTIME_ISSET_ID] = value;
  }

  public String getAuthenticationToken() {
    return this.authenticationToken;
  }

  public void setAuthenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
  }

  public void unsetAuthenticationToken() {
    this.authenticationToken = null;
  }

  /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
  public boolean isSetAuthenticationToken() {
    return this.authenticationToken != null;
  }

  public void setAuthenticationTokenIsSet(boolean value) {
    if (!value) {
      this.authenticationToken = null;
    }
  }

  public long getExpiration() {
    return this.expiration;
  }

  public void setExpiration(long expiration) {
    this.expiration = expiration;
    setExpirationIsSet(true);
  }

  public void unsetExpiration() {
    __isset_vector[__EXPIRATION_ISSET_ID] = false;
  }

  /** Returns true if field expiration is set (has been asigned a value) and false otherwise */
  public boolean isSetExpiration() {
    return __isset_vector[__EXPIRATION_ISSET_ID];
  }

  public void setExpirationIsSet(boolean value) {
    __isset_vector[__EXPIRATION_ISSET_ID] = value;
  }

  public com.evernote.edam.type.User getUser() {
    return this.user;
  }

  public void setUser(com.evernote.edam.type.User user) {
    this.user = user;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been asigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public PublicUserInfo getPublicUserInfo() {
    return this.publicUserInfo;
  }

  public void setPublicUserInfo(PublicUserInfo publicUserInfo) {
    this.publicUserInfo = publicUserInfo;
  }

  public void unsetPublicUserInfo() {
    this.publicUserInfo = null;
  }

  /** Returns true if field publicUserInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetPublicUserInfo() {
    return this.publicUserInfo != null;
  }

  public void setPublicUserInfoIsSet(boolean value) {
    if (!value) {
      this.publicUserInfo = null;
    }
  }

  public String getNoteStoreUrl() {
    return this.noteStoreUrl;
  }

  public void setNoteStoreUrl(String noteStoreUrl) {
    this.noteStoreUrl = noteStoreUrl;
  }

  public void unsetNoteStoreUrl() {
    this.noteStoreUrl = null;
  }

  /** Returns true if field noteStoreUrl is set (has been asigned a value) and false otherwise */
  public boolean isSetNoteStoreUrl() {
    return this.noteStoreUrl != null;
  }

  public void setNoteStoreUrlIsSet(boolean value) {
    if (!value) {
      this.noteStoreUrl = null;
    }
  }

  public String getWebApiUrlPrefix() {
    return this.webApiUrlPrefix;
  }

  public void setWebApiUrlPrefix(String webApiUrlPrefix) {
    this.webApiUrlPrefix = webApiUrlPrefix;
  }

  public void unsetWebApiUrlPrefix() {
    this.webApiUrlPrefix = null;
  }

  /** Returns true if field webApiUrlPrefix is set (has been asigned a value) and false otherwise */
  public boolean isSetWebApiUrlPrefix() {
    return this.webApiUrlPrefix != null;
  }

  public void setWebApiUrlPrefixIsSet(boolean value) {
    if (!value) {
      this.webApiUrlPrefix = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_TIME:
      if (value == null) {
        unsetCurrentTime();
      } else {
        setCurrentTime((Long)value);
      }
      break;

    case AUTHENTICATION_TOKEN:
      if (value == null) {
        unsetAuthenticationToken();
      } else {
        setAuthenticationToken((String)value);
      }
      break;

    case EXPIRATION:
      if (value == null) {
        unsetExpiration();
      } else {
        setExpiration((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((com.evernote.edam.type.User)value);
      }
      break;

    case PUBLIC_USER_INFO:
      if (value == null) {
        unsetPublicUserInfo();
      } else {
        setPublicUserInfo((PublicUserInfo)value);
      }
      break;

    case NOTE_STORE_URL:
      if (value == null) {
        unsetNoteStoreUrl();
      } else {
        setNoteStoreUrl((String)value);
      }
      break;

    case WEB_API_URL_PREFIX:
      if (value == null) {
        unsetWebApiUrlPrefix();
      } else {
        setWebApiUrlPrefix((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_TIME:
      return new Long(getCurrentTime());

    case AUTHENTICATION_TOKEN:
      return getAuthenticationToken();

    case EXPIRATION:
      return new Long(getExpiration());

    case USER:
      return getUser();

    case PUBLIC_USER_INFO:
      return getPublicUserInfo();

    case NOTE_STORE_URL:
      return getNoteStoreUrl();

    case WEB_API_URL_PREFIX:
      return getWebApiUrlPrefix();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_TIME:
      return isSetCurrentTime();
    case AUTHENTICATION_TOKEN:
      return isSetAuthenticationToken();
    case EXPIRATION:
      return isSetExpiration();
    case USER:
      return isSetUser();
    case PUBLIC_USER_INFO:
      return isSetPublicUserInfo();
    case NOTE_STORE_URL:
      return isSetNoteStoreUrl();
    case WEB_API_URL_PREFIX:
      return isSetWebApiUrlPrefix();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthenticationResult)
      return this.equals((AuthenticationResult)that);
    return false;
  }

  public boolean equals(AuthenticationResult that) {
    if (that == null)
      return false;

    boolean this_present_currentTime = true;
    boolean that_present_currentTime = true;
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (this.currentTime != that.currentTime)
        return false;
    }

    boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
    boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
    if (this_present_authenticationToken || that_present_authenticationToken) {
      if (!(this_present_authenticationToken && that_present_authenticationToken))
        return false;
      if (!this.authenticationToken.equals(that.authenticationToken))
        return false;
    }

    boolean this_present_expiration = true;
    boolean that_present_expiration = true;
    if (this_present_expiration || that_present_expiration) {
      if (!(this_present_expiration && that_present_expiration))
        return false;
      if (this.expiration != that.expiration)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_publicUserInfo = true && this.isSetPublicUserInfo();
    boolean that_present_publicUserInfo = true && that.isSetPublicUserInfo();
    if (this_present_publicUserInfo || that_present_publicUserInfo) {
      if (!(this_present_publicUserInfo && that_present_publicUserInfo))
        return false;
      if (!this.publicUserInfo.equals(that.publicUserInfo))
        return false;
    }

    boolean this_present_noteStoreUrl = true && this.isSetNoteStoreUrl();
    boolean that_present_noteStoreUrl = true && that.isSetNoteStoreUrl();
    if (this_present_noteStoreUrl || that_present_noteStoreUrl) {
      if (!(this_present_noteStoreUrl && that_present_noteStoreUrl))
        return false;
      if (!this.noteStoreUrl.equals(that.noteStoreUrl))
        return false;
    }

    boolean this_present_webApiUrlPrefix = true && this.isSetWebApiUrlPrefix();
    boolean that_present_webApiUrlPrefix = true && that.isSetWebApiUrlPrefix();
    if (this_present_webApiUrlPrefix || that_present_webApiUrlPrefix) {
      if (!(this_present_webApiUrlPrefix && that_present_webApiUrlPrefix))
        return false;
      if (!this.webApiUrlPrefix.equals(that.webApiUrlPrefix))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(AuthenticationResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AuthenticationResult typedOther = (AuthenticationResult)other;

    lastComparison = Boolean.valueOf(isSetCurrentTime()).compareTo(typedOther.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {      lastComparison = TBaseHelper.compareTo(this.currentTime, typedOther.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthenticationToken()) {      lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiration()).compareTo(typedOther.isSetExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiration()) {      lastComparison = TBaseHelper.compareTo(this.expiration, typedOther.expiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {      lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicUserInfo()).compareTo(typedOther.isSetPublicUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicUserInfo()) {      lastComparison = TBaseHelper.compareTo(this.publicUserInfo, typedOther.publicUserInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoteStoreUrl()).compareTo(typedOther.isSetNoteStoreUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteStoreUrl()) {      lastComparison = TBaseHelper.compareTo(this.noteStoreUrl, typedOther.noteStoreUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebApiUrlPrefix()).compareTo(typedOther.isSetWebApiUrlPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebApiUrlPrefix()) {      lastComparison = TBaseHelper.compareTo(this.webApiUrlPrefix, typedOther.webApiUrlPrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CURRENT_TIME
          if (field.type == TType.I64) {
            this.currentTime = iprot.readI64();
            setCurrentTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // AUTHENTICATION_TOKEN
          if (field.type == TType.STRING) {
            this.authenticationToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXPIRATION
          if (field.type == TType.I64) {
            this.expiration = iprot.readI64();
            setExpirationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // USER
          if (field.type == TType.STRUCT) {
            this.user = new com.evernote.edam.type.User();
            this.user.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PUBLIC_USER_INFO
          if (field.type == TType.STRUCT) {
            this.publicUserInfo = new PublicUserInfo();
            this.publicUserInfo.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // NOTE_STORE_URL
          if (field.type == TType.STRING) {
            this.noteStoreUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // WEB_API_URL_PREFIX
          if (field.type == TType.STRING) {
            this.webApiUrlPrefix = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
    oprot.writeI64(this.currentTime);
    oprot.writeFieldEnd();
    if (this.authenticationToken != null) {
      oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.authenticationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
    oprot.writeI64(this.expiration);
    oprot.writeFieldEnd();
    if (this.user != null) {
      if (isSetUser()) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        this.user.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.publicUserInfo != null) {
      if (isSetPublicUserInfo()) {
        oprot.writeFieldBegin(PUBLIC_USER_INFO_FIELD_DESC);
        this.publicUserInfo.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.noteStoreUrl != null) {
      if (isSetNoteStoreUrl()) {
        oprot.writeFieldBegin(NOTE_STORE_URL_FIELD_DESC);
        oprot.writeString(this.noteStoreUrl);
        oprot.writeFieldEnd();
      }
    }
    if (this.webApiUrlPrefix != null) {
      if (isSetWebApiUrlPrefix()) {
        oprot.writeFieldBegin(WEB_API_URL_PREFIX_FIELD_DESC);
        oprot.writeString(this.webApiUrlPrefix);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("AuthenticationResult(");
    boolean first = true;

    sb.append("currentTime:");
    sb.append(this.currentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authenticationToken:");
    if (this.authenticationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authenticationToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiration:");
    sb.append(this.expiration);
    first = false;
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetPublicUserInfo()) {
      if (!first) sb.append(", ");
      sb.append("publicUserInfo:");
      if (this.publicUserInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.publicUserInfo);
      }
      first = false;
    }
    if (isSetNoteStoreUrl()) {
      if (!first) sb.append(", ");
      sb.append("noteStoreUrl:");
      if (this.noteStoreUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.noteStoreUrl);
      }
      first = false;
    }
    if (isSetWebApiUrlPrefix()) {
      if (!first) sb.append(", ");
      sb.append("webApiUrlPrefix:");
      if (this.webApiUrlPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.webApiUrlPrefix);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetCurrentTime()) {
      throw new TProtocolException("Required field 'currentTime' is unset! Struct:" + toString());
    }

    if (!isSetAuthenticationToken()) {
      throw new TProtocolException("Required field 'authenticationToken' is unset! Struct:" + toString());
    }

    if (!isSetExpiration()) {
      throw new TProtocolException("Required field 'expiration' is unset! Struct:" + toString());
    }

  }

}

