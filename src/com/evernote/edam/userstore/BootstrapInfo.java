/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  This structure describes a collection of bootstrap profiles.
 * <dl>
 *  <dt>profiles:</dt>
 *    <dd>
 *    List of one or more bootstrap profiles, in descending
 *    preference order.
 *    </dd>
 *  </dl>
 */
public class BootstrapInfo implements TBase<BootstrapInfo, BootstrapInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BootstrapInfo");

  private static final TField PROFILES_FIELD_DESC = new TField("profiles", TType.LIST, (short)1);

  private List<BootstrapProfile> profiles;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    PROFILES((short)1, "profiles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROFILES
          return PROFILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROFILES, new FieldMetaData("profiles", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, BootstrapProfile.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BootstrapInfo.class, metaDataMap);
  }

  public BootstrapInfo() {
  }

  public BootstrapInfo(
    List<BootstrapProfile> profiles)
  {
    this();
    this.profiles = profiles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BootstrapInfo(BootstrapInfo other) {
    if (other.isSetProfiles()) {
      List<BootstrapProfile> __this__profiles = new ArrayList<BootstrapProfile>();
      for (BootstrapProfile other_element : other.profiles) {
        __this__profiles.add(new BootstrapProfile(other_element));
      }
      this.profiles = __this__profiles;
    }
  }

  public BootstrapInfo deepCopy() {
    return new BootstrapInfo(this);
  }

  public void clear() {
    this.profiles = null;
  }

  public int getProfilesSize() {
    return (this.profiles == null) ? 0 : this.profiles.size();
  }

  public java.util.Iterator<BootstrapProfile> getProfilesIterator() {
    return (this.profiles == null) ? null : this.profiles.iterator();
  }

  public void addToProfiles(BootstrapProfile elem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<BootstrapProfile>();
    }
    this.profiles.add(elem);
  }

  public List<BootstrapProfile> getProfiles() {
    return this.profiles;
  }

  public void setProfiles(List<BootstrapProfile> profiles) {
    this.profiles = profiles;
  }

  public void unsetProfiles() {
    this.profiles = null;
  }

  /** Returns true if field profiles is set (has been asigned a value) and false otherwise */
  public boolean isSetProfiles() {
    return this.profiles != null;
  }

  public void setProfilesIsSet(boolean value) {
    if (!value) {
      this.profiles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROFILES:
      if (value == null) {
        unsetProfiles();
      } else {
        setProfiles((List<BootstrapProfile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROFILES:
      return getProfiles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROFILES:
      return isSetProfiles();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BootstrapInfo)
      return this.equals((BootstrapInfo)that);
    return false;
  }

  public boolean equals(BootstrapInfo that) {
    if (that == null)
      return false;

    boolean this_present_profiles = true && this.isSetProfiles();
    boolean that_present_profiles = true && that.isSetProfiles();
    if (this_present_profiles || that_present_profiles) {
      if (!(this_present_profiles && that_present_profiles))
        return false;
      if (!this.profiles.equals(that.profiles))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(BootstrapInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BootstrapInfo typedOther = (BootstrapInfo)other;

    lastComparison = Boolean.valueOf(isSetProfiles()).compareTo(typedOther.isSetProfiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfiles()) {      lastComparison = TBaseHelper.compareTo(this.profiles, typedOther.profiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PROFILES
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.profiles = new ArrayList<BootstrapProfile>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                BootstrapProfile _elem2;
                _elem2 = new BootstrapProfile();
                _elem2.read(iprot);
                this.profiles.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.profiles != null) {
      oprot.writeFieldBegin(PROFILES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.profiles.size()));
        for (BootstrapProfile _iter3 : this.profiles)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("BootstrapInfo(");
    boolean first = true;

    sb.append("profiles:");
    if (this.profiles == null) {
      sb.append("null");
    } else {
      sb.append(this.profiles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetProfiles()) {
      throw new TProtocolException("Required field 'profiles' is unset! Struct:" + toString());
    }

  }

}

