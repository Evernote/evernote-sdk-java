/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * A unique container for a set of notes.
 * <dl>
 * <dt>guid</dt>
 *   <dd>The unique identifier of this notebook.
 *   <br/>
 *   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_GUID_REGEX
 *   </dd>
 * 
 * <dt>name</dt>
 *   <dd>A sequence of characters representing the name of the
 *   notebook.  May be changed by clients, but the account may not contain two
 *   notebooks with names that are equal via a case-insensitive comparison.
 *   Can't begin or end with a space.
 *   <br/>
 *   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
 *   <br/>
 *   Regex:  EDAM_NOTEBOOK_NAME_REGEX
 *   </dd>
 * 
 * <dt>updateSequenceNum</dt>
 *   <dd>A number identifying the last transaction to
 *   modify the state of this object.  The USN values are sequential within an
 *   account, and can be used to compare the order of modifications within the
 *   service.
 *   </dd>
 * 
 * <dt>defaultNotebook</dt>
 *   <dd>If true, this notebook should be used for new notes
 *   whenever the user has not (or cannot) specify a desired target notebook.
 *   For example, if a note is submitted via SMTP email.
 *   The service will maintain at most one defaultNotebook per account.
 *   If a second notebook is created or updated with defaultNotebook set to
 *   true, the service will automatically update the prior notebook's
 *   defaultNotebook field to false.  If the default notebook is deleted
 *   (i.e. "active" set to false), the "defaultNotebook" field will be
 *   set to false by the service.  If the account has no default notebook
 *   set, the service will use the most recent notebook as the default.
 *   </dd>
 * 
 * <dt>serviceCreated</dt>
 *   <dd>The time when this notebook was created on the
 *   service. This will be set on the service during creation, and the service
 *   will provide this value when it returns a Notebook to a client.
 *   The service will ignore this value if it is sent by clients.
 *   </dd>
 * 
 * <dt>serviceUpdated</dt>
 *   <dd>The time when this notebook was last modified on the
 *   service.  This will be set on the service during creation, and the service
 *   will provide this value when it returns a Notebook to a client.
 *   The service will ignore this value if it is sent by clients.
 *   </dd>
 * 
 * <dt>publishing</dt>
 *   <dd>If the Notebook has been opened for public access (i.e.
 *   if 'published' is set to true), then this will point to the set of
 *   publishing information for the Notebook (URI, description, etc.).  A
 *   Notebook cannot be published without providing this information, but it
 *   will persist for later use if publishing is ever disabled on the Notebook.
 *   Clients that do not wish to change the publishing behavior of a Notebook
 *   should not set this value when calling NoteStore.updateNotebook().
 *   </dd>
 * 
 * <dt>published</dt>
 *   <dd>If this is set to true, then the Notebook will be
 *   accessible to the public via the 'publishing' specification, which must
 *   also be set.  If this is set to false, the Notebook will not be available
 *   to the public.
 *   Clients that do not wish to change the publishing behavior of a Notebook
 *   should not set this value when calling NoteStore.updateNotebook().
 *   </dd>
 * 
 * <dt>stack</dt>
 *   <dd>If this is set, then the notebook is visually contained within a stack
 *   of notebooks with this name.  All notebooks in the same account with the
 *   same 'stack' field are considered to be in the same stack.
 *   Notebooks with no stack set are "top level" and not contained within a
 *   stack.
 *   </dd>
 * 
 * <dt>sharedNotebookIds</dt>
 *   <dd><i>DEPRECATED</i> and to be replaced by sharedNotebooks.
 *   If this notebook has been shared with one or more individuals, then
 *   this will contain the 'id' fields to identify those SharedNotebook
 *   entries in the NoteStore.  This field is only set by the server, and it
 *   is ignored in calls to createNotebook, updateNotebook, etc.
 *   </dd>
 * 
 * <dt>sharedNotebooks</dt>
 *   <dd>The latest list of shared notebooks currently associated with the
 *   notebook, assuming you have permission to access this data.  If you are
 *   accessing the notebook as the owner or via a shared notebook that is
 *   modifiable, then you have access to this data and the value will be set.
 *   Note that this field is read-only.  Clients may not make changes to
 *   shared notebooks via this field.
 *   </dd>
 * 
 * </dl>
 */
public class Notebook implements TBase<Notebook, Notebook._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Notebook");

  private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField UPDATE_SEQUENCE_NUM_FIELD_DESC = new TField("updateSequenceNum", TType.I32, (short)5);
  private static final TField DEFAULT_NOTEBOOK_FIELD_DESC = new TField("defaultNotebook", TType.BOOL, (short)6);
  private static final TField SERVICE_CREATED_FIELD_DESC = new TField("serviceCreated", TType.I64, (short)7);
  private static final TField SERVICE_UPDATED_FIELD_DESC = new TField("serviceUpdated", TType.I64, (short)8);
  private static final TField PUBLISHING_FIELD_DESC = new TField("publishing", TType.STRUCT, (short)10);
  private static final TField PUBLISHED_FIELD_DESC = new TField("published", TType.BOOL, (short)11);
  private static final TField STACK_FIELD_DESC = new TField("stack", TType.STRING, (short)12);
  private static final TField SHARED_NOTEBOOK_IDS_FIELD_DESC = new TField("sharedNotebookIds", TType.LIST, (short)13);
  private static final TField SHARED_NOTEBOOKS_FIELD_DESC = new TField("sharedNotebooks", TType.LIST, (short)14);

  private String guid;
  private String name;
  private int updateSequenceNum;
  private boolean defaultNotebook;
  private long serviceCreated;
  private long serviceUpdated;
  private Publishing publishing;
  private boolean published;
  private String stack;
  private List<Long> sharedNotebookIds;
  private List<SharedNotebook> sharedNotebooks;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    GUID((short)1, "guid"),
    NAME((short)2, "name"),
    UPDATE_SEQUENCE_NUM((short)5, "updateSequenceNum"),
    DEFAULT_NOTEBOOK((short)6, "defaultNotebook"),
    SERVICE_CREATED((short)7, "serviceCreated"),
    SERVICE_UPDATED((short)8, "serviceUpdated"),
    PUBLISHING((short)10, "publishing"),
    PUBLISHED((short)11, "published"),
    STACK((short)12, "stack"),
    SHARED_NOTEBOOK_IDS((short)13, "sharedNotebookIds"),
    SHARED_NOTEBOOKS((short)14, "sharedNotebooks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // NAME
          return NAME;
        case 5: // UPDATE_SEQUENCE_NUM
          return UPDATE_SEQUENCE_NUM;
        case 6: // DEFAULT_NOTEBOOK
          return DEFAULT_NOTEBOOK;
        case 7: // SERVICE_CREATED
          return SERVICE_CREATED;
        case 8: // SERVICE_UPDATED
          return SERVICE_UPDATED;
        case 10: // PUBLISHING
          return PUBLISHING;
        case 11: // PUBLISHED
          return PUBLISHED;
        case 12: // STACK
          return STACK;
        case 13: // SHARED_NOTEBOOK_IDS
          return SHARED_NOTEBOOK_IDS;
        case 14: // SHARED_NOTEBOOKS
          return SHARED_NOTEBOOKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATESEQUENCENUM_ISSET_ID = 0;
  private static final int __DEFAULTNOTEBOOK_ISSET_ID = 1;
  private static final int __SERVICECREATED_ISSET_ID = 2;
  private static final int __SERVICEUPDATED_ISSET_ID = 3;
  private static final int __PUBLISHED_ISSET_ID = 4;
  private boolean[] __isset_vector = new boolean[5];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING        , "Guid")));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.UPDATE_SEQUENCE_NUM, new FieldMetaData("updateSequenceNum", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DEFAULT_NOTEBOOK, new FieldMetaData("defaultNotebook", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.SERVICE_CREATED, new FieldMetaData("serviceCreated", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.SERVICE_UPDATED, new FieldMetaData("serviceUpdated", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.PUBLISHING, new FieldMetaData("publishing", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Publishing.class)));
    tmpMap.put(_Fields.PUBLISHED, new FieldMetaData("published", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.STACK, new FieldMetaData("stack", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHARED_NOTEBOOK_IDS, new FieldMetaData("sharedNotebookIds", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.SHARED_NOTEBOOKS, new FieldMetaData("sharedNotebooks", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, SharedNotebook.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Notebook.class, metaDataMap);
  }

  public Notebook() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Notebook(Notebook other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.updateSequenceNum = other.updateSequenceNum;
    this.defaultNotebook = other.defaultNotebook;
    this.serviceCreated = other.serviceCreated;
    this.serviceUpdated = other.serviceUpdated;
    if (other.isSetPublishing()) {
      this.publishing = new Publishing(other.publishing);
    }
    this.published = other.published;
    if (other.isSetStack()) {
      this.stack = other.stack;
    }
    if (other.isSetSharedNotebookIds()) {
      List<Long> __this__sharedNotebookIds = new ArrayList<Long>();
      for (Long other_element : other.sharedNotebookIds) {
        __this__sharedNotebookIds.add(other_element);
      }
      this.sharedNotebookIds = __this__sharedNotebookIds;
    }
    if (other.isSetSharedNotebooks()) {
      List<SharedNotebook> __this__sharedNotebooks = new ArrayList<SharedNotebook>();
      for (SharedNotebook other_element : other.sharedNotebooks) {
        __this__sharedNotebooks.add(new SharedNotebook(other_element));
      }
      this.sharedNotebooks = __this__sharedNotebooks;
    }
  }

  public Notebook deepCopy() {
    return new Notebook(this);
  }

  public void clear() {
    this.guid = null;
    this.name = null;
    setUpdateSequenceNumIsSet(false);
    this.updateSequenceNum = 0;
    setDefaultNotebookIsSet(false);
    this.defaultNotebook = false;
    setServiceCreatedIsSet(false);
    this.serviceCreated = 0;
    setServiceUpdatedIsSet(false);
    this.serviceUpdated = 0;
    this.publishing = null;
    setPublishedIsSet(false);
    this.published = false;
    this.stack = null;
    this.sharedNotebookIds = null;
    this.sharedNotebooks = null;
  }

  public String getGuid() {
    return this.guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been asigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getUpdateSequenceNum() {
    return this.updateSequenceNum;
  }

  public void setUpdateSequenceNum(int updateSequenceNum) {
    this.updateSequenceNum = updateSequenceNum;
    setUpdateSequenceNumIsSet(true);
  }

  public void unsetUpdateSequenceNum() {
    __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = false;
  }

  /** Returns true if field updateSequenceNum is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateSequenceNum() {
    return __isset_vector[__UPDATESEQUENCENUM_ISSET_ID];
  }

  public void setUpdateSequenceNumIsSet(boolean value) {
    __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = value;
  }

  public boolean isDefaultNotebook() {
    return this.defaultNotebook;
  }

  public void setDefaultNotebook(boolean defaultNotebook) {
    this.defaultNotebook = defaultNotebook;
    setDefaultNotebookIsSet(true);
  }

  public void unsetDefaultNotebook() {
    __isset_vector[__DEFAULTNOTEBOOK_ISSET_ID] = false;
  }

  /** Returns true if field defaultNotebook is set (has been asigned a value) and false otherwise */
  public boolean isSetDefaultNotebook() {
    return __isset_vector[__DEFAULTNOTEBOOK_ISSET_ID];
  }

  public void setDefaultNotebookIsSet(boolean value) {
    __isset_vector[__DEFAULTNOTEBOOK_ISSET_ID] = value;
  }

  public long getServiceCreated() {
    return this.serviceCreated;
  }

  public void setServiceCreated(long serviceCreated) {
    this.serviceCreated = serviceCreated;
    setServiceCreatedIsSet(true);
  }

  public void unsetServiceCreated() {
    __isset_vector[__SERVICECREATED_ISSET_ID] = false;
  }

  /** Returns true if field serviceCreated is set (has been asigned a value) and false otherwise */
  public boolean isSetServiceCreated() {
    return __isset_vector[__SERVICECREATED_ISSET_ID];
  }

  public void setServiceCreatedIsSet(boolean value) {
    __isset_vector[__SERVICECREATED_ISSET_ID] = value;
  }

  public long getServiceUpdated() {
    return this.serviceUpdated;
  }

  public void setServiceUpdated(long serviceUpdated) {
    this.serviceUpdated = serviceUpdated;
    setServiceUpdatedIsSet(true);
  }

  public void unsetServiceUpdated() {
    __isset_vector[__SERVICEUPDATED_ISSET_ID] = false;
  }

  /** Returns true if field serviceUpdated is set (has been asigned a value) and false otherwise */
  public boolean isSetServiceUpdated() {
    return __isset_vector[__SERVICEUPDATED_ISSET_ID];
  }

  public void setServiceUpdatedIsSet(boolean value) {
    __isset_vector[__SERVICEUPDATED_ISSET_ID] = value;
  }

  public Publishing getPublishing() {
    return this.publishing;
  }

  public void setPublishing(Publishing publishing) {
    this.publishing = publishing;
  }

  public void unsetPublishing() {
    this.publishing = null;
  }

  /** Returns true if field publishing is set (has been asigned a value) and false otherwise */
  public boolean isSetPublishing() {
    return this.publishing != null;
  }

  public void setPublishingIsSet(boolean value) {
    if (!value) {
      this.publishing = null;
    }
  }

  public boolean isPublished() {
    return this.published;
  }

  public void setPublished(boolean published) {
    this.published = published;
    setPublishedIsSet(true);
  }

  public void unsetPublished() {
    __isset_vector[__PUBLISHED_ISSET_ID] = false;
  }

  /** Returns true if field published is set (has been asigned a value) and false otherwise */
  public boolean isSetPublished() {
    return __isset_vector[__PUBLISHED_ISSET_ID];
  }

  public void setPublishedIsSet(boolean value) {
    __isset_vector[__PUBLISHED_ISSET_ID] = value;
  }

  public String getStack() {
    return this.stack;
  }

  public void setStack(String stack) {
    this.stack = stack;
  }

  public void unsetStack() {
    this.stack = null;
  }

  /** Returns true if field stack is set (has been asigned a value) and false otherwise */
  public boolean isSetStack() {
    return this.stack != null;
  }

  public void setStackIsSet(boolean value) {
    if (!value) {
      this.stack = null;
    }
  }

  public int getSharedNotebookIdsSize() {
    return (this.sharedNotebookIds == null) ? 0 : this.sharedNotebookIds.size();
  }

  public java.util.Iterator<Long> getSharedNotebookIdsIterator() {
    return (this.sharedNotebookIds == null) ? null : this.sharedNotebookIds.iterator();
  }

  public void addToSharedNotebookIds(long elem) {
    if (this.sharedNotebookIds == null) {
      this.sharedNotebookIds = new ArrayList<Long>();
    }
    this.sharedNotebookIds.add(elem);
  }

  public List<Long> getSharedNotebookIds() {
    return this.sharedNotebookIds;
  }

  public void setSharedNotebookIds(List<Long> sharedNotebookIds) {
    this.sharedNotebookIds = sharedNotebookIds;
  }

  public void unsetSharedNotebookIds() {
    this.sharedNotebookIds = null;
  }

  /** Returns true if field sharedNotebookIds is set (has been asigned a value) and false otherwise */
  public boolean isSetSharedNotebookIds() {
    return this.sharedNotebookIds != null;
  }

  public void setSharedNotebookIdsIsSet(boolean value) {
    if (!value) {
      this.sharedNotebookIds = null;
    }
  }

  public int getSharedNotebooksSize() {
    return (this.sharedNotebooks == null) ? 0 : this.sharedNotebooks.size();
  }

  public java.util.Iterator<SharedNotebook> getSharedNotebooksIterator() {
    return (this.sharedNotebooks == null) ? null : this.sharedNotebooks.iterator();
  }

  public void addToSharedNotebooks(SharedNotebook elem) {
    if (this.sharedNotebooks == null) {
      this.sharedNotebooks = new ArrayList<SharedNotebook>();
    }
    this.sharedNotebooks.add(elem);
  }

  public List<SharedNotebook> getSharedNotebooks() {
    return this.sharedNotebooks;
  }

  public void setSharedNotebooks(List<SharedNotebook> sharedNotebooks) {
    this.sharedNotebooks = sharedNotebooks;
  }

  public void unsetSharedNotebooks() {
    this.sharedNotebooks = null;
  }

  /** Returns true if field sharedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetSharedNotebooks() {
    return this.sharedNotebooks != null;
  }

  public void setSharedNotebooksIsSet(boolean value) {
    if (!value) {
      this.sharedNotebooks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case UPDATE_SEQUENCE_NUM:
      if (value == null) {
        unsetUpdateSequenceNum();
      } else {
        setUpdateSequenceNum((Integer)value);
      }
      break;

    case DEFAULT_NOTEBOOK:
      if (value == null) {
        unsetDefaultNotebook();
      } else {
        setDefaultNotebook((Boolean)value);
      }
      break;

    case SERVICE_CREATED:
      if (value == null) {
        unsetServiceCreated();
      } else {
        setServiceCreated((Long)value);
      }
      break;

    case SERVICE_UPDATED:
      if (value == null) {
        unsetServiceUpdated();
      } else {
        setServiceUpdated((Long)value);
      }
      break;

    case PUBLISHING:
      if (value == null) {
        unsetPublishing();
      } else {
        setPublishing((Publishing)value);
      }
      break;

    case PUBLISHED:
      if (value == null) {
        unsetPublished();
      } else {
        setPublished((Boolean)value);
      }
      break;

    case STACK:
      if (value == null) {
        unsetStack();
      } else {
        setStack((String)value);
      }
      break;

    case SHARED_NOTEBOOK_IDS:
      if (value == null) {
        unsetSharedNotebookIds();
      } else {
        setSharedNotebookIds((List<Long>)value);
      }
      break;

    case SHARED_NOTEBOOKS:
      if (value == null) {
        unsetSharedNotebooks();
      } else {
        setSharedNotebooks((List<SharedNotebook>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case NAME:
      return getName();

    case UPDATE_SEQUENCE_NUM:
      return new Integer(getUpdateSequenceNum());

    case DEFAULT_NOTEBOOK:
      return new Boolean(isDefaultNotebook());

    case SERVICE_CREATED:
      return new Long(getServiceCreated());

    case SERVICE_UPDATED:
      return new Long(getServiceUpdated());

    case PUBLISHING:
      return getPublishing();

    case PUBLISHED:
      return new Boolean(isPublished());

    case STACK:
      return getStack();

    case SHARED_NOTEBOOK_IDS:
      return getSharedNotebookIds();

    case SHARED_NOTEBOOKS:
      return getSharedNotebooks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case NAME:
      return isSetName();
    case UPDATE_SEQUENCE_NUM:
      return isSetUpdateSequenceNum();
    case DEFAULT_NOTEBOOK:
      return isSetDefaultNotebook();
    case SERVICE_CREATED:
      return isSetServiceCreated();
    case SERVICE_UPDATED:
      return isSetServiceUpdated();
    case PUBLISHING:
      return isSetPublishing();
    case PUBLISHED:
      return isSetPublished();
    case STACK:
      return isSetStack();
    case SHARED_NOTEBOOK_IDS:
      return isSetSharedNotebookIds();
    case SHARED_NOTEBOOKS:
      return isSetSharedNotebooks();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Notebook)
      return this.equals((Notebook)that);
    return false;
  }

  public boolean equals(Notebook that) {
    if (that == null)
      return false;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_updateSequenceNum = true && this.isSetUpdateSequenceNum();
    boolean that_present_updateSequenceNum = true && that.isSetUpdateSequenceNum();
    if (this_present_updateSequenceNum || that_present_updateSequenceNum) {
      if (!(this_present_updateSequenceNum && that_present_updateSequenceNum))
        return false;
      if (this.updateSequenceNum != that.updateSequenceNum)
        return false;
    }

    boolean this_present_defaultNotebook = true && this.isSetDefaultNotebook();
    boolean that_present_defaultNotebook = true && that.isSetDefaultNotebook();
    if (this_present_defaultNotebook || that_present_defaultNotebook) {
      if (!(this_present_defaultNotebook && that_present_defaultNotebook))
        return false;
      if (this.defaultNotebook != that.defaultNotebook)
        return false;
    }

    boolean this_present_serviceCreated = true && this.isSetServiceCreated();
    boolean that_present_serviceCreated = true && that.isSetServiceCreated();
    if (this_present_serviceCreated || that_present_serviceCreated) {
      if (!(this_present_serviceCreated && that_present_serviceCreated))
        return false;
      if (this.serviceCreated != that.serviceCreated)
        return false;
    }

    boolean this_present_serviceUpdated = true && this.isSetServiceUpdated();
    boolean that_present_serviceUpdated = true && that.isSetServiceUpdated();
    if (this_present_serviceUpdated || that_present_serviceUpdated) {
      if (!(this_present_serviceUpdated && that_present_serviceUpdated))
        return false;
      if (this.serviceUpdated != that.serviceUpdated)
        return false;
    }

    boolean this_present_publishing = true && this.isSetPublishing();
    boolean that_present_publishing = true && that.isSetPublishing();
    if (this_present_publishing || that_present_publishing) {
      if (!(this_present_publishing && that_present_publishing))
        return false;
      if (!this.publishing.equals(that.publishing))
        return false;
    }

    boolean this_present_published = true && this.isSetPublished();
    boolean that_present_published = true && that.isSetPublished();
    if (this_present_published || that_present_published) {
      if (!(this_present_published && that_present_published))
        return false;
      if (this.published != that.published)
        return false;
    }

    boolean this_present_stack = true && this.isSetStack();
    boolean that_present_stack = true && that.isSetStack();
    if (this_present_stack || that_present_stack) {
      if (!(this_present_stack && that_present_stack))
        return false;
      if (!this.stack.equals(that.stack))
        return false;
    }

    boolean this_present_sharedNotebookIds = true && this.isSetSharedNotebookIds();
    boolean that_present_sharedNotebookIds = true && that.isSetSharedNotebookIds();
    if (this_present_sharedNotebookIds || that_present_sharedNotebookIds) {
      if (!(this_present_sharedNotebookIds && that_present_sharedNotebookIds))
        return false;
      if (!this.sharedNotebookIds.equals(that.sharedNotebookIds))
        return false;
    }

    boolean this_present_sharedNotebooks = true && this.isSetSharedNotebooks();
    boolean that_present_sharedNotebooks = true && that.isSetSharedNotebooks();
    if (this_present_sharedNotebooks || that_present_sharedNotebooks) {
      if (!(this_present_sharedNotebooks && that_present_sharedNotebooks))
        return false;
      if (!this.sharedNotebooks.equals(that.sharedNotebooks))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Notebook other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Notebook typedOther = (Notebook)other;

    lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {      lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateSequenceNum()).compareTo(typedOther.isSetUpdateSequenceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateSequenceNum()) {      lastComparison = TBaseHelper.compareTo(this.updateSequenceNum, typedOther.updateSequenceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultNotebook()).compareTo(typedOther.isSetDefaultNotebook());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultNotebook()) {      lastComparison = TBaseHelper.compareTo(this.defaultNotebook, typedOther.defaultNotebook);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceCreated()).compareTo(typedOther.isSetServiceCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceCreated()) {      lastComparison = TBaseHelper.compareTo(this.serviceCreated, typedOther.serviceCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceUpdated()).compareTo(typedOther.isSetServiceUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceUpdated()) {      lastComparison = TBaseHelper.compareTo(this.serviceUpdated, typedOther.serviceUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishing()).compareTo(typedOther.isSetPublishing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishing()) {      lastComparison = TBaseHelper.compareTo(this.publishing, typedOther.publishing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublished()).compareTo(typedOther.isSetPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublished()) {      lastComparison = TBaseHelper.compareTo(this.published, typedOther.published);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStack()).compareTo(typedOther.isSetStack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStack()) {      lastComparison = TBaseHelper.compareTo(this.stack, typedOther.stack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSharedNotebookIds()).compareTo(typedOther.isSetSharedNotebookIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedNotebookIds()) {      lastComparison = TBaseHelper.compareTo(this.sharedNotebookIds, typedOther.sharedNotebookIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSharedNotebooks()).compareTo(typedOther.isSetSharedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.sharedNotebooks, typedOther.sharedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // GUID
          if (field.type == TType.STRING) {
            this.guid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // UPDATE_SEQUENCE_NUM
          if (field.type == TType.I32) {
            this.updateSequenceNum = iprot.readI32();
            setUpdateSequenceNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DEFAULT_NOTEBOOK
          if (field.type == TType.BOOL) {
            this.defaultNotebook = iprot.readBool();
            setDefaultNotebookIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SERVICE_CREATED
          if (field.type == TType.I64) {
            this.serviceCreated = iprot.readI64();
            setServiceCreatedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SERVICE_UPDATED
          if (field.type == TType.I64) {
            this.serviceUpdated = iprot.readI64();
            setServiceUpdatedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PUBLISHING
          if (field.type == TType.STRUCT) {
            this.publishing = new Publishing();
            this.publishing.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // PUBLISHED
          if (field.type == TType.BOOL) {
            this.published = iprot.readBool();
            setPublishedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // STACK
          if (field.type == TType.STRING) {
            this.stack = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SHARED_NOTEBOOK_IDS
          if (field.type == TType.LIST) {
            {
              TList _list29 = iprot.readListBegin();
              this.sharedNotebookIds = new ArrayList<Long>(_list29.size);
              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
              {
                long _elem31;
                _elem31 = iprot.readI64();
                this.sharedNotebookIds.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SHARED_NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.sharedNotebooks = new ArrayList<SharedNotebook>(_list32.size);
              for (int _i33 = 0; _i33 < _list32.size; ++_i33)
              {
                SharedNotebook _elem34;
                _elem34 = new SharedNotebook();
                _elem34.read(iprot);
                this.sharedNotebooks.add(_elem34);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.guid != null) {
      if (isSetGuid()) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
    }
    if (this.name != null) {
      if (isSetName()) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
    }
    if (isSetUpdateSequenceNum()) {
      oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(this.updateSequenceNum);
      oprot.writeFieldEnd();
    }
    if (isSetDefaultNotebook()) {
      oprot.writeFieldBegin(DEFAULT_NOTEBOOK_FIELD_DESC);
      oprot.writeBool(this.defaultNotebook);
      oprot.writeFieldEnd();
    }
    if (isSetServiceCreated()) {
      oprot.writeFieldBegin(SERVICE_CREATED_FIELD_DESC);
      oprot.writeI64(this.serviceCreated);
      oprot.writeFieldEnd();
    }
    if (isSetServiceUpdated()) {
      oprot.writeFieldBegin(SERVICE_UPDATED_FIELD_DESC);
      oprot.writeI64(this.serviceUpdated);
      oprot.writeFieldEnd();
    }
    if (this.publishing != null) {
      if (isSetPublishing()) {
        oprot.writeFieldBegin(PUBLISHING_FIELD_DESC);
        this.publishing.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPublished()) {
      oprot.writeFieldBegin(PUBLISHED_FIELD_DESC);
      oprot.writeBool(this.published);
      oprot.writeFieldEnd();
    }
    if (this.stack != null) {
      if (isSetStack()) {
        oprot.writeFieldBegin(STACK_FIELD_DESC);
        oprot.writeString(this.stack);
        oprot.writeFieldEnd();
      }
    }
    if (this.sharedNotebookIds != null) {
      if (isSetSharedNotebookIds()) {
        oprot.writeFieldBegin(SHARED_NOTEBOOK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.sharedNotebookIds.size()));
          for (long _iter35 : this.sharedNotebookIds)
          {
            oprot.writeI64(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.sharedNotebooks != null) {
      if (isSetSharedNotebooks()) {
        oprot.writeFieldBegin(SHARED_NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.sharedNotebooks.size()));
          for (SharedNotebook _iter36 : this.sharedNotebooks)
          {
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("Notebook(");
    boolean first = true;

    if (isSetGuid()) {
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetUpdateSequenceNum()) {
      if (!first) sb.append(", ");
      sb.append("updateSequenceNum:");
      sb.append(this.updateSequenceNum);
      first = false;
    }
    if (isSetDefaultNotebook()) {
      if (!first) sb.append(", ");
      sb.append("defaultNotebook:");
      sb.append(this.defaultNotebook);
      first = false;
    }
    if (isSetServiceCreated()) {
      if (!first) sb.append(", ");
      sb.append("serviceCreated:");
      sb.append(this.serviceCreated);
      first = false;
    }
    if (isSetServiceUpdated()) {
      if (!first) sb.append(", ");
      sb.append("serviceUpdated:");
      sb.append(this.serviceUpdated);
      first = false;
    }
    if (isSetPublishing()) {
      if (!first) sb.append(", ");
      sb.append("publishing:");
      if (this.publishing == null) {
        sb.append("null");
      } else {
        sb.append(this.publishing);
      }
      first = false;
    }
    if (isSetPublished()) {
      if (!first) sb.append(", ");
      sb.append("published:");
      sb.append(this.published);
      first = false;
    }
    if (isSetStack()) {
      if (!first) sb.append(", ");
      sb.append("stack:");
      if (this.stack == null) {
        sb.append("null");
      } else {
        sb.append(this.stack);
      }
      first = false;
    }
    if (isSetSharedNotebookIds()) {
      if (!first) sb.append(", ");
      sb.append("sharedNotebookIds:");
      if (this.sharedNotebookIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebookIds);
      }
      first = false;
    }
    if (isSetSharedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("sharedNotebooks:");
      if (this.sharedNotebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebooks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

