/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * The list of optional attributes that can be stored on a note.
 * <dl>
 * <dt>subjectDate</dt>
 *   <dd>time that the note refers to
 *   </dd>
 * 
 * <dt>latitude</dt>
 *   <dd>the latitude where the note was taken
 *   </dd>
 * 
 * <dt>longitude</dt>
 *   <dd>the longitude where the note was taken
 *   </dd>
 * 
 * <dt>altitude</dt>
 *   <dd>the altitude where the note was taken
 *   </dd>
 * 
 * <dt>author</dt>
 *   <dd>the author of the content of the note
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>source</dt>
 *   <dd>the method that the note was added to the account, if the
 *   note wasn't directly authored in an Evernote desktop client.
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>sourceURL</dt>
 *   <dd>the original location where the resource was hosted. For web clips,
 *   this will be the URL of the page that was clipped.
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>sourceApplication</dt>
 *   <dd>an identifying string for the application that
 *   created this note.  This string does not have a guaranteed syntax or
 *   structure -- it is intended for human inspection and tracking.
 *   <br/>
 *   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
 *   </dd>
 * 
 * <dt>shareDate</dt>
 *  <dd>The date and time when this note was directly shared via its own URL.
 *  This is only set on notes that were individually shared - it is independent
 *  of any notebook-level sharing of the containing notepbook. This field
 *  is treated as "read-only" for clients; the server will ignore changes
 *  to this field from an external client.
 *  </dd>
 * 
 * <dt>placeName</dt>
 * <dd>Allows the user to assign a human-readable location name associated
 * with a note. Users may assign values like 'Home' and 'Work'. Place
 * names may also be populated with values from geonames database
 * (e.g., a restaurant name). Applications are encouraged to normalize values
 * so that grouping values by place name provides a useful result. Applications
 * MUST NOT automatically add place name values based on geolocation without
 * confirmation from the user; that is, the value in this field should be
 * more useful than a simple automated lookup based on the note's latitude
 * and longitude.</dd>
 * 
 * <dt>contentClass</dt>
 * <dd>The class (or type) of note. This field is used to indicate to
 * clients that special structured information is represented within
 * the note such that special rules apply when making
 * modifications. If contentClass is set and the client
 * application does not specifically support the specified class,
 * the client MUST treat the note as read-only. In this case, the
 * client MAY modify the note's notebook and tags via the
 * Note.notebookGuid and Note.tagGuids fields.
 * <p>Applications should set contentClass only when they are creating notes
 * that contain structured information that needs to be maintained in order
 * for the user to be able to use the note within that application.
 * Setting contentClass makes a note read-only in other applications, so
 * there is a trade-off when an application chooses to use contentClass.
 * Applications that set contentClass when creating notes must use a contentClass
 * string of the form <i>CompanyName.ApplicationName</i> to ensure uniqueness.</p>
 * Length restrictions: EDAM_NOTE_CONTENT_CLASS_LEN_MIN, EDAM_NOTE_CONTENT_CLASS_LEN_MAX
 * <br/>
 * Regex: EDAM_NOTE_CONTENT_CLASS_REGEX
 * </dd>
 * 
 * <dt>applicationData</dt>
 * <dd>Provides a location for applications to store a relatively small
 * (4kb) blob of data that is not meant to be visible to the user and
 * that is opaque to the Evernote service. A single application may use at most
 * one entry in this map, using its API consumer key as the map key. See the
 * documentation for LazyMap for a description of when the actual map values
 * are returned by the service.
 * <p>To safely add or modify your application's entry in the map, use
 * NoteStore.setNoteApplicationDataEntry. To safely remove your application's
 * entry from the map, use NoteStore.unsetNoteApplicationDataEntry.</p>
 * Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
 * <br/>
 * Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
 * <br/>
 * Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
 * </dd>
 * 
 * <dt>lastEditedBy</dt>
 * <dd>An indication of who made the last change to the note.  If you are
 * accessing the note via a shared notebook to which you have modification
 * rights, or if you are the owner of the notebook to which the note belongs,
 * then you have access to the value.  In this case, the value will be
 * unset if the owner of the notebook containing the note was the last to
 * make the modification, else it will be a string describing the
 * guest who made the last edit.  If you do not have access to this value,
 * it will be left unset.  This field is read-only by clients.  The server
 * will ignore all values set by clients into this field.</dd>
 * 
 * </dl>
 */
public class NoteAttributes implements TBase<NoteAttributes, NoteAttributes._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("NoteAttributes");

  private static final TField SUBJECT_DATE_FIELD_DESC = new TField("subjectDate", TType.I64, (short)1);
  private static final TField LATITUDE_FIELD_DESC = new TField("latitude", TType.DOUBLE, (short)10);
  private static final TField LONGITUDE_FIELD_DESC = new TField("longitude", TType.DOUBLE, (short)11);
  private static final TField ALTITUDE_FIELD_DESC = new TField("altitude", TType.DOUBLE, (short)12);
  private static final TField AUTHOR_FIELD_DESC = new TField("author", TType.STRING, (short)13);
  private static final TField SOURCE_FIELD_DESC = new TField("source", TType.STRING, (short)14);
  private static final TField SOURCE_URL_FIELD_DESC = new TField("sourceURL", TType.STRING, (short)15);
  private static final TField SOURCE_APPLICATION_FIELD_DESC = new TField("sourceApplication", TType.STRING, (short)16);
  private static final TField SHARE_DATE_FIELD_DESC = new TField("shareDate", TType.I64, (short)17);
  private static final TField PLACE_NAME_FIELD_DESC = new TField("placeName", TType.STRING, (short)21);
  private static final TField CONTENT_CLASS_FIELD_DESC = new TField("contentClass", TType.STRING, (short)22);
  private static final TField APPLICATION_DATA_FIELD_DESC = new TField("applicationData", TType.STRUCT, (short)23);
  private static final TField LAST_EDITED_BY_FIELD_DESC = new TField("lastEditedBy", TType.STRING, (short)24);

  private long subjectDate;
  private double latitude;
  private double longitude;
  private double altitude;
  private String author;
  private String source;
  private String sourceURL;
  private String sourceApplication;
  private long shareDate;
  private String placeName;
  private String contentClass;
  private LazyMap applicationData;
  private String lastEditedBy;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUBJECT_DATE((short)1, "subjectDate"),
    LATITUDE((short)10, "latitude"),
    LONGITUDE((short)11, "longitude"),
    ALTITUDE((short)12, "altitude"),
    AUTHOR((short)13, "author"),
    SOURCE((short)14, "source"),
    SOURCE_URL((short)15, "sourceURL"),
    SOURCE_APPLICATION((short)16, "sourceApplication"),
    SHARE_DATE((short)17, "shareDate"),
    PLACE_NAME((short)21, "placeName"),
    CONTENT_CLASS((short)22, "contentClass"),
    APPLICATION_DATA((short)23, "applicationData"),
    LAST_EDITED_BY((short)24, "lastEditedBy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBJECT_DATE
          return SUBJECT_DATE;
        case 10: // LATITUDE
          return LATITUDE;
        case 11: // LONGITUDE
          return LONGITUDE;
        case 12: // ALTITUDE
          return ALTITUDE;
        case 13: // AUTHOR
          return AUTHOR;
        case 14: // SOURCE
          return SOURCE;
        case 15: // SOURCE_URL
          return SOURCE_URL;
        case 16: // SOURCE_APPLICATION
          return SOURCE_APPLICATION;
        case 17: // SHARE_DATE
          return SHARE_DATE;
        case 21: // PLACE_NAME
          return PLACE_NAME;
        case 22: // CONTENT_CLASS
          return CONTENT_CLASS;
        case 23: // APPLICATION_DATA
          return APPLICATION_DATA;
        case 24: // LAST_EDITED_BY
          return LAST_EDITED_BY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBJECTDATE_ISSET_ID = 0;
  private static final int __LATITUDE_ISSET_ID = 1;
  private static final int __LONGITUDE_ISSET_ID = 2;
  private static final int __ALTITUDE_ISSET_ID = 3;
  private static final int __SHAREDATE_ISSET_ID = 4;
  private boolean[] __isset_vector = new boolean[5];

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBJECT_DATE, new FieldMetaData("subjectDate", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.LATITUDE, new FieldMetaData("latitude", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new FieldMetaData("longitude", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.ALTITUDE, new FieldMetaData("altitude", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.AUTHOR, new FieldMetaData("author", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new FieldMetaData("source", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE_URL, new FieldMetaData("sourceURL", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SOURCE_APPLICATION, new FieldMetaData("sourceApplication", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SHARE_DATE, new FieldMetaData("shareDate", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.PLACE_NAME, new FieldMetaData("placeName", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CONTENT_CLASS, new FieldMetaData("contentClass", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_DATA, new FieldMetaData("applicationData", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, LazyMap.class)));
    tmpMap.put(_Fields.LAST_EDITED_BY, new FieldMetaData("lastEditedBy", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(NoteAttributes.class, metaDataMap);
  }

  public NoteAttributes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NoteAttributes(NoteAttributes other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.subjectDate = other.subjectDate;
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    this.altitude = other.altitude;
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetSourceURL()) {
      this.sourceURL = other.sourceURL;
    }
    if (other.isSetSourceApplication()) {
      this.sourceApplication = other.sourceApplication;
    }
    this.shareDate = other.shareDate;
    if (other.isSetPlaceName()) {
      this.placeName = other.placeName;
    }
    if (other.isSetContentClass()) {
      this.contentClass = other.contentClass;
    }
    if (other.isSetApplicationData()) {
      this.applicationData = new LazyMap(other.applicationData);
    }
    if (other.isSetLastEditedBy()) {
      this.lastEditedBy = other.lastEditedBy;
    }
  }

  public NoteAttributes deepCopy() {
    return new NoteAttributes(this);
  }

  public void clear() {
    setSubjectDateIsSet(false);
    this.subjectDate = 0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setAltitudeIsSet(false);
    this.altitude = 0.0;
    this.author = null;
    this.source = null;
    this.sourceURL = null;
    this.sourceApplication = null;
    setShareDateIsSet(false);
    this.shareDate = 0;
    this.placeName = null;
    this.contentClass = null;
    this.applicationData = null;
    this.lastEditedBy = null;
  }

  public long getSubjectDate() {
    return this.subjectDate;
  }

  public void setSubjectDate(long subjectDate) {
    this.subjectDate = subjectDate;
    setSubjectDateIsSet(true);
  }

  public void unsetSubjectDate() {
    __isset_vector[__SUBJECTDATE_ISSET_ID] = false;
  }

  /** Returns true if field subjectDate is set (has been asigned a value) and false otherwise */
  public boolean isSetSubjectDate() {
    return __isset_vector[__SUBJECTDATE_ISSET_ID];
  }

  public void setSubjectDateIsSet(boolean value) {
    __isset_vector[__SUBJECTDATE_ISSET_ID] = value;
  }

  public double getLatitude() {
    return this.latitude;
  }

  public void setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
  }

  public void unsetLatitude() {
    __isset_vector[__LATITUDE_ISSET_ID] = false;
  }

  /** Returns true if field latitude is set (has been asigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return __isset_vector[__LATITUDE_ISSET_ID];
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_vector[__LATITUDE_ISSET_ID] = value;
  }

  public double getLongitude() {
    return this.longitude;
  }

  public void setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
  }

  public void unsetLongitude() {
    __isset_vector[__LONGITUDE_ISSET_ID] = false;
  }

  /** Returns true if field longitude is set (has been asigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return __isset_vector[__LONGITUDE_ISSET_ID];
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_vector[__LONGITUDE_ISSET_ID] = value;
  }

  public double getAltitude() {
    return this.altitude;
  }

  public void setAltitude(double altitude) {
    this.altitude = altitude;
    setAltitudeIsSet(true);
  }

  public void unsetAltitude() {
    __isset_vector[__ALTITUDE_ISSET_ID] = false;
  }

  /** Returns true if field altitude is set (has been asigned a value) and false otherwise */
  public boolean isSetAltitude() {
    return __isset_vector[__ALTITUDE_ISSET_ID];
  }

  public void setAltitudeIsSet(boolean value) {
    __isset_vector[__ALTITUDE_ISSET_ID] = value;
  }

  public String getAuthor() {
    return this.author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been asigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been asigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getSourceURL() {
    return this.sourceURL;
  }

  public void setSourceURL(String sourceURL) {
    this.sourceURL = sourceURL;
  }

  public void unsetSourceURL() {
    this.sourceURL = null;
  }

  /** Returns true if field sourceURL is set (has been asigned a value) and false otherwise */
  public boolean isSetSourceURL() {
    return this.sourceURL != null;
  }

  public void setSourceURLIsSet(boolean value) {
    if (!value) {
      this.sourceURL = null;
    }
  }

  public String getSourceApplication() {
    return this.sourceApplication;
  }

  public void setSourceApplication(String sourceApplication) {
    this.sourceApplication = sourceApplication;
  }

  public void unsetSourceApplication() {
    this.sourceApplication = null;
  }

  /** Returns true if field sourceApplication is set (has been asigned a value) and false otherwise */
  public boolean isSetSourceApplication() {
    return this.sourceApplication != null;
  }

  public void setSourceApplicationIsSet(boolean value) {
    if (!value) {
      this.sourceApplication = null;
    }
  }

  public long getShareDate() {
    return this.shareDate;
  }

  public void setShareDate(long shareDate) {
    this.shareDate = shareDate;
    setShareDateIsSet(true);
  }

  public void unsetShareDate() {
    __isset_vector[__SHAREDATE_ISSET_ID] = false;
  }

  /** Returns true if field shareDate is set (has been asigned a value) and false otherwise */
  public boolean isSetShareDate() {
    return __isset_vector[__SHAREDATE_ISSET_ID];
  }

  public void setShareDateIsSet(boolean value) {
    __isset_vector[__SHAREDATE_ISSET_ID] = value;
  }

  public String getPlaceName() {
    return this.placeName;
  }

  public void setPlaceName(String placeName) {
    this.placeName = placeName;
  }

  public void unsetPlaceName() {
    this.placeName = null;
  }

  /** Returns true if field placeName is set (has been asigned a value) and false otherwise */
  public boolean isSetPlaceName() {
    return this.placeName != null;
  }

  public void setPlaceNameIsSet(boolean value) {
    if (!value) {
      this.placeName = null;
    }
  }

  public String getContentClass() {
    return this.contentClass;
  }

  public void setContentClass(String contentClass) {
    this.contentClass = contentClass;
  }

  public void unsetContentClass() {
    this.contentClass = null;
  }

  /** Returns true if field contentClass is set (has been asigned a value) and false otherwise */
  public boolean isSetContentClass() {
    return this.contentClass != null;
  }

  public void setContentClassIsSet(boolean value) {
    if (!value) {
      this.contentClass = null;
    }
  }

  public LazyMap getApplicationData() {
    return this.applicationData;
  }

  public void setApplicationData(LazyMap applicationData) {
    this.applicationData = applicationData;
  }

  public void unsetApplicationData() {
    this.applicationData = null;
  }

  /** Returns true if field applicationData is set (has been asigned a value) and false otherwise */
  public boolean isSetApplicationData() {
    return this.applicationData != null;
  }

  public void setApplicationDataIsSet(boolean value) {
    if (!value) {
      this.applicationData = null;
    }
  }

  public String getLastEditedBy() {
    return this.lastEditedBy;
  }

  public void setLastEditedBy(String lastEditedBy) {
    this.lastEditedBy = lastEditedBy;
  }

  public void unsetLastEditedBy() {
    this.lastEditedBy = null;
  }

  /** Returns true if field lastEditedBy is set (has been asigned a value) and false otherwise */
  public boolean isSetLastEditedBy() {
    return this.lastEditedBy != null;
  }

  public void setLastEditedByIsSet(boolean value) {
    if (!value) {
      this.lastEditedBy = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBJECT_DATE:
      if (value == null) {
        unsetSubjectDate();
      } else {
        setSubjectDate((Long)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case ALTITUDE:
      if (value == null) {
        unsetAltitude();
      } else {
        setAltitude((Double)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case SOURCE_URL:
      if (value == null) {
        unsetSourceURL();
      } else {
        setSourceURL((String)value);
      }
      break;

    case SOURCE_APPLICATION:
      if (value == null) {
        unsetSourceApplication();
      } else {
        setSourceApplication((String)value);
      }
      break;

    case SHARE_DATE:
      if (value == null) {
        unsetShareDate();
      } else {
        setShareDate((Long)value);
      }
      break;

    case PLACE_NAME:
      if (value == null) {
        unsetPlaceName();
      } else {
        setPlaceName((String)value);
      }
      break;

    case CONTENT_CLASS:
      if (value == null) {
        unsetContentClass();
      } else {
        setContentClass((String)value);
      }
      break;

    case APPLICATION_DATA:
      if (value == null) {
        unsetApplicationData();
      } else {
        setApplicationData((LazyMap)value);
      }
      break;

    case LAST_EDITED_BY:
      if (value == null) {
        unsetLastEditedBy();
      } else {
        setLastEditedBy((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBJECT_DATE:
      return new Long(getSubjectDate());

    case LATITUDE:
      return new Double(getLatitude());

    case LONGITUDE:
      return new Double(getLongitude());

    case ALTITUDE:
      return new Double(getAltitude());

    case AUTHOR:
      return getAuthor();

    case SOURCE:
      return getSource();

    case SOURCE_URL:
      return getSourceURL();

    case SOURCE_APPLICATION:
      return getSourceApplication();

    case SHARE_DATE:
      return new Long(getShareDate());

    case PLACE_NAME:
      return getPlaceName();

    case CONTENT_CLASS:
      return getContentClass();

    case APPLICATION_DATA:
      return getApplicationData();

    case LAST_EDITED_BY:
      return getLastEditedBy();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBJECT_DATE:
      return isSetSubjectDate();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case ALTITUDE:
      return isSetAltitude();
    case AUTHOR:
      return isSetAuthor();
    case SOURCE:
      return isSetSource();
    case SOURCE_URL:
      return isSetSourceURL();
    case SOURCE_APPLICATION:
      return isSetSourceApplication();
    case SHARE_DATE:
      return isSetShareDate();
    case PLACE_NAME:
      return isSetPlaceName();
    case CONTENT_CLASS:
      return isSetContentClass();
    case APPLICATION_DATA:
      return isSetApplicationData();
    case LAST_EDITED_BY:
      return isSetLastEditedBy();
    }
    throw new IllegalStateException();
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NoteAttributes)
      return this.equals((NoteAttributes)that);
    return false;
  }

  public boolean equals(NoteAttributes that) {
    if (that == null)
      return false;

    boolean this_present_subjectDate = true && this.isSetSubjectDate();
    boolean that_present_subjectDate = true && that.isSetSubjectDate();
    if (this_present_subjectDate || that_present_subjectDate) {
      if (!(this_present_subjectDate && that_present_subjectDate))
        return false;
      if (this.subjectDate != that.subjectDate)
        return false;
    }

    boolean this_present_latitude = true && this.isSetLatitude();
    boolean that_present_latitude = true && that.isSetLatitude();
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true && this.isSetLongitude();
    boolean that_present_longitude = true && that.isSetLongitude();
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_altitude = true && this.isSetAltitude();
    boolean that_present_altitude = true && that.isSetAltitude();
    if (this_present_altitude || that_present_altitude) {
      if (!(this_present_altitude && that_present_altitude))
        return false;
      if (this.altitude != that.altitude)
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_sourceURL = true && this.isSetSourceURL();
    boolean that_present_sourceURL = true && that.isSetSourceURL();
    if (this_present_sourceURL || that_present_sourceURL) {
      if (!(this_present_sourceURL && that_present_sourceURL))
        return false;
      if (!this.sourceURL.equals(that.sourceURL))
        return false;
    }

    boolean this_present_sourceApplication = true && this.isSetSourceApplication();
    boolean that_present_sourceApplication = true && that.isSetSourceApplication();
    if (this_present_sourceApplication || that_present_sourceApplication) {
      if (!(this_present_sourceApplication && that_present_sourceApplication))
        return false;
      if (!this.sourceApplication.equals(that.sourceApplication))
        return false;
    }

    boolean this_present_shareDate = true && this.isSetShareDate();
    boolean that_present_shareDate = true && that.isSetShareDate();
    if (this_present_shareDate || that_present_shareDate) {
      if (!(this_present_shareDate && that_present_shareDate))
        return false;
      if (this.shareDate != that.shareDate)
        return false;
    }

    boolean this_present_placeName = true && this.isSetPlaceName();
    boolean that_present_placeName = true && that.isSetPlaceName();
    if (this_present_placeName || that_present_placeName) {
      if (!(this_present_placeName && that_present_placeName))
        return false;
      if (!this.placeName.equals(that.placeName))
        return false;
    }

    boolean this_present_contentClass = true && this.isSetContentClass();
    boolean that_present_contentClass = true && that.isSetContentClass();
    if (this_present_contentClass || that_present_contentClass) {
      if (!(this_present_contentClass && that_present_contentClass))
        return false;
      if (!this.contentClass.equals(that.contentClass))
        return false;
    }

    boolean this_present_applicationData = true && this.isSetApplicationData();
    boolean that_present_applicationData = true && that.isSetApplicationData();
    if (this_present_applicationData || that_present_applicationData) {
      if (!(this_present_applicationData && that_present_applicationData))
        return false;
      if (!this.applicationData.equals(that.applicationData))
        return false;
    }

    boolean this_present_lastEditedBy = true && this.isSetLastEditedBy();
    boolean that_present_lastEditedBy = true && that.isSetLastEditedBy();
    if (this_present_lastEditedBy || that_present_lastEditedBy) {
      if (!(this_present_lastEditedBy && that_present_lastEditedBy))
        return false;
      if (!this.lastEditedBy.equals(that.lastEditedBy))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(NoteAttributes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NoteAttributes typedOther = (NoteAttributes)other;

    lastComparison = Boolean.valueOf(isSetSubjectDate()).compareTo(typedOther.isSetSubjectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectDate()) {      lastComparison = TBaseHelper.compareTo(this.subjectDate, typedOther.subjectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(typedOther.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {      lastComparison = TBaseHelper.compareTo(this.latitude, typedOther.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(typedOther.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {      lastComparison = TBaseHelper.compareTo(this.longitude, typedOther.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAltitude()).compareTo(typedOther.isSetAltitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAltitude()) {      lastComparison = TBaseHelper.compareTo(this.altitude, typedOther.altitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(typedOther.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {      lastComparison = TBaseHelper.compareTo(this.author, typedOther.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {      lastComparison = TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceURL()).compareTo(typedOther.isSetSourceURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceURL()) {      lastComparison = TBaseHelper.compareTo(this.sourceURL, typedOther.sourceURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceApplication()).compareTo(typedOther.isSetSourceApplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceApplication()) {      lastComparison = TBaseHelper.compareTo(this.sourceApplication, typedOther.sourceApplication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareDate()).compareTo(typedOther.isSetShareDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDate()) {      lastComparison = TBaseHelper.compareTo(this.shareDate, typedOther.shareDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlaceName()).compareTo(typedOther.isSetPlaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlaceName()) {      lastComparison = TBaseHelper.compareTo(this.placeName, typedOther.placeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentClass()).compareTo(typedOther.isSetContentClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentClass()) {      lastComparison = TBaseHelper.compareTo(this.contentClass, typedOther.contentClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationData()).compareTo(typedOther.isSetApplicationData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationData()) {      lastComparison = TBaseHelper.compareTo(this.applicationData, typedOther.applicationData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastEditedBy()).compareTo(typedOther.isSetLastEditedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastEditedBy()) {      lastComparison = TBaseHelper.compareTo(this.lastEditedBy, typedOther.lastEditedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SUBJECT_DATE
          if (field.type == TType.I64) {
            this.subjectDate = iprot.readI64();
            setSubjectDateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // LATITUDE
          if (field.type == TType.DOUBLE) {
            this.latitude = iprot.readDouble();
            setLatitudeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // LONGITUDE
          if (field.type == TType.DOUBLE) {
            this.longitude = iprot.readDouble();
            setLongitudeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // ALTITUDE
          if (field.type == TType.DOUBLE) {
            this.altitude = iprot.readDouble();
            setAltitudeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // AUTHOR
          if (field.type == TType.STRING) {
            this.author = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // SOURCE
          if (field.type == TType.STRING) {
            this.source = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // SOURCE_URL
          if (field.type == TType.STRING) {
            this.sourceURL = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // SOURCE_APPLICATION
          if (field.type == TType.STRING) {
            this.sourceApplication = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // SHARE_DATE
          if (field.type == TType.I64) {
            this.shareDate = iprot.readI64();
            setShareDateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // PLACE_NAME
          if (field.type == TType.STRING) {
            this.placeName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // CONTENT_CLASS
          if (field.type == TType.STRING) {
            this.contentClass = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // APPLICATION_DATA
          if (field.type == TType.STRUCT) {
            this.applicationData = new LazyMap();
            this.applicationData.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // LAST_EDITED_BY
          if (field.type == TType.STRING) {
            this.lastEditedBy = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetSubjectDate()) {
      oprot.writeFieldBegin(SUBJECT_DATE_FIELD_DESC);
      oprot.writeI64(this.subjectDate);
      oprot.writeFieldEnd();
    }
    if (isSetLatitude()) {
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(this.latitude);
      oprot.writeFieldEnd();
    }
    if (isSetLongitude()) {
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(this.longitude);
      oprot.writeFieldEnd();
    }
    if (isSetAltitude()) {
      oprot.writeFieldBegin(ALTITUDE_FIELD_DESC);
      oprot.writeDouble(this.altitude);
      oprot.writeFieldEnd();
    }
    if (this.author != null) {
      if (isSetAuthor()) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(this.author);
        oprot.writeFieldEnd();
      }
    }
    if (this.source != null) {
      if (isSetSource()) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(this.source);
        oprot.writeFieldEnd();
      }
    }
    if (this.sourceURL != null) {
      if (isSetSourceURL()) {
        oprot.writeFieldBegin(SOURCE_URL_FIELD_DESC);
        oprot.writeString(this.sourceURL);
        oprot.writeFieldEnd();
      }
    }
    if (this.sourceApplication != null) {
      if (isSetSourceApplication()) {
        oprot.writeFieldBegin(SOURCE_APPLICATION_FIELD_DESC);
        oprot.writeString(this.sourceApplication);
        oprot.writeFieldEnd();
      }
    }
    if (isSetShareDate()) {
      oprot.writeFieldBegin(SHARE_DATE_FIELD_DESC);
      oprot.writeI64(this.shareDate);
      oprot.writeFieldEnd();
    }
    if (this.placeName != null) {
      if (isSetPlaceName()) {
        oprot.writeFieldBegin(PLACE_NAME_FIELD_DESC);
        oprot.writeString(this.placeName);
        oprot.writeFieldEnd();
      }
    }
    if (this.contentClass != null) {
      if (isSetContentClass()) {
        oprot.writeFieldBegin(CONTENT_CLASS_FIELD_DESC);
        oprot.writeString(this.contentClass);
        oprot.writeFieldEnd();
      }
    }
    if (this.applicationData != null) {
      if (isSetApplicationData()) {
        oprot.writeFieldBegin(APPLICATION_DATA_FIELD_DESC);
        this.applicationData.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.lastEditedBy != null) {
      if (isSetLastEditedBy()) {
        oprot.writeFieldBegin(LAST_EDITED_BY_FIELD_DESC);
        oprot.writeString(this.lastEditedBy);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("NoteAttributes(");
    boolean first = true;

    if (isSetSubjectDate()) {
      sb.append("subjectDate:");
      sb.append(this.subjectDate);
      first = false;
    }
    if (isSetLatitude()) {
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
    }
    if (isSetLongitude()) {
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
    }
    if (isSetAltitude()) {
      if (!first) sb.append(", ");
      sb.append("altitude:");
      sb.append(this.altitude);
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetSourceURL()) {
      if (!first) sb.append(", ");
      sb.append("sourceURL:");
      if (this.sourceURL == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceURL);
      }
      first = false;
    }
    if (isSetSourceApplication()) {
      if (!first) sb.append(", ");
      sb.append("sourceApplication:");
      if (this.sourceApplication == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceApplication);
      }
      first = false;
    }
    if (isSetShareDate()) {
      if (!first) sb.append(", ");
      sb.append("shareDate:");
      sb.append(this.shareDate);
      first = false;
    }
    if (isSetPlaceName()) {
      if (!first) sb.append(", ");
      sb.append("placeName:");
      if (this.placeName == null) {
        sb.append("null");
      } else {
        sb.append(this.placeName);
      }
      first = false;
    }
    if (isSetContentClass()) {
      if (!first) sb.append(", ");
      sb.append("contentClass:");
      if (this.contentClass == null) {
        sb.append("null");
      } else {
        sb.append(this.contentClass);
      }
      first = false;
    }
    if (isSetApplicationData()) {
      if (!first) sb.append(", ");
      sb.append("applicationData:");
      if (this.applicationData == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationData);
      }
      first = false;
    }
    if (isSetLastEditedBy()) {
      if (!first) sb.append(", ");
      sb.append("lastEditedBy:");
      if (this.lastEditedBy == null) {
        sb.append("null");
      } else {
        sb.append(this.lastEditedBy);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

